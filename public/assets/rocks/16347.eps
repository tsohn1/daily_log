%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1612.i216.023.S.m003.c8.elements set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Aksana
%%CreationDate: 12/16/2016
%%BoundingBox: 0 0 389 353
%%HiResBoundingBox: 0 0 388.4834 352.7076
%%CropBox: 0 0 388.4834 352.7076
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">shablon450_450</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2016-12-16T17:45:14+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-12-16T17:45:14+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-12-16T17:45:14+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>232</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qkfm/zr5e8paWdR1q&#xA;59GM1WCFRymlcfsxp3P4DuRkMmQRFlryZYwFl8+eav8AnI7znqkjx6DHHolkdkkIWa5Ye7OCi1/y&#xA;V28c1uXXHo6+ernLlsGB3Xnjz1eyF7jzHqLkmtBczKgr/KqsFH0DMWWqn3/a0Gcz/EXW3njz7YyB&#xA;7bzFqKGtaNczFCR4qzMp+kYY6qXeVE5jlIs38rf85JedtLlSLXYYtZs9g0hCwz8f8l4wENP8pN/H&#xA;MvHrD13boaycee737yR+YvlfznZmfR7n9/GAbixlolxFX+ZKmo/ylJHvmfjyxnydhizRmNmTZY2u&#xA;xV2KuxV2KuxV5n+Y3516d5bnk0nRoBquuptKlT9Xtz/xay7lv8gH5kZjZtQI7Dm4+XUCO3V4rq3n&#xA;T8wPMUzNqmuT28Lf8e1sxt4QPDhHTlT/ACt/fMDJqZHq4E9TI9UmHly1mkb1JZJH6tKe/TvU1zHO&#xA;UtByl1tpFzbj1dM1CW3fl8JR2jNQK9VNemSGUhIykJ3pv5n/AJpeXpFC6tLewr/ui+/0hWA7cnq9&#xA;P9VxmRDUy6FyIamXe9U8j/8AORWhatNHY+Y4Bo941FF0GLWrN/lE/FF/sqjxbMzHqgeezmY9SDz2&#xA;evo6OiujBkYBlZTUEHcEEZlOS3irsVdirsVdirsVec/mD+Zs+l3jaJoQWTUlA+s3TDmsJYVCqp2Z&#xA;6b77D9Wn7Q7T8L0x+r7mjLm4dg80vLvWr9y2p6rcTO1Ko0rlRU9lBCgV8BnN5NdknzJLimZPMocW&#xA;g+1HdSgruHDNsQfEHKhqZhFlMNP89ecvLdwrJfPe2gI5W10xlQr/AJLN8S/Qc2Ol7TyR635Fshlk&#xA;HuPlTzPY+ZNFi1O0BQMSk8JNWjlX7SE7V61B7jOp0+cZYcQcyMrFpxl7JLPM3mHTvLuhXmtai/G0&#xA;s4y7gU5MeiotafE7EKPfIzkIiywnMRFl8aecPOOtecdcn1jVHJO62tsDWOGOtVjQe3c9zvmkz5jI&#xA;7umnMzNlL7a1Lq0klRH4DqaeGYc50aDEypHLH6bhY1ULQADv1/hlN2N2skouK0mlYilVPQUqcx55&#xA;oxZALbny40m4BTxAWoP0VwQ19MggrC28w6Bqkeq6PdNDd27copIjxdTShBB2YEbEd82GHtCO3QpF&#xA;xNh9U/lP+Z9n540dvVVbbXLIBdQsxUA12EsYO/Bj2/ZOx7E9DgzCY83a6fOMg82d5e5DsVdirsVe&#xA;WefvzRm9W40Ty49JV5RXepjoh6MkP+V259u3iNdqtbw7R5uu1Os4dovI7e108POtavGSXfrWvVid&#xA;/wBqoPyzVSlI7urlIndbLBC8EcgA4yDpsSPkR1xBNqDugLc8ZWQtRDVTvTqaDLCzKb6LpaToXlA4&#xA;RueB8T9kk+5NcpyTpryyIR08WmnhEkP1kyRvLGF4lTwKjqRQVLdcgDL3NYJS+byvoeq2ouIYeIbk&#xA;Ekj+BvhYrUU+EjbaoyfiyiaLMZZRNFkv5Z+e9S8l6jBoWt3JuPK92/p2t1JWtnK3QGvSMnqOg+0K&#xA;b5tNJq+hdnpNV0L6GBruM2jtHYq7FXYq7FUPqN4tlp91eMOS20MkxHiI1LfwyM5cMSe5BNPmrTLh&#xA;55J765YyXE7tJLIdyWkJZmPzOcBqZGUt3XE7sotPLrSQLLNNSST4kSmwzWz1NGgFSiW2NtcGFVqq&#xA;mla/CN99syRLiFoV4/LtxrFEU+nAtRJKd+vZR45A6gY/eyAJZd5XtLjyvDNFpszcJyrSiUBwWUEV&#xA;9uvbJ4O28+K+Eij5MxKUWYaL5wNxcpaahGsUshAilSvAk7AEGtK50fZntD40hDKACeRHJuhms0Xj&#xA;X/OUHm6WbUNP8qWrEx2yi8vVB+1LJVYlP+qlW/2Qzb6zJvwuLrslkRYR5Y8mrJEj3K8npUqfsr/X&#xA;OW1WtPERFxLoMpHl214lI2AIFABsKjYjr2+WYHiyRxFIdR0WKOWroAyn4Wp0PvmRjzEikgAq9pBG&#xA;kahQG/afsduuYk7vdieauvFnVvn16fT88gxS/V7USW8xiqCoIVx8suwTqQvklL9G17UvK+tWfmbT&#xA;xxubVgLuCtFmgY0eN+vUd+3XsM3eg1RhPhB2bITMSJB9e6LrFjrOk2mq2EnqWd7Es0Ld6MOh8COh&#xA;HjnWRkCLDuoyEhYRuFk7FWO/mJqN5p3kvVbuzJW4SIIrr9pRI6xs491Vicp1EiIEhp1EiIEh85xq&#xA;rQeiH9OjBvYgdq9umc8edug6qgMMQVgazVDzFNlZqGv0cmrg3KNyhbu8dmoDWQ7ADoMnGLKMWO3e&#xA;pyQvLbRx87ppFjtwP5hWp/j7dczI4hQkeTu8GgjwxySPpqz+pl2hR2r6V+j5ZeY4gPIpoeZPMOPD&#xA;c1GYOUni4nS6rIZ5DOky9G6tLBOESSur0eJR/up2+IKetab5VYJcewSraU0hteMhUyIzKyJ9lN9o&#xA;wRt8AoNsE+aJ80s8zRQTadfK9OAiZq+DKvIH6CMniJBDZiJBD2X8j/NM3mH8v7N7lud3pzNYTuer&#xA;ekFMbH/nm61Pc1zpNPPii9FgnxRZ9lzc7FXYqx3zb50sfL0aRlDc6hMC0Nqp4/CNubtvxX9eYGu7&#xA;QhpxvvI9GvJkEXnGr/mB5q1O0urSRraG1u4ngkijjJ+CRSrfEzE1oeuc7l7byzBFAAuMc0iwAXCa&#xA;VKiORJG0q270NeLsvqKD+FPnmCMZyAnyv9DGOMmz5WyOw/MbSKJZSCSO9AKiJ42B+EE9RVegr1zE&#xA;y9lZAOMUYd9tksExHi/h71OOz1y/kku7S0LrKCyySuI4/wDJCjdj86UwcWOAqR/S1RiCLtnWnxR2&#xA;1lHCKAooDV8e5P05qpys2zjyVeTiIGQDn3AyKk7IK65K0ZU/GDVSOtdstxkg7NZeHa9e/wCI/wA0&#xA;tZ1Fjzj+tymEnvHCwhh/4VVzuu0s1AnvcXJLimSy62u0g/cqoJ2odwRQbZy5B5taq+qVTkIgnOjF&#xA;h9/8MaTSAvr6GeKjU58QKLvuPE5ZCBtIBtKpLhoF5rStab++WThxMpC1h1VyCDGKGm1fDp2yrwvN&#xA;hwqF3rBWIRslEeqg9QCfHLMens8+SCKSuMvPBMkrAs0YBQfs1U9cy5ARkCO9INvZP+cXfNZutI1L&#xA;y1M9X09xdWYJ39KY0kUDwWSh/wBnnWaOexi5+hnsYvc8zXPdiqld2lveWs1pcoJbe4Ropo26Mjij&#xA;A/QcBFiigixRfI2sXkGk+YNS0Yux+oXc9shkBqyxSMqtUfzAVzRZMNSIdHkw1IhAXeuyKtY1qO/b&#xA;b8cOPDZb9JpBllRNbI+0S2vwht2qDuRvyr1BJr7ZTK483EkDE0UZD5VjTVWummX61xPGE029Teo9&#xA;/gP44JagmIHRtydoSliGOvSGpNNksriGWB/TCM3NN/iDAAg/KmImCCC1wzDglEi7r4Ury+aLayZU&#xA;mZlY9Qo5AfMdsjHTmXJcOinlBMejpvOFgPh9R2J6KqU/XTEaaXNjHRzMTKtgxPzB5oub9GtoU9G0&#xA;rRj1Z6UNCew9syY4BDnzcvJo/BIBNyr5Pc/+cYLa4Typqtw4IgmvQsVa0JSJeZH/AAQGbPSD0lzd&#xA;KNi9lzKcp2KuxV4F5rvp9R8x6jNKGKvPJEh7qkL+nGB4bLU++cJ2hmM88iehp1+Q3Iu0fShdMzvV&#xA;IYwFanU0rQDNVmy8PvYo+/8AJehXiSc4mWWT06yq7BqwsXjPWgIJ60yvFr8sKo7b/bzbY5DHl+LY&#xA;u/lH0vN9k88oksXqtvFT4gwBLhvo2r7+2+wGuvTmIFS6/oZDKBj4ANyd/wBD1i3gRIUKqCBWq07D&#xA;oBnOyO6ELd8Um+H7snHkiSk7kipPbbJMSW9ItG1DWbeFRyjRg8p7cVNW+/pm07K0pzZ4x6XZ9wWE&#xA;bk+XdC1uPT72We4DuZFqHWhblyr3Izp9VgOSNB18SyKXzkGtRcwxu8ZNGHwqVPatK5hR7MPUhzPy&#xA;p8LxRuL37wgYfN092JykAR4k5rzYv0NN/s5kQ7OiOZZ6PBHLxA7GMSQlw81am06+ow9IbuqKBUHb&#xA;qd8tjpMY6W42DMIzBkLj1CuIroyi6eVrmM0Nshqzsz/YFOuZMMEQdg9BpuzoRn4wlePmPx5KY0nz&#xA;m7ubfT79mHxsFglO1dyRxxnp4zO8fsdLq8ssuUkDbpsjtM07zZqFu0On2Fzqt2vAzpb27zCENXjz&#xA;9NTQtQ/aysaCB3APwtz/AMjHFg4sgMskuQ7vx1Taz/Lz82Z0ZIvLdxGWJDM8YiJPWtZGXAezLN0X&#xA;UjBk6B6V+Rn5R+efK3ml9Z1mKKytTbSwPB6ySyv6hVgP3RdKApXds2unwyjKy5WlwTjKy96zNdg7&#xA;FXYq+Xf+cg/Ks2j+c31iOM/UdaVZUlA2S4jAWRa+9A/0+2a7UwqV97r9TCpX3vOobhZ4+J2k8PH5&#xA;ZjxNG2GnyeHkEkVoGrHT7sxNvtVB4p7f6vT5Y6jFbk9qaTfjHI/f+1l5836cnGaTgJQOIdgaipp1&#xA;pmENPI8nUQ0c53wi6QF/5lt3cUBkZieIUUFepqT/AEyyOnNW2w0UvD4+UWNXUzXN1U9Wbk1OwBr/&#xA;AGZmwHDF3GGHg6cyPOX4H61K6njAI6levz8McIYdmA2T/DSzRtM1PWNQttI0+Iz3l5KEijHUsepJ&#xA;7KAKk9hvkd5S2cXNM5chI6vs/wAl+V7Xyv5ZsNEtjzFrH+9lpT1JXPKR/pcmngNs2mOHCKc6EOEU&#xA;neTZuxV2KvCfNFi+n+Z9TtHFAZ2uIfAxzn1BSvWhYjOE7UwnHnl5m/m4GQVIo/y8ytZHgd1kPIfd&#xA;mh1H1ME0AVATXbqcoSwXzhrP1PXdGCSKpSb1LgNXZJGAQ7Dozpxr75uuz9KcmLJt0+7+1vw4jKMj&#xA;+Nv7WZ6f5nsbgvFHNxljoJI2qpBIB+R69s1OTTSjuQ18aT+Y/M7RvHBaEGSQGkh+zy24DfsSeuZG&#xA;m017yY2Cd2I/8rM1OWKEQ6e8s0YpqC8HIikpxCj4u7jqT09+m3PY0BZMwAfp35j+xzJaKgSZAd2/&#xA;N7F+TM99eeWrjUdQCC7uLuQBEAHpRIiBY+X7W9Wr7503Y+mxY8Z8Pv3PemAgPp38+9Mbj8pfy2uJ&#xA;nml8u2ZkclmITiKnvRSAM2XgQ7mH5eHcl+t/kt5FvNGuLLTtMg026kHKG6iU1Vx0DAn4kPQqf15G&#xA;WniRsKcjTkYiaGx5jveQ+d9Rjt9FHlm78uWek69p9wGuNRs4IYEmjVGUMFREPxlw23wmlfYYuSVD&#xA;hqi7TS6SEZGcK4SGWD8/bOLSgNN0NLe/WECeV2jWBGAAJVI/ida9FJXLDqgBsN2uHZu+52eOzazq&#xA;c2onWzcsuqrdperckAkTc+auQRx22NKUzHEjduwOMGPD0Z9d/ml5+89tZ+UbBYILvUf3dw9sroGj&#xA;oS7yFmcrGE3ZR1960y/xZT2cTwMeH1Hd7x5N8o6X5U0KHSdPWoT47m4YfHPMwHOV/dqfQNu2ZkIC&#xA;IoOsyZDM2U7yTW7FXYq7FXYqk/mzyppHmnRJ9I1WPnby7pIu0kUg+zJGezL/AGHbIzgJCixnASFF&#xA;8pfmD+VnmPyXeFriM3Wks1LbU4gfTIJ2WT/fb+x+gnNblwmHuddkxGPuYlMYmChyXoaqwNHU+IYZ&#xA;GM62LlabXGA4Zi4olVaSEgSeqU3aNgA1O/bfbLYCPMOy00MNmWP8fBdHJ6ki8RRVWgXwAAJ+9skQ&#xA;C5MsUZUCOSHeR4weThC32uO7H2yEoEndwc+lnlncjUQqaVpOq63qEOnaXavdXUxpDbxipPizHoAO&#xA;5OwwE36YuNqM44fCx8n1L+Un5SWnky0N7elLnzBcpxmmXdIUO5iiJ/4Zu/yzMw4eD3scOHh970bL&#xA;292KuxV2KsR/MDyY2u2qXdjRNXtARCTsJY+piY/PdT4/OuaztLQDPGx9Y/FNOXHxDbm8jg1O80W5&#xA;lt7uCWGcN+8gccSPlWn35xeo0hupbEOEdua3UvzEjgt5JYrSS5EDKtyAwHpBxszbdOnWmHT9kSyG&#xA;rrZyMGnlkNcttkP568l6ppehaP5j8xO0UuqSSWWv26VYQW8zepbhEUpyMKx8yC1C6qM7LTaKOnxi&#xA;I5O20wEbjH3j9KU3sGs+XNWn0zUpVe/jo3rRkMs0Z+zKvSodR4ZoNXpRGRAHpBdVnxi7iPSh7i9N&#xA;7LClwxaOd0gq2ykk04infMeGPhsx5jdqhGV2Om6kbuxFpHY6eI0Se8rFGhBYQW5BMjHr8TRGnLsc&#xA;vljnxGc72j9sunwty8sZbyne0ftPT7X0Z+V+mSWHk6zEqlZLotcsp8JD8H3oFOdJ2XiMMAvrujDG&#xA;osrzYNrsVeR/nzpsUr6NdCNfUk+sW0j9yOKyRqfYEN9+YWsGwLtOzJbkPBL23WBqkckI5IT1p1oc&#xA;xAXZEUhnJjtWZ92Yh2r9O2FD3v8A5xs8ox2vl64813K8r7V3eG2ckHjawvxIHhzlQ1/1VzP08KFu&#xA;n1uS5cPc9lzIcJ2KuxV2KuxV2KuxVZPbwXELwXEazQSArJFIoZGU9QymoIxIWnk/mz/nHPytqcr3&#xA;ehTNo10x5eiF9a1J7/uyQyV/yWoPDMaelieWzjT0wPLZ5L5r/J/zf5RH6U1A28+mrIqNdW0laFzR&#xA;ao4R/uBygYJRNlt0WGUclsDu2Kepx+H4j91Tk3cl7H5U/wCcZ9UvFhu9e1SK2tZAriKzrNKyMAft&#xA;uFRKj2bCMEpcy6bJ4mT6jQ7g9w8p+R/LHlSzNtolmsBenr3DfHNKR/PI25+XQdhmTDGI8kwxiPJP&#xA;smzdirsVdirsVdiqlPaWtxT14Y5eP2eahqfKoyMoA8xaCGPeYvy28l+YGEmpaapmWIwLNCzwN6ZP&#xA;IKfSZA4VviAcEA4PDj3NkMhjyeX+cfLn5o6N5Lv/AC3Olv5g8qwxB4dSqI7u2ht3V1DKzVYIE6BW&#xA;+H9qmwqmJAVzDlYpQMgeReS+dvMKaxZeW2Z63Gm6Umn3ooRT6rPKEBJ68oeLE++VSN05EI8N+9nd&#xA;j+SX5iyaNbWdxx+pMqSG0JgDKWPqULtxcMGO+2a/JpMgyGcYerv4v0OtnlAmZRj6u+/0M88n/kjD&#xA;Z3Md3rPohY6Us4BXnToJZCBttuBWvjksHZk5G80r8nG4ZyNzNvWQAoAAoBsAOgGbtudirsVeXfnu&#xA;xXTdIYdRPPT5+g1MxNZ9Idl2b9Z9zwHUyJG4dlUj/hqZgh20kl1acjlEOgH/ABElf+NsnENUi+sf&#xA;yRZG/KzQCnT0pQe+4nkDfjmyw/SHR6n+8LOMsaHYq7FXYq7FXYq7FXYq7FXmn/OQUpXyHHECB699&#xA;Ch+hJJNv+AyrLyb9P9T5a1AUqPl/XMcOcX2v5JuGufJmg3LElptOtJGJNTV4EPX6czI8nWT5lOcL&#xA;F2KuxV2KuxV2KuxV2KuxVSurW3u7Wa1uEElvcI0U0Z6Mjgqyn5g4pBp8Uazod2nmlNAZS1010LB1&#xA;j+LlL9Ya3cIB1qzZgxjvTtpzuN+T7czOdQ7FXYq7FXYq8n/P6dVs9Eg/bkmncf6qIqt/xMZh6w7B&#xA;2XZo9ReB3EgaSRx9ktxX5A1zDDtCkuqRSLJv4Op+8vkw1yD6g/5xz1H63+WVtBt/uPubi2/4J/X3&#xA;/wCR+Z+A+l02rFTenZc4zsVdirsVdirsVdirsVdiryX/AJyLvkTy7pdiftz3bTqd+kMLIf8Ak+Mp&#xA;zHZydMNy+ar88qnwqPuGUBzC+tfyQv8A67+V2huWDPFHJA4BBK+jM6KDTp8Cg5lQ5OuzD1FnWTa3&#xA;Yq7FXYq7FXYq7FXYq7FXYq+RPMV1b2H5zx3ty/C2tfMRnmf+VE1NXc/QBmGPr+LszviH9V9d5mOs&#xA;dirsVdiqG1JtRWxmOmpDJf8AE/V0uGZIuf8Alsiu1B12G/TbrgN9Exq9+TxPzd+Xv5n69LPquvah&#xA;ptpBbozFpJpEhhi3ZgnGN+KjuTue5OYk8E5GyQ7PFq8cBUQXnHljyR5j803S2uj23qxISJr5+SWq&#xA;HvykK/8ACgFv8nKYYZS5cnJy6mMBvz7lWP8ALbzfreo6jp2m2S3M+iySw3siyKsRlRinCN5PT5Fu&#xA;BpsPemEYJWQwlrIcIJ6sv/IjQvzI0q/1VtNjtIbCO4jt9X0zVDNDL6iDmGh4RuUbg/VtjXodiL8M&#xA;JBxNTkxyp9EZlOA7FXYq7FXYq7FXYq7FXYq8G/P0a/rXmPTtM0/Rr+4g06NyLiK2mkSWS4COwjZF&#xA;YMqKi1PY18Moygk7OXgIiLJeJw6Pql/qS6TY2k11qVX5WkKNJICp+OqqCQF7ntlQiXIMwBb6K/5x&#xA;5s/MWj6Nqeg61pd1YGG4F1azXETojrMgR0ViOJKGOux/azIxgjm4ecgmw9byxodirsVdirsVdirs&#xA;VdirsVUb26FpZz3RikmEEbSejApklfiK8UQfaY9AMVD5E/Mny55murzVNfudFvrHTru5uJTLcwOn&#xA;prPMXjDmlFPxBfAk7ZhyibunaRnEgRB3p9Mflnd+cbjyfZDzdZfU9ZgUQu3qpKbiNUXhcNwZ+LPX&#xA;4lJryBNACBmXG63dbOr2ZThYuxV2KuxVTuba2uoHguYkngkFHikUOjDrurVBxVdFFFFGscSLHGgo&#xA;qKAFA8ABiqnbWdparIttCkKyyPNKI1C8pJDyd2p1ZjuTiqtirsVdirsVdirsVdirsVdirsVdiqA0&#xA;nQNB0dGj0jTbXTo33dLSGOAN8xGq1xVH4q7FXYq7FXYq7FXYq7FXYq7FXYqsnghnheCeNZYZVKSR&#xA;OAysrChVlOxBxVfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzzzh+e&#xA;Pk3y5cvZRs+qX0dRJFaFDGjD9l5WYLX/AFeVOhplUswDkY9NKQvkxK2/5yn0JbuNNS0O6tbRjSS4&#xA;ilSdkJ6H0ysVR40b6DkRnBZy0pHV7HoutaVremW+qaVcpeWF0vOC4jOxHQihoQQdiDuDscuBtxSC&#xA;DRRuFDsVdirsVdirsVdirsVcSAKnpiqRax5z0XTFBdmnNaFYQG7iu5IXv45VLNEMxAlNNP1Gz1G0&#xA;S7s5RLBJ0Ydj3BHYjwyyMgRYYkUicKHYq7FXYqtlljiQvIwVB1JxVJb/AMzxwIzRJ8ANPUep67fZ&#xA;G+QM2wQS291jzAE5pMsQP2SEQg19mqfxyJkWQiErHnTzJZyUuEjuY/HhSo9itKfSMRMr4YZNoPm3&#xA;T9WIip9Xu6V9BzXl/qNtXJiVsJQITzJMHYq7FXYq7FXYq7FXYq8F/PH84/Smn8peX7oRMvKPWL5C&#xA;CRUUNvER0PXme3TxzHy5Ogc3T4R9ReEiXT+nIE9y1a/jmNRc+whb5I/TbgwZCppQ1pTCGMnqn/OL&#xA;fnS5sfNM/lWaRmsNWjea2i3IS6gTmSN6DnCjcvHiuZOI704OojYt9TZe4bsVdirsVdirsVdiqU6n&#xA;5lsLKqIfXnG3podgf8psqnmAZxgSxa+1nUNRLCaX07cdY02X+rH55izyGTdGADFfMLPPE5hFBEP3&#xA;a+IU1P35WCyQnlbzbeaJepLbt6lnOf8ASLYnY06/JqdD/DLITMWMo29r03UrPUrOO8s5BJDINj3B&#xA;7qw7EZnRkCLDjkUicKEs8x61Ho+lyXZAeX7EEZ/akI2r7DqcVeG61qmqSXTX891LJM7VD8iCGPQL&#xA;SlB4UxV6Po02ryaNbR6jdNd3Ea1lZiCVLbhWI3JHSpyuRbYik0MtoloS1BRSWr1qB1wJSq6nim9M&#xA;xMWXiNz0r7ZEsgleoS3ENiF582LirUA7Gm2BKTJ6sbCRSY2j+MSV48ab8q9sUvRPI/nCLXraWCQg&#xA;X1pQP/xYnQSAbd+v9uXRLjyDKMkxdirsVdirz/zZ+dnk/wAvXD2q+tqV1HUSLaBSikdQZHKqT/q1&#xA;yqWYByIaaUhfJB+W/wDnIPyFrMxtpzc6ZdBSwS5j5K3EVIR4TJ2/mAxGaKnTS6bpN5m/Oq9uop7T&#xA;RLb6pFIrRreyGs45CnNFU8UYdq8splqO5yMejH8ReIHytpnJ2RZJeLH1A7NyJO5PLv1yniLl8AQ1&#xA;35VtGiM1pI4p1RqGh+4Y8SOFjeoaVeQK3pAuFBqF+1v7f0yYkGuUSmH5S3ssX5leWCp4yHU7WOvS&#xA;qySqjD/gWOWgbhombiX3jmS4DsVdirsVdirsVY95p1VoUFrE1DQNLQ0Jr9ldvpJzHzzrYNuOPVh7&#xA;yAfEx6+H8BmIS3Kc0xVTXYgfCv8ALXx98iSlBiPnHJ4qvIfQd8QpYbqMBs788R8BIdB2oe38MtG4&#xA;Ysn8n+bZtHuxKlZLKUgXUHen8y/5Q/HDCZiWMo29ns7u2vLaO6tpBLBKvKN16Ef59czgbFuOQ85/&#xA;MDVGudZFmhrDaDh2p6jUZj+oYVYXaRC61mCBlPCJvUPhVPiH0VGApDOtHmpeca7MjBh7cSw/VkCz&#xA;CLvbmK2tnmkFVUU4+JOwGRZpB+m5FR2CorAVjKg0234sp7dtsNIttddnvYHgFtyfiSzKwRFp+0zc&#xA;TQDGltKDbX+uRPb2MXG3jYGSf4grMB07k4pV/LVre+XPMVpeSvwtyTHcA13jbZvs15cftU9sRJBj&#xA;b2S3uILiFJ4HEkUgqjqagjLWlUxV2KsT/NPWbrSPI2o3Vq5inYJCkoNCglcIxB7HiTT3yvKai3ae&#xA;IMxb5Yu3VoiE+Mg19h9OYLtm/LUESepMR+9f4UPfip3A+eGRYwCf5FsWLKGdkoQV6k9MUION1+uv&#xA;GPsPUEYoSnUoEPCQj4lNK4hCp5I0uzl/MLyzduwheLU7R3foG4zKQG+nvluOW7TmhcSX2mzKilmI&#xA;VVFWY7AAdzmc6phup/nJ+WWmTmC61+3LggH0FluFBPi8CSL+OQ8SPe2jDM9GUaTq+l6vYRahpd1F&#xA;e2UwrHPCwdT4io6EdwdxkgbayCOaLwodiq2WRIonlc0SNSzHwAFTgJpXnOpXkl1eszfaasrjwL7K&#xA;P9iozXylZtygKS53pdJy+yKfjlZ5skOxJY1NTXfIpVbU/vafzAj8MIQWLeZaf6P4/H922WxYpbYy&#xA;iORixotN/vGGQV6f+VerTfWrjTGflbtGZ4gT0YEKeP8ArBq/Rl2nlvTXkHVjWpPJc3VzJNVZJZHM&#xA;nZgzMScymlB6Wwi1WRz9kREcvCp2/VgKQyq3uPTkV1oQq1J9iKfqyJZgofWNUS7RIYQRGGDux7kd&#xA;ABkaZEpQ00amjH5nChL3802H1eZBM5t4TRiodo1LdDsO/jhpHEHovlqOxXy1Zm2dJoGiEjSxkMC7&#xA;bvuPA7YEpXriSz23IJv6nMfIilMgzCYfl5qEqXlxp0jfu3Uyop7OpANPmD+GSgWOQdWe5a0uxVI/&#xA;O/l0+Y/K2oaOjrHNcRg27v8AZEsbCSPlsTxLKA1O2RlGxTPHPhNvlDXdA82aVPJa6no17bTISqgW&#xA;8jwsfGOaMPE4+TZiHDIOxGpgQhIBNbIgoRQCo6EH+Byot4TFNUDJxfY+I2OBNuk1CoYK3EN71P0Y&#xA;ralZn941w2yLso8TiqE1BxwVerM1aYhUCrPHIGUlXQ1UjYgg4Vev/n3+Yd9NLZeXLWRrezmtYrvU&#xA;AhP7x5hySImm6otG9yfYZkZp9HC02IDcvCrxlZmPYj5dspDlF69/zilq2or5o1bSBKx02WxN28J3&#xA;UTxzRRqw8CUkYHxoPDMjCd3C1I2t9N5kOG7FUt8x8v0LdcetF6eHMV/DK8v0llDm8sl1O+EjqXBI&#xA;NCSiV2268cwXJSq41ueG9jWUhoWbg5IoRsprt4csHDa2nGVsl0bcWr4A/qwhBYr5iet1Gn8qV+kk&#xA;/wBMtixSxdo3PyX79/4ZJWZ/lVcMPM9vFXqsq/R6Zb9a5PF9TCfJ6VrfkTy5rFwbm6iljnbZ5Lee&#xA;aDl7sI2VSfelczGhL5Pyv8tQ20o0yOS2u5AP9IlnnuK07MJZH2PtgISCx7/Afmy2DKsUEyHoIrgk&#xA;09xJHEBgISCpyeS/NTAUsuPj+9i/5rxpPEluueUPMtnpNzdS2hWKJeUjK8bkLUBjRWY0A64gIMnn&#xA;d7dwwSzhSCJmQSJ1HphGVgR8mGSYs4/JN9RGl6rWOWSw9WMQlEkkAm4kyCiBv2eFfoyMgyiWY6nM&#xA;z26x21helmfdRZXS9NurRgU3yPCWfEHeVtG139PW979SlsrSMubiS54KXUoVCJGGL1LEGrACnvhj&#xA;GiiU7FPQsm1uxV2KuxV88fnB5AvtF1a41yygluNGvWaa4ljQyfVpGPJxIFqRGSaq9KDoabVxMmE3&#xA;Yc/DqRVF5pE9pOOcTpIp6FCCPwzHIIcsSB5KgijH7IxZNyzLGlXNAOg/piqVTSmWQuf9iPDCqO8s&#xA;+XNc806mmmaDbG6nZgs9zQ/V7dT1eeQfCoH8v2j0Ay2GIn3OPl1EYjbcvafzW/I7V9Zey1Lyzcxt&#xA;dWtpFZ3Njcn0xMsC8UkjkAKq/HYqaKfEd8jJiEnCxZzD3PKW/IT83riYRNogiRjRrh7u0K08SFlZ&#xA;6f7GuVDAXIOqi9+/Jv8AKpPIWj3Aupkuta1Aq17NFX00WOvCKMsAxA5EliBU9thl8IAOJkyGReh5&#xA;NrdiqB1wJ+hr0v8AZSF3P+wUt/DIzFgpid3iF7ei19WOQ0uYjQof2vcf6w3zApyUpldr0yMopJz5&#xA;IviKBaV8dhh5Kn+mahW2SK5DRSxihZgeJA78umVyDIFw1izFzNE0y8KAxtWq1pQiuPCVtj+qzLPf&#xA;yOjBk2CtXbYDLByYoZvsBV3A3J8ScKp9+X161r5x05o4zMzSeiyJuQJQYy5A7Jy5H2yzEPUwmdnv&#xA;+ZbQ7FXYq7FXdcVSCb8v/I81wbiTQrFpWNWJgjoT4kUocVTu2tba1gS3tYUggjFI4olCIo8Aq0Ax&#xA;VUxV2KuxV2KuxV2KuxVjesflt+X+syNLqXl7T7idzV5zbxrKd67yKFc/fiqRy/kH+UsgodBC71rH&#xA;c3cZ+9JlOCgniK6D8h/ypgBCaIaHc87u9f8A4lMcHCO5PHLvRdt+TX5X27Bh5ctJiDUfWQ1yK/Kd&#xA;pB2wgAIMiebLLKwsbC2S1sbaK0tk+xBAixxr8lUADChXxV2KuxV2KuxVplVlKsAVIoQdwQcVY1ff&#xA;lr5MvZA89i4I6CK5uYVA8AsUqKB9GR4B3J4igF/KDyYuyrej5Xt0P+ZmPBHuXiK0/k75JO5jvDXr&#xA;W9uf+a8eAdy8RVR+UH5f/CW0+V2WnxPeXhrTxHrUw8IWyrxflV+Xsb8/0HbyN4y85e1P92M2FCZ2&#xA;nkzyhaUNrolhCR+0ltCG6U68a4qm0cUcSBI0VEHRVAA+4YquxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVp3VF&#xA;LuQqqKsxNAB7nFUmv/OXlyxVnnuxwUgM6KzqK+6gg/RkDMBsGKRTHTtTsNStEvLGZZ7aT7Mi17di&#xA;DQg/PJA2wII5onCh2KuxV2KuxV2KuxVTuLm3tommuJUhiX7UjsFUV26nFWOX35ieXbSQIDNcHv6U&#xA;dKfP1DHiqWSfmrZhj6enyMvYtIqn7gGxVGaV+ZOj3lwkFxE9m0jBUkYho6npyYUI+6mKsuxV2Kux&#xA;V2KuxV2KuxVLNY8y6RpC/wClzfvaVWBPikP0Dp82pkJTEebbjwynyYzJ+admJSIrCRoq7MzqrU/1&#xA;QGH45V+YHc5A0R70RZ/mr5UluPq928unyGnFrhP3bE+DoXA+bUycc0S1S0sx5sttrm2uoVntpUnh&#xA;cVSWNg6kezLUHLQWgiuapih2KuxV2KuxVZPPDBGZJnEaD9pjTElIFpBqPm6GIEWqcv8Ai2SoH0L1&#xA;OVnJ3N0cPexPUNUvtQkAmkaQV+BD0r02UbDKySW4RA5MN863o9ePTIm2jIWUjvI32v8AgRtkCzDM&#xA;vyb1Ah9Q00k8OKXESdhQ8HNPeq/dluItGoHIvTsucZ2KuxV2KuxV2KuxV4X5o/MSS886OrtXSLKQ&#xA;wW6DpVDxaU+7H7hTFUEzcjyB5Bt+XWte+Kr4oHk7hR/M7BR+JxVAebr+z0ny9cMr+rdXIMMbjYAk&#xA;UolaE8a1JxV6z+T3maXzD5C0+5uJDLe2vKzu3PUvDspJ7loyhJ8cVZpirsVdirsVdirFvOHm4aYD&#xA;ZWbgXrAGSXYiIHptvVyOg+nKcuWthzcrT6fi3PJ5pdO00rSyS8+R5Mxbk7E9Sa7knMR2QFIbAlL9&#xA;ctkls2Lj4lHIfKlf1YQgpFoPmnXNAuuem3jwt6gVkrVHUj9tDVWpXuMsEiOTRKAlsXtnlH82dM1Q&#xA;R2+rKun3jbCWv7h2+Z3T/Zbe+XwzA83EyaYjcbs+BruMucV2KuJCgsxoBuSegGKpBqXm20iYw2bL&#xA;LKNjIT8A37fzZWZ9zdHETzY3dalNdS8pJGuJT9lRvT5AbDKybbxEDkhJYGqWnYGT9mBPib5GnTAl&#xA;RkY6bZTahOtDEpEKHvIdhXFLyy5nnupZLxmqVete5JNSfvyLJnv5VXhj82QKv2bqGSM/IL6v648n&#xA;j5tWYel7VmQ4bsVdirsVdiqnPc21unqXEqQp/PIwUfeaYqkOu+eNC06wuJIbpLm6WJmgig/ecnA+&#xA;EclqvXxOKvmZizMSxJYmpJ6k4qj7TzRqel2ksUTCRHXjEsgDrG1QeQDA9gdumKpLP5g1m+YNc3Tk&#xA;lFJVKRpU1r8KBVxSlWs38t1bWKSFqwRuqVNRxd/U+/kxr9GKvZf+cYtZ+HW9FdzsYr23j7b1imb8&#xA;I8UPdsVdirsVdiqF1a/TT9Mur5xUW8TScTtUqKgfSdsEjQtlCPEQHh893LdzPcSv6kkrF3bxZjU5&#xA;rybd0AAKCzAlUghMsnHoo3dvAYoKXa7cIIpR05AhV+Yoo+7CpY9DoLhvWZh6rVJBrtXww2wEUZLC&#xA;sEUcQNWFSx+eBk9E/KjzjerqEegXkpltZlb6mXNTG6AtwBP7LKDQePTL8M96cPU4hXEHrFxPFbwP&#xA;PK3GKNSzt4AZlEuCBbAda1++1SQxIGisyfgiHVvAvTr8umUSlblQxgJTqEQsgzzMFjBPp1I5N8lG&#xA;5yJbEml1vUmQpbJ6EZ6kfaPzJyHEmkALy/dvTe4eNTs1SwX6Qtf1Y2lXvZYk0NrOJ3krL6zyMvFK&#xA;0CgLU1ONqxG04iaWBvstUU+Rwqy/8vWMPm7TPT2+Nk+ho2U/gclDmwy/SXu+ZLguxV2KuxV5rr35&#xA;hm8Mg02ZkslcxxvEeLylTu/Pqify8dz+GKsRm1K5lYuvFHbdmA5MT7u1W/HFUOzu5q7F28WNTiqB&#xA;1bylJKIriAiKa4J/dP8ACCw+fSvjirG/Mem3Gl2dtbXS8Ly4dpZIqg8Y1+COtCRuS+KWPrbvEo5D&#xA;sAD7DFUFfxkW0ZPVNvop/ZirMfyM1ZtN/MnTlZvTh1FJbST3DqWQfTLGuKH1dirsVdirsVSTzvC8&#xA;3lTUkQVYRcz8kYO34LleUektuA1MPE4opDR4XUnupIBH0NscwXbooXKRgfWLb/ZoxA/iPxxVXutR&#xA;WEC3s4/iYBix3IqK9PHChKRp8kkpuLktsa85O3+qO5wJpRu7y2hBCilO7Hf6e2KEpe+gdyxlQk9f&#xA;iGGkWnHkadn856VHGQf9IhdSP5S9G/AZOHMNeU+k+57l54uWg8uXBUAs7RqK9Ptg/wAMyshoOtxD&#xA;1PJm13WVHprM0S/yrt92Y/E5lIcG6kcyyszyNsHckt898CVdYEAqSS3iScCuCFWHCgSpL1rWp8MV&#xA;anj5wug6sDT54qw96x39f8ofcf8Abyas0/L5EfzjpoZuIDuwPusTED6SKZKHNhl+kvdcyXBdirsV&#xA;SzzPdNaeWtWulbi0FnPIrVpRliYjf54q+cvLGoxR3aWl4OVnISS1aMhAJqPnTpiqzUPNkqEvaWyC&#xA;IHYTFnNPcp6eKoKLz5qi8XW2t1YCoYCUHf8A56Ypc3njzDI5aH0o3P7aRKzD5GTniqXSPeXV2bm+&#xA;laadtyzksTT39sVdcJyhbxpX7sUJLfmlsQe5FPvrilU8rX6af5n0O/cjhaXlvM9enFJwxr17DFX2&#xA;vih2KuxV2KrZI0kjaOQBkcFXU9CCKEYqC+f/ADFZRaRr15pbPU2zjix7o6h0J/2LCuYE4cJp3GLI&#xA;JRtBBgRUGo9sg2KwuZxUK3En7XHYn6euKoW9vBFGzu5JAJFTX6cUEsZ1K+jDgU9SQblW3VSfHxOT&#xA;AYSKXG7nJrUD2CqB+rJUwtnn5K21xqHn6CVqOlpBJPMW2+FR6a0p/lyLk8cd2rPKo+97j540/U7/&#xA;AMsXlvpcSzah+7e3idgoYpIrMoLELVkDAVIFe465kTjYpwoSo28G1HzFqulXPparpNzYlR8f1iCe&#xA;OMmvVZmT0yPkxGY5xFyxlieqX/8AKydJJqLm04k9DcJX+H6sHAWXHHvTBPOekzKAk4jc7qQUkU1+&#xA;TAnI8JTYXRea4FYi4UMo6SRbferH+ONK5vO+hJX1ZfTA7s0Y/wCNseEosd6Um/03Urozaa7XgrX0&#xA;rVTO5pvQLHyPttkxE9yOOPe9A/Ljyn5ouvM1hqt3p02m6TYs8ztdgxSzu0ToiLC1JV4s4di6r9mg&#xA;rU0thAjctGXKCKD2rLXHdirsVSTzvpV5q/lDWdMsgpvLu0mjtlY8VaQoeCknoC21cVfJt9J5k0Jm&#xA;g1jS7m0liqpkuIpYgQKgkOy8WFAd1NMVSw+b7c7coN+3qA4quXzRY/tRw/MOo/hiqsvmzTtq8R8n&#xA;U/0xVePNmi8hzlCGndk7/wCyxVER6/p0yc4WaVelUHIV8KjbFUFqEOp3bK0WnzrCBVOMLmte+wxV&#xA;FaR+XfnzW5xa6dol4rueP1m5gkt7dK/tNLKqKQvWi1bwGKvsmwt5bextreWUzSwxJHJMersqgFjX&#xA;xIriqvirsVdirsVYL+Yv5W2vmuWLUbO7Om65AnpC5ALxzRAlljmQFT8JYlWBqtT1G2RlASbMeQxO&#xA;zyq9/K/81dOfimnpqKg7yWk8DIB4/v2tpT9CZQcDlDVjqgZfLn5jRI3qaDd1T7XCKR+nhwLV+jI+&#xA;CWf5mKDfyz59vf3Q0K/QdSDazoDQ92dcRiKnUR70P/yr/wDMORyI/LV/IerMREn4yyR1+jJeEWB1&#xA;EUytfya/NK5kVf0PDZKdjJeXkAA96WxujkhhYHUjoHrX5VflTceUJrjUtTvkvNWuohBwt0KW8MfI&#xA;OyqXPN2ZlWrGnTYDetsYANE8hlzf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:331EEC4A5FC3E611BDB1F4C6050CA249</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:331EEC4A5FC3E611BDB1F4C6050CA249</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:311EEC4A5FC3E611BDB1F4C6050CA249</stRef:instanceID>
            <stRef:documentID>xmp.did:311EEC4A5FC3E611BDB1F4C6050CA249</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:62829471-ebf3-2c4e-be0f-37578a3e8e57</stEvt:instanceID>
                  <stEvt:when>2016-12-02T14:33:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:837b3c69-7e83-2d46-b542-0ed7f8fc0873</stEvt:instanceID>
                  <stEvt:when>2016-12-15T21:12:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:311EEC4A5FC3E611BDB1F4C6050CA249</stEvt:instanceID>
                  <stEvt:when>2016-12-16T17:44:10+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:331EEC4A5FC3E611BDB1F4C6050CA249</stEvt:instanceID>
                  <stEvt:when>2016-12-16T17:45:14+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -352.708 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 352.708 li
388.483 352.708 li
388.483 0 li
cp
clp
7.92722 211.018 mo
7.36866 211.738 .731982 215.585 3.18898 219.119 cv
5.64598 222.652 10.747 221.659 14.2407 221.421 cv
17.7344 221.183 22.3814 220.555 22.4057 221.255 cv
22.4297 221.955 20.687 221.33 21.9346 223.373 cv
23.7495 226.344 34.0327 226.688 41.3897 226.784 cv
45.0499 226.831 48.3664 226.809 51.087 226.787 cv
55.6575 226.75 58.546 226.713 58.5561 227.005 cv
58.5723 227.472 59.4976 230.591 62.3359 231.661 cv
65.1743 232.73 69.7534 233.173 75.1172 231.101 cv
78.8798 229.648 77.2246 227.916 77.5581 227.437 cv
77.7306 227.189 78.4383 227.632 80.2936 228.075 cv
82.0223 228.487 84.7474 228.899 88.9648 228.753 cv
97.7085 228.451 103.215 227.91 104.903 226.101 cv
106.591 224.29 108.679 221.651 99.3188 217.656 cv
89.9595 213.662 7.92722 211.018 7.92722 211.018 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.317647 .317647 .317647 rgb
f
30.731 189.464 mo
29.7651 187.279 23.4921 180.631 16.1733 183.276 cv
8.85494 185.919 .992158 207.523 .523958 214.71 cv
.0561488 221.898 10.8515 219.863 14.9634 219.541 cv
20.3179 219.122 29.3359 218.199 31.1548 215.505 cv
32.9741 212.814 36.978 203.603 30.731 189.464 cv
.627451 .627451 .627451 rgb
f
15.9887 183.346 mo
15.9888 183.346 15.9889 183.346 15.989 183.346 cv
15.9885 183.347 15.9892 183.346 15.9887 183.346 cv
15.9998 183.342 mo
16.0539 183.32 16.1079 183.3 16.1619 183.28 cv
16.1079 183.3 16.0539 183.32 15.9998 183.342 cv
17.7088 182.849 mo
18.359 182.722 18.9976 182.664 19.6223 182.664 cv
19.6223 182.664 li
18.9976 182.664 18.359 182.722 17.7088 182.849 cv
.759477 .759477 .759477 rgb
f
20.236 193.556 mo
19.93 192.911 19.64 192.321 19.3711 191.794 cv
17.7173 188.558 15.2949 186.861 12.5351 186 cv
13.678 184.744 14.839 183.811 15.9887 183.346 cv
15.9892 183.346 15.9885 183.347 15.989 183.346 cv
15.9926 183.345 15.9962 183.343 15.9998 183.342 cv
16.0539 183.32 16.1079 183.3 16.1619 183.28 cv
16.1657 183.279 16.1695 183.277 16.1733 183.276 cv
16.691 183.089 17.2031 182.948 17.7088 182.849 cv
18.359 182.722 18.9976 182.664 19.6223 182.664 cv
23.2527 182.664 26.3995 184.639 28.4316 186.557 cv
28.4311 186.558 28.4313 186.558 28.4307 186.558 cv
27.7234 185.891 26.8813 185.216 25.9311 184.621 cv
23.8142 188.02 21.994 190.222 20.236 193.556 cv
.556863 .556863 .556863 rgb
f
3.32441 219.305 mo
1.57672 218.586 .40903 217.244 .516039 214.854 cv
.408683 217.244 1.57635 218.586 3.32425 219.305 cv
3.32441 219.305 li
.520603 214.765 mo
.520788 214.762 .520997 214.758 .521187 214.755 cv
.520981 214.759 .520804 214.762 .520603 214.765 cv
.524836 214.697 mo
.524895 214.696 .524924 214.696 .524983 214.695 cv
.524925 214.696 .524894 214.696 .524836 214.697 cv
.525764 214.683 mo
.525804 214.683 .525844 214.682 .525884 214.681 cv
.525854 214.682 .525793 214.683 .525764 214.683 cv
.526784 214.668 mo
.526824 214.668 .52688 214.667 .526921 214.666 cv
.52689 214.667 .526814 214.668 .526784 214.668 cv
.527718 214.655 mo
.52778 214.654 .527886 214.652 .527948 214.651 cv
.527855 214.653 .52781 214.653 .527718 214.655 cv
.528602 214.642 mo
.528708 214.641 .528808 214.639 .528914 214.638 cv
.528819 214.639 .528696 214.641 .528602 214.642 cv
.529606 214.628 mo
.529778 214.626 .529956 214.623 .53013 214.621 cv
.529936 214.623 .529798 214.625 .529606 214.628 cv
.530716 214.613 mo
.530848 214.611 .530975 214.609 .531108 214.607 cv
.530976 214.609 .530847 214.611 .530716 214.613 cv
.531744 214.599 mo
.531833 214.597 .531942 214.596 .532032 214.595 cv
.531932 214.596 .531844 214.597 .531744 214.599 cv
.532962 214.582 mo
.533053 214.581 .533157 214.58 .533248 214.579 cv
.533146 214.58 .533064 214.581 .532962 214.582 cv
.534006 214.569 mo
.534122 214.567 .534204 214.566 .534321 214.565 cv
.534217 214.566 .534109 214.567 .534006 214.569 cv
.535001 214.556 mo
.535118 214.554 .53524 214.553 .535358 214.551 cv
.535253 214.552 .535105 214.554 .535001 214.556 cv
.536313 214.539 mo
.536409 214.538 .536554 214.536 .53665 214.535 cv
.536543 214.536 .53642 214.538 .536313 214.539 cv
.537374 214.526 mo
.53752 214.524 .537615 214.523 .537762 214.521 cv
.537616 214.522 .537519 214.524 .537374 214.526 cv
.538637 214.51 mo
.538662 214.51 .538746 214.508 .538771 214.508 cv
.538734 214.509 .538674 214.509 .538637 214.51 cv
.539889 214.494 mo
.539965 214.494 .539982 214.493 .540058 214.492 cv
.54002 214.493 .539927 214.494 .539889 214.494 cv
.541108 214.48 mo
.541159 214.479 .541162 214.479 .541213 214.478 cv
.541175 214.479 .541146 214.479 .541108 214.48 cv
.542327 214.465 mo
.542353 214.465 .54239 214.464 .542416 214.464 cv
.542378 214.465 .542365 214.465 .542327 214.465 cv
.54357 214.45 mo
.543648 214.45 .54374 214.448 .543819 214.448 cv
.543741 214.448 .543648 214.45 .54357 214.45 cv
.544763 214.437 mo
.54487 214.435 .544976 214.434 .545083 214.433 cv
.544963 214.434 .544882 214.435 .544763 214.437 cv
.547482 214.405 mo
.547537 214.405 .54756 214.405 .547615 214.404 cv
.547574 214.404 .547523 214.405 .547482 214.405 cv
.548836 214.39 mo
.548882 214.39 li
.548836 214.39 li
.863822 .863822 .863822 rgb
f
5.42292 219.862 mo
5.41862 219.861 5.41412 219.86 5.40982 219.86 cv
5.41432 219.86 5.41842 219.861 5.42292 219.862 cv
5.40208 219.859 mo
4.65589 219.742 3.95285 219.564 3.32441 219.305 cv
3.32425 219.305 li
3.95251 219.564 4.65612 219.742 5.40208 219.859 cv
.490196 .490196 .490196 rgb
f
8.18414 220.05 mo
7.23999 220.05 6.30212 219.998 5.42292 219.862 cv
5.41842 219.861 5.41432 219.86 5.40982 219.86 cv
5.40736 219.859 5.40454 219.859 5.40208 219.859 cv
4.65612 219.742 3.95251 219.564 3.32425 219.305 cv
1.57635 218.586 .408683 217.244 .516039 214.854 cv
.51737 214.825 .518877 214.795 .520603 214.765 cv
.520804 214.762 .520981 214.759 .521187 214.755 cv
.522071 214.74 .522974 214.726 .523958 214.71 cv
.524247 214.706 .524542 214.701 .524836 214.697 cv
.524894 214.696 .524925 214.696 .524983 214.695 cv
.525239 214.691 .525504 214.687 .525764 214.683 cv
.525793 214.683 .525854 214.682 .525884 214.681 cv
.526184 214.677 .526477 214.673 .526784 214.668 cv
.526814 214.668 .52689 214.667 .526921 214.666 cv
.527187 214.662 .527448 214.659 .527718 214.655 cv
.52781 214.653 .527855 214.653 .527948 214.651 cv
.528178 214.648 .528369 214.645 .528602 214.642 cv
.528696 214.641 .528819 214.639 .528914 214.638 cv
.529127 214.635 .529391 214.631 .529606 214.628 cv
.529798 214.625 .529936 214.623 .53013 214.621 cv
.530325 214.618 .530519 214.615 .530716 214.613 cv
.530847 214.611 .530976 214.609 .531108 214.607 cv
.531328 214.604 .531521 214.602 .531744 214.599 cv
.531844 214.597 .531932 214.596 .532032 214.595 cv
.532346 214.591 .532643 214.587 .532962 214.582 cv
.533064 214.581 .533146 214.58 .533248 214.579 cv
.5335 214.575 .533751 214.572 .534006 214.569 cv
.534109 214.567 .534217 214.566 .534321 214.565 cv
.53453 214.562 .534789 214.558 .535001 214.556 cv
.535105 214.554 .535253 214.552 .535358 214.551 cv
.535689 214.547 .535978 214.543 .536313 214.539 cv
.53642 214.538 .536543 214.536 .53665 214.535 cv
.536891 214.532 .537131 214.529 .537374 214.526 cv
.537519 214.524 .537616 214.522 .537762 214.521 cv
.538055 214.517 .53834 214.513 .538637 214.51 cv
.538674 214.509 .538734 214.509 .538771 214.508 cv
.539143 214.504 .539512 214.499 .539889 214.494 cv
.539927 214.494 .54002 214.493 .540058 214.492 cv
.540386 214.488 .540776 214.484 .541108 214.48 cv
.541146 214.479 .541175 214.479 .541213 214.478 cv
.541571 214.474 .541964 214.469 .542327 214.465 cv
.542365 214.465 .542378 214.465 .542416 214.464 cv
.542806 214.459 .543175 214.455 .54357 214.45 cv
.543648 214.45 .543741 214.448 .543819 214.448 cv
.544136 214.444 .544443 214.44 .544763 214.437 cv
.544882 214.435 .544963 214.434 .545083 214.433 cv
.54586 214.424 .546685 214.414 .547482 214.405 cv
.547523 214.405 .547574 214.404 .547615 214.404 cv
.548029 214.399 .548417 214.395 .548836 214.39 cv
.548882 214.39 li
.996585 209.39 4.59861 198.361 9.08987 190.804 cv
10.4809 191.639 11.6426 193.522 12.4707 197.015 cv
13.6684 202.064 13.5777 212.589 12.2036 219.816 cv
10.9605 219.939 9.56585 220.05 8.18414 220.05 cv
6.09871 215.865 mo
5.68379 215.865 5.4356 216.319 5.60348 216.71 cv
5.73956 217.028 5.99643 217.353 6.2495 217.353 cv
6.38781 217.353 6.52503 217.256 6.64067 217.007 cv
6.96782 216.304 6.82764 216.069 6.29783 215.898 cv
6.22821 215.875 6.16155 215.865 6.09871 215.865 cv
4.23215 209.668 mo
3.69769 209.668 3.37796 210.252 3.59421 210.757 cv
3.7691 211.165 4.0999 211.584 4.42582 211.584 cv
4.60399 211.584 4.78074 211.459 4.92969 211.138 cv
5.3511 210.233 5.17037 209.93 4.4883 209.71 cv
4.39872 209.681 4.31301 209.668 4.23215 209.668 cv
10.8423 206.924 mo
9.83379 206.924 9.32475 208.018 9.81542 209.033 cv
10.237 209.905 10.9901 210.822 11.6589 210.822 cv
11.9971 210.822 12.3139 210.587 12.5552 209.994 cv
13.2734 208.226 12.8671 207.59 11.4649 207.049 cv
11.2417 206.963 11.0331 206.924 10.8423 206.924 cv
11.2186 203.09 mo
11.1786 203.09 11.1378 203.093 11.0967 203.101 cv
10.5718 203.199 9.96583 203.576 10.581 204.048 cv
10.8601 204.263 11.066 204.362 11.2342 204.362 cv
11.4368 204.362 11.5845 204.218 11.7388 203.956 cv
11.9975 203.517 11.6496 203.09 11.2186 203.09 cv
8.29582 201.935 mo
8.00332 201.935 7.71139 202.16 7.60154 202.527 cv
7.42593 203.111 7.42148 203.902 7.93201 203.902 cv
8.03052 203.902 8.14829 203.872 8.28761 203.806 cv
9.14894 203.396 9.21387 203.025 8.87941 202.351 cv
8.73588 202.062 8.5157 201.935 8.29582 201.935 cv
8.23927 196.525 mo
8.19951 196.525 8.15895 196.529 8.11819 196.537 cv
7.59325 196.635 6.98731 197.011 7.60251 197.484 cv
7.88166 197.698 8.0877 197.798 8.25589 197.798 cv
8.45842 197.798 8.60606 197.654 8.76029 197.392 cv
9.01912 196.952 8.67063 196.525 8.23927 196.525 cv
.658823 .658823 .658823 rgb
f
8.25589 197.798 mo
8.0877 197.798 7.88166 197.698 7.60251 197.484 cv
6.98731 197.011 7.59325 196.635 8.11819 196.537 cv
8.15895 196.529 8.19951 196.525 8.23927 196.525 cv
8.67063 196.525 9.01912 196.952 8.76029 197.392 cv
8.60606 197.654 8.45842 197.798 8.25589 197.798 cv
.752941 .745098 .741176 rgb
f
16.8438 219.382 mo
16.4267 214.951 15.7921 209.911 16.5212 204.638 cv
18.2324 203.822 18.3603 203.078 17.6923 201.736 cv
17.5605 201.47 17.3964 201.273 17.2148 201.138 cv
17.4489 200.244 17.7306 199.346 18.0673 198.446 cv
18.7908 196.511 19.508 194.937 20.236 193.556 cv
20.9536 195.07 21.7597 196.889 22.5919 198.912 cv
20.2853 206.808 19.6196 215.13 19.6418 219.094 cv
18.6791 219.207 17.7351 219.302 16.8438 219.382 cv
.556863 .556863 .556863 rgb
f
22.5919 198.912 mo
21.7597 196.889 20.9536 195.07 20.236 193.556 cv
21.994 190.222 23.8142 188.02 25.9311 184.621 cv
26.8813 185.216 27.7234 185.891 28.4307 186.558 cv
25.8116 189.916 23.9269 194.342 22.5919 198.912 cv
.498039 .498039 .498039 rgb
f
19.8476 221.412 mo
19.1294 220.17 19.8549 196.39 29.1284 185.71 cv
41.5419 171.416 67.043 169.729 79.8437 179.89 cv
99.7539 195.695 96.1176 214.944 95.2539 217.603 cv
94.3897 220.263 77.834 225.378 50.8208 225.358 cv
33.1425 225.345 21.8819 224.926 19.8476 221.412 cv
.835294 .780392 .745098 rgb
f
40.5393 214.541 mo
40.1904 214.541 39.8368 214.514 39.4811 214.46 cv
40.4265 214.017 43.7015 212.889 44.3511 210.152 cv
44.4952 209.716 44.587 209.234 44.6151 208.699 cv
44.8333 207.394 45.1459 205.666 45.8614 204.011 cv
46.1958 203.318 46.5785 202.658 46.9862 202.017 cv
47.7474 200.977 48.7613 200.068 50.1286 199.453 cv
45.3687 202.445 46.8635 208.746 45.8267 211.105 cv
44.8058 213.428 42.774 214.541 40.5393 214.541 cv
.639216 .596078 .568627 rgb
f
95.2588 217.759 mo
95.9737 215.558 98.5728 201.998 88.1719 188.43 cv
85.5088 189.941 83.4404 192.98 81.0728 195.255 cv
76.7051 199.453 67.582 201.169 63.0366 200.238 cv
58.4907 199.306 56.9756 196.835 51.9297 198.599 cv
45.0102 201.017 46.9771 208.488 45.8267 211.105 cv
43.9512 215.373 38.666 215.556 34.9721 212.259 cv
31.2783 208.964 35.1928 200.658 32.2119 195.469 cv
30.3725 192.269 27.272 191.462 25.0659 192.385 cv
19.6582 204.085 19.2583 220.541 19.8525 221.566 cv
21.8867 225.082 33.1475 225.5 50.8262 225.513 cv
77.8389 225.534 94.3946 220.418 95.2588 217.759 cv
.709804 .678431 .662745 rgb
f
58.1563 202.589 mo
59.3843 206.593 60.4776 206.71 63.9297 207.525 cv
67.289 208.317 73.2392 203.419 74.9838 198.803 cv
70.7647 200.34 65.9702 200.837 63.0546 200.24 cv
59.6221 199.537 57.9156 197.958 55.1133 197.986 cv
57.1021 198.357 57.6225 200.849 58.1563 202.589 cv
.666667 .639216 .627451 rgb
f
80.6363 200.098 mo
81.7605 200.307 82.767 199.976 83.7239 199.645 cv
85.1669 199.146 86.497 198.647 87.9478 200 cv
90.3603 202.251 89.83 204.916 88.4317 209.477 cv
87.0337 214.039 83.8824 217.416 84.0166 221.302 cv
84.0293 221.657 84.0185 222.024 84 222.395 cv
90.9179 220.837 94.8671 219.023 95.2774 217.761 cv
95.9922 215.561 98.5913 202.001 88.1904 188.433 cv
85.5269 189.943 83.459 192.982 81.0913 195.257 cv
80.5039 195.822 79.8252 196.337 79.0888 196.812 cv
79.1963 198.486 79.5224 199.89 80.6363 200.098 cv
f
64.1143 221.836 mo
67.3995 217.832 65.5015 212.451 63.9468 212.504 cv
62.3926 212.558 62.7783 214.724 60.4737 215.582 cv
59.4972 215.945 58.4029 215.523 57.3331 215.101 cv
55.8777 214.528 54.4679 213.954 53.4624 215.357 cv
52.2539 217.044 50.3438 219.667 47.2295 219.621 cv
44.3643 219.576 41.3134 221.39 43.2753 225.472 cv
45.646 225.502 48.1704 225.514 50.8447 225.516 cv
55.624 225.52 60.0693 225.361 64.165 225.084 cv
63.4131 224.009 63.2012 222.95 64.1143 221.836 cv
f
64.3194 200.193 mo
63.2349 200.288 68.9263 200.656 71.3921 199.949 cv
73.8575 199.24 75.3906 198.564 75.1011 199.197 cv
74.812 199.83 71.9634 202.962 69.5464 205.07 cv
67.1294 207.177 63.396 207.228 63.396 207.228 cv
63.396 207.228 66.875 208.82 70.959 205.41 cv
75.043 202 75.8945 199.636 78.06 199.249 cv
80.2256 198.864 80.8852 199.93 80.8852 199.93 cv
80.8852 199.93 78.9306 197.43 80.5869 195.816 cv
82.2431 194.203 86.9751 189.292 86.9751 189.292 cv
86.9751 189.292 79.8198 193.898 75.7036 196.374 cv
71.5874 198.852 65.7935 200.064 64.3194 200.193 cv
.909804 .870588 .85098 rgb
f
56.27 194.713 mo
55.8716 194.842 59.3125 197.176 63.2949 197.582 cv
68.1748 198.082 77.9922 192.794 77.9922 192.794 cv
77.9922 192.794 66.9312 195.639 62.997 195.726 cv
59.9672 195.793 58.4207 195.504 57.5668 195.217 cv
56.6893 194.921 56.5428 194.625 56.27 194.713 cv
f
23.1904 219.205 mo
23.3101 217.18 22.2539 211.261 23.7397 208.097 cv
24.834 205.766 25.8267 196.468 26.5747 196.714 cv
26.9091 196.826 25.4663 204.029 24.9575 207.315 cv
24.4487 210.601 24.6387 217.801 26.3945 218.47 cv
29.667 219.719 29.2397 212.064 30.643 211.943 cv
32.8931 211.748 30.2256 217.871 30.269 219.115 cv
30.312 220.359 30.6753 221.863 29.6353 222.171 cv
27.1006 222.923 22.8964 224.195 23.1904 219.205 cv
.627451 .627451 .627451 rgb
f
27.374 191.707 mo
27.374 191.707 32.958 191.164 34.813 195.301 cv
36.6685 199.439 33.6762 207.402 33.5581 208.496 cv
33.4404 209.589 34.2666 197.5 31.6665 194.321 cv
29.0664 191.142 25.2031 191.938 27.374 191.707 cv
.909804 .870588 .85098 rgb
f
38.3145 188.871 mo
37.6587 185.828 40.4961 182.524 43.5937 183.351 cv
46.6914 184.177 47.9277 185.203 47.1103 188.566 cv
46.2925 191.931 39.4272 194.037 38.3145 188.871 cv
f
50.937 180.145 mo
51.7104 178.29 56.0293 177.946 56.7803 180.166 cv
57.5312 182.388 48.6548 185.617 50.937 180.145 cv
f
67.5264 181.459 mo
69.0556 180.158 73.062 181.808 72.7241 184.128 cv
72.3868 186.449 63.0113 185.302 67.5264 181.459 cv
f
51.3052 186.169 mo
52.4097 184.854 54.2641 186.223 53.5673 188.581 cv
52.871 190.941 48.6147 189.376 51.3052 186.169 cv
f
52.7095 201.968 mo
52.5801 201.408 53.3198 201.188 53.8101 201.849 cv
54.3003 202.511 53.0239 203.333 52.7095 201.968 cv
cp
f
49.8413 201.279 mo
50.3325 200.693 51.1577 201.302 50.8481 202.351 cv
50.5381 203.401 48.6445 202.705 49.8413 201.279 cv
cp
f
29.9561 203.6 mo
31.4946 205.018 30.5625 207.374 28.2691 206.87 cv
26.7046 206.526 27.4922 201.33 29.9561 203.6 cv
.627451 .627451 .627451 rgb
f
51.1396 204.466 mo
51.5288 204.825 51.293 205.421 50.7129 205.293 cv
50.3169 205.207 50.5161 203.892 51.1396 204.466 cv
cp
f
54.8262 204.747 mo
55.2153 205.105 54.9795 205.702 54.3994 205.574 cv
54.0034 205.488 54.2026 204.172 54.8262 204.747 cv
cp
f
53.4263 199.718 mo
53.8154 200.077 53.5796 200.673 52.9995 200.544 cv
52.6035 200.458 52.8032 199.144 53.4263 199.718 cv
cp
f
62.2106 187.506 mo
61.4928 187.506 60.7954 186.992 61.1572 185.988 cv
61.382 185.364 61.8509 185.089 62.3039 185.089 cv
62.77 185.089 63.2193 185.38 63.3686 185.88 cv
63.6941 186.972 62.9418 187.506 62.2106 187.506 cv
.639216 .596078 .568627 rgb
f
48.4231 205.93 mo
48.0667 205.93 47.7723 205.752 47.9415 205.251 cv
48.0395 204.962 48.2324 204.848 48.4452 204.848 cv
48.7505 204.848 49.0966 205.083 49.2617 205.374 cv
49.4179 205.648 48.8715 205.93 48.4231 205.93 cv
.545098 .521569 .505882 rgb
f
51.5664 198.767 mo
51.5664 198.767 53.0317 197.257 55.8579 197.976 cv
57.9155 198.5 58.729 203.363 58.729 203.363 cv
58.729 203.363 57.0903 199.86 55.0117 198.824 cv
53.8447 198.241 51.5664 198.767 51.5664 198.767 cv
cp
.909804 .870588 .85098 rgb
f
73.8999 216.932 mo
73.3377 216.628 72.7348 216.352 72.1062 216.114 cv
72.1224 214.639 72.1658 213.319 72.249 212.33 cv
72.4821 209.556 72.8688 206.926 72.5552 203.986 cv
75.3196 201.352 76.2107 199.58 78.06 199.249 cv
78.3917 199.19 78.688 199.165 78.9521 199.165 cv
79.1861 199.165 79.3947 199.185 79.5801 199.218 cv
79.8135 199.688 80.1497 200.007 80.6363 200.098 cv
80.8803 200.144 81.1189 200.163 81.3525 200.163 cv
82.1952 200.163 82.9747 199.904 83.7239 199.645 cv
84.4728 199.386 85.1915 199.127 85.9123 199.127 cv
86.5802 199.127 87.25 199.349 87.9478 200 cv
88.5306 200.544 88.9416 201.112 89.2102 201.725 cv
88.8731 201.708 88.5323 201.699 88.1867 201.699 cv
88.1855 201.699 88.1842 201.699 88.183 201.699 cv
88.183 201.699 li
88.183 201.699 li
88.1823 201.699 li
87.1394 201.699 86.0596 201.779 84.9438 201.945 cv
84.9438 201.945 li
84.9438 201.945 li
84.9401 201.945 84.9364 201.946 84.9327 201.946 cv
84.9295 201.947 84.9256 201.948 84.9224 201.948 cv
84.9194 201.948 84.9163 201.949 84.9133 201.949 cv
84.9094 201.95 84.9054 201.951 84.9015 201.951 cv
84.8979 201.952 84.8943 201.952 84.8906 201.953 cv
84.8875 201.953 84.8836 201.954 84.8804 201.954 cv
84.8757 201.955 84.871 201.956 84.8663 201.957 cv
84.8608 201.957 84.8552 201.958 84.8497 201.959 cv
84.8462 201.96 84.8428 201.96 84.8393 201.961 cv
84.8362 201.961 84.8313 201.962 84.8282 201.963 cv
84.8247 201.963 84.8214 201.964 84.8179 201.964 cv
84.814 201.965 84.8095 201.966 84.8056 201.966 cv
84.8025 201.967 84.7994 201.967 84.7963 201.968 cv
84.7901 201.969 84.7829 201.97 84.7767 201.971 cv
84.7763 201.971 84.7758 201.971 84.7755 201.971 cv
84.7677 201.972 84.7598 201.974 84.7521 201.975 cv
84.7517 201.975 84.7514 201.975 84.751 201.975 cv
77.3327 203.199 74.6757 210.671 73.8999 216.932 cv
.611765 .572549 .552941 rgb
f
95.202 203.076 mo
95.1967 203.074 95.1912 203.071 95.1859 203.069 cv
94.1549 198.588 92.0831 193.511 88.1904 188.433 cv
88.1867 188.435 88.1828 188.437 88.1791 188.44 cv
88.1765 188.436 88.1744 188.434 88.1719 188.43 cv
87.6253 188.74 87.1039 189.115 86.5996 189.534 cv
85.0746 190.512 79.2568 194.237 75.7036 196.374 cv
74.298 197.221 72.6966 197.919 71.1385 198.477 cv
70.8657 197.811 70.5484 197.123 70.1802 196.411 cv
70.1573 196.366 70.1348 196.323 70.1125 196.279 cv
74.1716 194.852 77.9922 192.794 77.9922 192.794 cv
77.9922 192.794 73.6248 193.918 69.4027 194.774 cv
67.4579 190.231 68.9218 188.965 68.8878 185.228 cv
69.2715 185.292 69.6677 185.324 70.0532 185.324 cv
71.3938 185.324 72.6067 184.936 72.7241 184.128 cv
72.9798 182.373 70.7485 181.001 68.9848 181.001 cv
68.4678 181.001 67.9909 181.119 67.6287 181.379 cv
65.046 178.211 58.8054 175.108 54.1411 173.692 cv
55.6758 173.534 57.2108 173.455 58.7357 173.455 cv
66.7428 173.455 74.4305 175.631 79.8447 179.929 cv
89.5033 187.596 93.6211 196.075 95.202 203.076 cv
.721569 .658823 .623529 rgb
f
74.3007 200.264 mo
74.5435 199.826 74.755 199.384 74.929 198.945 cv
74.931 198.945 74.9331 198.945 74.9352 198.945 cv
75.1204 198.945 75.1822 199.02 75.1011 199.197 cv
75.0188 199.377 74.729 199.76 74.3007 200.264 cv
86.5996 189.534 mo
87.1039 189.115 87.6253 188.74 88.1719 188.43 cv
88.1744 188.434 88.1765 188.436 88.1791 188.44 cv
87.6645 188.732 87.1723 189.082 86.6958 189.472 cv
86.6659 189.491 86.6339 189.512 86.5996 189.534 cv
.611765 .572549 .552941 rgb
f
72.3228 202.419 mo
72.1667 201.6 71.9501 200.754 71.6563 199.872 cv
73.2874 199.392 74.4721 198.949 74.929 198.945 cv
74.755 199.384 74.5435 199.826 74.3007 200.264 cv
73.7961 200.858 73.099 201.621 72.3228 202.419 cv
.576471 .541176 .52549 rgb
f
95.1859 203.069 mo
93.3949 202.307 91.3927 201.837 89.2102 201.725 cv
88.9416 201.112 88.5306 200.544 87.9478 200 cv
87.25 199.349 86.5802 199.127 85.9123 199.127 cv
85.1915 199.127 84.4728 199.386 83.7239 199.645 cv
82.9747 199.904 82.1952 200.163 81.3525 200.163 cv
81.1189 200.163 80.8803 200.144 80.6363 200.098 cv
80.1497 200.007 79.8135 199.688 79.5801 199.218 cv
80.3497 199.355 80.719 199.722 80.8393 199.868 cv
80.8684 199.909 80.8852 199.93 80.8852 199.93 cv
80.8852 199.93 80.8708 199.907 80.8393 199.868 cv
80.5538 199.474 79.0842 197.281 80.5869 195.816 cv
82.2431 194.203 86.9751 189.292 86.9751 189.292 cv
86.9751 189.292 86.8764 189.356 86.6958 189.472 cv
87.1723 189.082 87.6645 188.732 88.1791 188.44 cv
88.1828 188.437 88.1867 188.435 88.1904 188.433 cv
92.0831 193.511 94.1549 198.588 95.1859 203.069 cv
f
72.5552 203.986 mo
72.5005 203.474 72.4245 202.952 72.3228 202.419 cv
73.099 201.621 73.7961 200.858 74.3007 200.264 cv
74.729 199.76 75.0188 199.377 75.1011 199.197 cv
75.1822 199.02 75.1204 198.945 74.9352 198.945 cv
74.9331 198.945 74.931 198.945 74.929 198.945 cv
74.4721 198.949 73.2874 199.392 71.6563 199.872 cv
71.505 199.417 71.3329 198.952 71.1385 198.477 cv
72.6966 197.919 74.298 197.221 75.7036 196.374 cv
79.2568 194.237 85.0746 190.512 86.5996 189.534 cv
86.6339 189.512 86.6659 189.491 86.6958 189.472 cv
86.8764 189.356 86.9751 189.292 86.9751 189.292 cv
86.9751 189.292 82.2431 194.203 80.5869 195.816 cv
79.0842 197.281 80.5538 199.474 80.8393 199.868 cv
80.719 199.722 80.3497 199.355 79.5801 199.218 cv
79.3947 199.185 79.1861 199.165 78.9521 199.165 cv
78.688 199.165 78.3917 199.19 78.06 199.249 cv
76.2107 199.58 75.3196 201.352 72.5552 203.986 cv
80.8852 199.93 mo
80.8852 199.93 80.8684 199.909 80.8393 199.868 cv
80.8708 199.907 80.8852 199.93 80.8852 199.93 cv
.784314 .737255 .709804 rgb
f
70.1125 196.279 mo
69.8367 195.739 69.6017 195.239 69.4027 194.774 cv
73.6248 193.918 77.9922 192.794 77.9922 192.794 cv
77.9922 192.794 74.1716 194.852 70.1125 196.279 cv
f
70.0532 185.324 mo
69.6677 185.324 69.2715 185.292 68.8878 185.228 cv
68.8839 184.804 68.8608 184.348 68.8111 183.851 cv
68.7301 183.042 68.3048 182.209 67.6287 181.379 cv
67.9909 181.119 68.4678 181.001 68.9848 181.001 cv
70.7485 181.001 72.9798 182.373 72.7241 184.128 cv
72.6067 184.936 71.3938 185.324 70.0532 185.324 cv
f
29.1545 185.68 mo
29.1551 185.68 li
29.1543 185.681 29.1552 185.68 29.1545 185.68 cv
.945744 .927659 .916032 rgb
f
39.4062 214.448 mo
37.8781 214.201 36.3195 213.462 34.9721 212.259 cv
32.4529 210.012 33.4726 205.434 33.4302 201.104 cv
33.7288 204.841 33.5232 208.565 33.5478 208.565 cv
33.5497 208.565 33.553 208.543 33.5581 208.496 cv
33.6762 207.402 36.6685 199.439 34.813 195.301 cv
33.3436 192.024 29.5345 191.683 28.0143 191.683 cv
27.6154 191.683 27.374 191.707 27.374 191.707 cv
25.2031 191.938 29.0664 191.142 31.6665 194.321 cv
32.0673 194.811 32.3867 195.513 32.6407 196.345 cv
32.5168 196.045 32.3745 195.752 32.2119 195.469 cv
30.8404 193.083 28.7678 192.028 26.8876 192.028 cv
26.2461 192.028 25.6271 192.151 25.0659 192.385 cv
23.1317 196.57 21.8381 201.364 21.0015 205.842 cv
21.0228 205.654 21.0466 205.465 21.0733 205.273 cv
22.4136 198.29 24.8667 190.619 29.1284 185.71 cv
29.1371 185.7 29.1457 185.69 29.1545 185.68 cv
29.1552 185.68 29.1543 185.681 29.1551 185.68 cv
33.6398 180.53 39.8271 177.03 46.502 175.125 cv
48.4396 175.943 50.4211 177.22 51.6699 179.288 cv
51.3366 179.519 51.0779 179.807 50.937 180.145 cv
50.0086 182.371 50.9264 183.157 52.2918 183.157 cv
52.4885 183.157 52.6942 183.141 52.9053 183.11 cv
52.9892 183.937 52.9851 184.838 52.876 185.822 cv
52.693 185.715 52.4932 185.658 52.2898 185.658 cv
51.9501 185.658 51.6007 185.817 51.3052 186.169 cv
49.5102 188.309 50.8072 189.717 52.0762 189.717 cv
52.0945 189.717 52.1125 189.717 52.1308 189.717 cv
50.4907 197.434 50.6188 196.831 48.8428 199.329 cv
48.218 200.207 47.5759 201.091 46.9862 202.017 cv
46.5267 202.645 46.1591 203.322 45.8614 204.011 cv
45.1858 205.409 44.7069 206.939 44.6152 208.697 cv
44.6152 208.697 44.6152 208.698 44.6151 208.699 cv
44.5185 209.276 44.4404 209.771 44.354 210.14 cv
44.353 210.144 44.352 210.148 44.3511 210.152 cv
43.6007 212.425 41.4295 213.476 39.4062 214.448 cv
48.998 191.657 mo
48.3474 191.657 47.6772 192.063 47.3398 193 cv
46.7788 194.556 47.7506 195.315 48.7884 195.315 cv
49.8523 195.315 50.9854 194.517 50.6065 192.964 cv
50.4076 192.149 49.7147 191.657 48.998 191.657 cv
42.6204 183.222 mo
39.9335 183.222 37.7283 186.151 38.3145 188.871 cv
38.7959 191.106 40.3534 191.979 42.0326 191.979 cv
44.235 191.979 46.6463 190.475 47.1103 188.566 cv
47.9277 185.203 46.6914 184.177 43.5937 183.351 cv
43.2649 183.263 42.9394 183.222 42.6204 183.222 cv
31.3906 189.428 mo
31.1361 189.428 30.905 189.557 30.7871 189.884 cv
30.5845 190.447 30.9337 190.647 31.358 190.647 cv
31.8937 190.647 32.5489 190.328 32.3628 190.019 cv
32.1668 189.693 31.7548 189.428 31.3906 189.428 cv
46.8646 179.003 mo
46.3081 179.003 45.7321 179.341 45.4561 180.107 cv
45.0115 181.34 45.8681 181.971 46.7498 181.971 cv
47.648 181.971 48.5723 181.316 48.1724 179.975 cv
47.9891 179.36 47.4372 179.003 46.8646 179.003 cv
.882353 .835294 .807843 rgb
f
44.3511 210.152 mo
44.352 210.148 44.353 210.144 44.354 210.14 cv
44.4404 209.771 44.5185 209.276 44.6151 208.699 cv
44.587 209.234 44.4952 209.716 44.3511 210.152 cv
45.8614 204.011 mo
46.1591 203.322 46.5267 202.645 46.9862 202.017 cv
46.5785 202.658 46.1958 203.318 45.8614 204.011 cv
.737255 .698039 .67451 rgb
f
30.481 219.503 mo
30.4175 219.503 30.3541 219.502 30.2902 219.501 cv
30.281 219.37 30.2734 219.241 30.269 219.115 cv
30.2263 217.89 32.8107 211.938 30.7452 211.938 cv
30.7124 211.938 30.6782 211.94 30.643 211.943 cv
29.3455 212.055 29.613 218.608 27.0739 218.608 cv
26.8669 218.608 26.6412 218.564 26.3945 218.47 cv
24.6387 217.801 24.4487 210.601 24.9575 207.315 cv
25.4663 204.029 26.9091 196.826 26.5747 196.714 cv
26.5649 196.711 26.5552 196.71 26.5453 196.71 cv
25.8008 196.71 24.8197 205.797 23.7397 208.097 cv
22.8191 210.058 22.8744 213.076 23.0212 215.57 cv
21.4286 213.346 20.5152 210.138 21.0015 205.842 cv
21.8381 201.364 23.1317 196.57 25.0659 192.385 cv
25.6271 192.151 26.2461 192.028 26.8876 192.028 cv
28.7678 192.028 30.8404 193.083 32.2119 195.469 cv
32.3745 195.752 32.5168 196.045 32.6407 196.345 cv
33.0542 197.701 33.2944 199.404 33.4302 201.104 cv
33.4726 205.434 32.4529 210.012 34.9721 212.259 cv
36.3195 213.462 37.8781 214.201 39.4062 214.448 cv
37.9109 215.167 36.4962 215.844 35.7963 216.939 cv
34.727 218.612 32.7027 219.503 30.481 219.503 cv
28.8021 203.028 mo
27.2863 203.028 26.9835 206.587 28.2691 206.87 cv
28.4849 206.917 28.6886 206.939 28.8794 206.939 cv
30.716 206.939 31.3498 204.885 29.9561 203.6 cv
29.5168 203.195 29.131 203.028 28.8021 203.028 cv
30.5242 199.789 mo
30.2696 199.789 30.0383 199.918 29.9204 200.245 cv
29.7178 200.807 30.0671 201.007 30.4914 201.007 cv
31.0273 201.007 31.6827 200.688 31.4966 200.378 cv
31.3003 200.053 30.8884 199.789 30.5242 199.789 cv
.788235 .760784 .745098 rgb
f
30.2902 219.501 mo
27.7098 219.441 24.8949 218.187 23.0212 215.57 cv
22.8744 213.076 22.8191 210.058 23.7397 208.097 cv
24.8197 205.797 25.8008 196.71 26.5453 196.71 cv
26.5552 196.71 26.5649 196.711 26.5747 196.714 cv
26.9091 196.826 25.4663 204.029 24.9575 207.315 cv
24.4487 210.601 24.6387 217.801 26.3945 218.47 cv
26.6412 218.564 26.8669 218.608 27.0739 218.608 cv
29.613 218.608 29.3455 212.055 30.643 211.943 cv
30.6782 211.94 30.7124 211.938 30.7452 211.938 cv
32.8107 211.938 30.2263 217.89 30.269 219.115 cv
30.2734 219.241 30.281 219.37 30.2902 219.501 cv
.729412 .721569 .717647 rgb
f
33.5478 208.565 mo
33.5232 208.565 33.7288 204.841 33.4302 201.104 cv
33.2944 199.404 33.0542 197.701 32.6407 196.345 cv
32.3867 195.513 32.0673 194.811 31.6665 194.321 cv
29.0664 191.142 25.2031 191.938 27.374 191.707 cv
27.374 191.707 27.6154 191.683 28.0143 191.683 cv
29.5345 191.683 33.3436 192.024 34.813 195.301 cv
36.6685 199.439 33.6762 207.402 33.5581 208.496 cv
33.553 208.543 33.5497 208.565 33.5478 208.565 cv
.933333 .905882 .886274 rgb
f
42.0326 191.979 mo
40.3534 191.979 38.7959 191.106 38.3145 188.871 cv
37.7283 186.151 39.9335 183.222 42.6204 183.222 cv
42.9394 183.222 43.2649 183.263 43.5937 183.351 cv
46.6914 184.177 47.9277 185.203 47.1103 188.566 cv
46.6463 190.475 44.235 191.979 42.0326 191.979 cv
f
52.2918 183.157 mo
50.9264 183.157 50.0086 182.371 50.937 180.145 cv
51.0779 179.807 51.3366 179.519 51.6699 179.288 cv
52.3062 180.342 52.7522 181.601 52.9053 183.11 cv
52.6942 183.141 52.4885 183.157 52.2918 183.157 cv
f
52.0762 189.717 mo
50.8072 189.717 49.5102 188.309 51.3052 186.169 cv
51.6007 185.817 51.9501 185.658 52.2898 185.658 cv
52.4932 185.658 52.693 185.715 52.876 185.822 cv
52.8159 186.365 52.7238 186.932 52.5971 187.526 cv
52.427 188.323 52.2722 189.051 52.1308 189.717 cv
52.1125 189.717 52.0945 189.717 52.0762 189.717 cv
f
48.7884 195.315 mo
47.7506 195.315 46.7788 194.556 47.3398 193 cv
47.6772 192.063 48.3474 191.657 48.998 191.657 cv
49.7147 191.657 50.4076 192.149 50.6065 192.964 cv
50.9854 194.517 49.8523 195.315 48.7884 195.315 cv
.737255 .698039 .67451 rgb
f
28.8794 206.939 mo
28.6886 206.939 28.4849 206.917 28.2691 206.87 cv
26.9835 206.587 27.2863 203.028 28.8021 203.028 cv
29.131 203.028 29.5168 203.195 29.9561 203.6 cv
31.3498 204.885 30.716 206.939 28.8794 206.939 cv
.729412 .721569 .717647 rgb
f
46.7498 181.971 mo
45.8681 181.971 45.0115 181.34 45.4561 180.107 cv
45.7321 179.341 46.3081 179.003 46.8646 179.003 cv
47.4372 179.003 47.9891 179.36 48.1724 179.975 cv
48.5723 181.316 47.648 181.971 46.7498 181.971 cv
.737255 .698039 .67451 rgb
f
31.358 190.647 mo
30.9337 190.647 30.5845 190.447 30.7871 189.884 cv
30.905 189.557 31.1361 189.428 31.3906 189.428 cv
31.7548 189.428 32.1668 189.693 32.3628 190.019 cv
32.5489 190.328 31.8937 190.647 31.358 190.647 cv
f
30.4914 201.007 mo
30.0671 201.007 29.7178 200.807 29.9204 200.245 cv
30.0383 199.918 30.2696 199.789 30.5242 199.789 cv
30.8884 199.789 31.3003 200.053 31.4966 200.378 cv
31.6827 200.688 31.0273 201.007 30.4914 201.007 cv
.670588 .643137 .627451 rgb
f
74.0551 225.748 mo
73.2876 224.263 72.1049 203.856 84.9438 201.945 cv
95.4077 200.386 102.808 206.425 104.508 214.654 cv
106.518 224.384 104.427 226.13 100.854 226.494 cv
97.2808 226.856 76.3613 230.21 74.0551 225.748 cv
.909804 .870588 .85098 rgb
f
80.7192 227.978 mo
79.8327 227.928 78.9974 227.847 78.2352 227.728 cv
79.1556 226.281 79.2229 224.302 78.1607 221.673 cv
78.1604 221.672 78.1603 221.672 78.1599 221.671 cv
78.1577 221.665 78.1557 221.66 78.1535 221.655 cv
78.1528 221.653 78.1523 221.652 78.1516 221.65 cv
78.1496 221.645 78.1477 221.641 78.1457 221.636 cv
78.1449 221.634 78.1442 221.632 78.1434 221.63 cv
78.1414 221.625 78.1398 221.621 78.1377 221.616 cv
78.1368 221.614 78.1357 221.611 78.1348 221.609 cv
78.1323 221.603 78.1296 221.596 78.1271 221.59 cv
78.1254 221.586 78.1233 221.581 78.1215 221.577 cv
78.1206 221.574 78.1197 221.572 78.1187 221.57 cv
78.1166 221.565 78.1148 221.56 78.1127 221.555 cv
78.1118 221.553 78.1113 221.552 78.1104 221.55 cv
78.108 221.544 78.1059 221.539 78.1035 221.533 cv
78.103 221.532 78.1024 221.53 78.1019 221.529 cv
78.0993 221.523 78.0966 221.516 78.0939 221.51 cv
78.0937 221.51 78.0935 221.509 78.0933 221.509 cv
77.9186 221.09 77.7159 220.656 77.4837 220.205 cv
77.4834 220.204 77.483 220.203 77.4827 220.203 cv
77.4794 220.196 77.4757 220.189 77.4724 220.183 cv
77.4715 220.181 77.471 220.18 77.4701 220.178 cv
77.4668 220.172 77.4637 220.166 77.4604 220.159 cv
77.4598 220.158 77.4587 220.156 77.4581 220.155 cv
77.4542 220.147 77.4503 220.14 77.4463 220.132 cv
77.4463 220.132 li
76.832 218.95 75.5375 217.819 73.9037 216.934 cv
74.3839 213.074 75.5801 208.753 78.166 205.72 cv
80.2387 207.262 83.4399 212.203 81.8051 221.998 cv
81.4243 224.281 81.064 226.257 80.7192 227.978 cv
80.2597 219.878 mo
80.0487 219.878 79.8303 220.006 79.7256 220.296 cv
79.5573 220.764 79.8819 221.003 80.216 221.003 cv
80.5565 221.003 80.9069 220.754 80.7554 220.246 cv
80.6858 220.013 80.4767 219.878 80.2597 219.878 cv
78.4275 213.376 mo
78.1816 213.376 77.9269 213.525 77.8047 213.864 cv
77.6083 214.409 77.9871 214.688 78.377 214.688 cv
78.774 214.688 79.1825 214.398 79.0059 213.806 cv
78.9247 213.534 78.6807 213.376 78.4275 213.376 cv
.933333 .905882 .886274 rgb
f
104.508 214.654 mo
102.808 206.425 95.4077 200.386 84.9438 201.945 cv
82.8828 202.251 81.187 203.039 79.789 204.144 cv
83.8618 204.284 88.6308 204.538 87.2705 209.046 cv
86.0992 212.93 81.2949 216.257 85.6158 219.687 cv
87.9258 221.52 90.2414 219.662 92.3812 217.804 cv
94.2441 216.186 95.9738 214.568 97.4507 215.386 cv
100.624 217.144 97.7729 220.2 101.59 222.558 cv
102.623 223.196 103.813 223.462 105.012 223.388 cv
105.481 221.635 105.387 218.908 104.508 214.654 cv
.835294 .780392 .745098 rgb
f
92.2915 227.507 mo
92.3482 225.722 92.4678 223.73 92.7188 222.554 cv
93.0314 221.09 93.5938 219.194 93.6586 216.705 cv
94.7033 215.84 95.6936 215.167 96.6056 215.167 cv
96.8954 215.167 97.1774 215.235 97.4507 215.386 cv
100.624 217.144 97.7729 220.2 101.59 222.558 cv
102.511 223.127 103.557 223.4 104.623 223.4 cv
104.752 223.4 104.882 223.396 105.012 223.388 cv
105.358 222.095 105.398 220.271 105.041 217.696 cv
105.21 218.917 105.29 219.969 105.291 220.876 cv
105.293 225.22 103.471 226.228 100.854 226.494 cv
100.854 226.494 li
99.606 226.62 96.2398 227.111 92.2915 227.507 cv
105.041 217.689 mo
105.04 217.684 105.039 217.68 105.039 217.675 cv
105.039 217.68 105.04 217.685 105.041 217.689 cv
105.038 217.668 mo
105.037 217.664 105.036 217.659 105.036 217.655 cv
105.036 217.659 105.037 217.664 105.038 217.668 cv
105.034 217.644 mo
105.034 217.641 105.033 217.637 105.033 217.634 cv
105.033 217.637 105.034 217.641 105.034 217.644 cv
105.031 217.621 mo
105.031 217.618 105.03 217.616 105.03 217.613 cv
105.03 217.616 105.031 217.618 105.031 217.621 cv
105.028 217.598 mo
105.027 217.595 105.027 217.593 105.027 217.59 cv
105.027 217.593 105.027 217.595 105.028 217.598 cv
105.024 217.569 mo
105.024 217.569 105.024 217.569 105.024 217.569 cv
105.024 217.569 li
104.531 214.768 mo
104.531 214.767 104.531 214.767 104.531 214.767 cv
104.531 214.768 li
.784314 .737255 .709804 rgb
f
84.9327 201.946 mo
84.9364 201.946 84.9401 201.945 84.9438 201.945 cv
84.9399 201.945 84.9366 201.946 84.9327 201.946 cv
.529412 .482353 .462745 rgb
f
84.9317 201.947 mo
84.932 201.947 84.9323 201.947 84.9327 201.946 cv
84.9366 201.946 84.9399 201.945 84.9438 201.945 cv
84.9438 201.945 li
84.9398 201.945 84.9357 201.946 84.9317 201.947 cv
.784314 .737255 .709804 rgb
f
104.623 223.4 mo
103.557 223.4 102.511 223.127 101.59 222.558 cv
97.7729 220.2 100.624 217.144 97.4507 215.386 cv
97.1774 215.235 96.8954 215.167 96.6056 215.167 cv
95.6936 215.167 94.7033 215.84 93.6586 216.705 cv
93.7048 214.929 93.4976 212.851 92.7652 210.414 cv
91.4097 205.903 86.9756 202.988 84.4448 202.044 cv
84.6079 202.013 84.764 201.972 84.9317 201.947 cv
84.9357 201.946 84.9398 201.945 84.9438 201.945 cv
84.9438 201.945 li
86.0596 201.779 87.1401 201.699 88.183 201.699 cv
96.9206 201.699 102.989 207.303 104.508 214.654 cv
104.516 214.692 104.523 214.729 104.531 214.767 cv
104.531 214.767 104.531 214.767 104.531 214.768 cv
104.74 215.787 104.903 216.718 105.024 217.569 cv
105.024 217.569 105.024 217.569 105.024 217.569 cv
105.025 217.577 105.026 217.583 105.027 217.59 cv
105.027 217.593 105.027 217.595 105.028 217.598 cv
105.028 217.603 105.029 217.608 105.03 217.613 cv
105.03 217.616 105.031 217.618 105.031 217.621 cv
105.032 217.625 105.032 217.63 105.033 217.634 cv
105.033 217.637 105.034 217.641 105.034 217.644 cv
105.035 217.648 105.035 217.651 105.036 217.655 cv
105.036 217.659 105.037 217.664 105.038 217.668 cv
105.038 217.671 105.038 217.672 105.039 217.675 cv
105.039 217.68 105.04 217.684 105.041 217.689 cv
105.041 217.691 105.041 217.694 105.041 217.696 cv
105.398 220.271 105.358 222.095 105.012 223.388 cv
104.882 223.396 104.752 223.4 104.623 223.4 cv
.721569 .658823 .623529 rgb
f
77.4463 220.132 mo
75.2168 215.839 64.0249 212.231 60.1811 218.58 cv
57.125 223.626 56.1465 230.021 62.2744 230.699 cv
73.7929 231.972 82.5688 229.996 77.4463 220.132 cv
.427451 .427451 .427451 rgb
f
84.006 217.606 mo
83.8685 217.343 82.1661 213.951 84.3979 211.481 cv
86.7212 208.911 87.4532 208.263 87.4532 208.263 cv
87.4532 208.263 87.2025 209.366 86.5249 210.79 cv
86.131 211.53 85.6705 212.253 85.2436 212.963 cv
84.9097 213.426 84.6607 213.893 84.4758 214.343 cv
83.9356 215.448 83.6455 216.529 84.006 217.606 cv
.933333 .905882 .886274 rgb
f
84.0146 217.623 mo
84.0146 217.623 84.0116 217.617 84.006 217.606 cv
83.6455 216.529 83.9356 215.448 84.4758 214.343 cv
83.748 216.114 84.0146 217.623 84.0146 217.623 cv
85.2436 212.963 mo
85.6705 212.253 86.131 211.53 86.5249 210.79 cv
86.203 211.466 85.7846 212.215 85.251 212.953 cv
85.2486 212.956 85.246 212.959 85.2436 212.963 cv
.882353 .835294 .807843 rgb
f
89.0943 218.783 mo
88.9135 218.783 88.7287 218.766 88.5401 218.73 cv
85.7979 218.203 86.9268 214.839 86.9268 214.839 cv
87.12 215.969 87.6063 217.438 89.2838 217.438 cv
89.2975 217.438 89.3113 217.438 89.3252 217.438 cv
91.0362 217.414 93.2373 215.688 93.2373 215.688 cv
93.2373 215.688 91.5415 218.783 89.0943 218.783 cv
f
87.0029 203.564 mo
87.0029 203.564 89.2847 204.292 91.1533 206.57 cv
93.022 208.847 89.8779 213.47 89.8779 213.47 cv
89.8779 213.47 91.2544 208.363 89.9556 206.611 cv
88.0356 204.023 87.0029 203.564 87.0029 203.564 cv
cp
.909804 .870588 .85098 rgb
f
78.377 214.688 mo
77.9871 214.688 77.6083 214.409 77.8047 213.864 cv
77.9269 213.525 78.1816 213.376 78.4275 213.376 cv
78.6807 213.376 78.9247 213.534 79.0059 213.806 cv
79.1825 214.398 78.774 214.688 78.377 214.688 cv
.713725 .694118 .678431 rgb
f
83.6282 207.873 mo
83.2385 207.873 82.8597 207.595 83.0561 207.049 cv
83.1781 206.711 83.4327 206.562 83.6787 206.562 cv
83.9319 206.562 84.1759 206.72 84.2569 206.992 cv
84.4335 207.584 84.0252 207.873 83.6282 207.873 cv
.698039 .666667 .65098 rgb
f
84.2346 224.766 mo
84.0398 224.766 83.8505 224.626 83.9487 224.354 cv
84.0098 224.185 84.1371 224.11 84.2601 224.11 cv
84.3867 224.11 84.5087 224.189 84.5493 224.325 cv
84.6375 224.621 84.4332 224.766 84.2346 224.766 cv
f
80.216 221.003 mo
79.8819 221.003 79.5573 220.764 79.7256 220.296 cv
79.8303 220.006 80.0487 219.878 80.2597 219.878 cv
80.4767 219.878 80.6858 220.013 80.7554 220.246 cv
80.9069 220.754 80.5565 221.003 80.216 221.003 cv
.713725 .694118 .678431 rgb
f
80.166 216.921 mo
80.3784 216.333 81.0586 216.413 81.1953 216.873 cv
81.4956 217.878 79.8262 217.866 80.166 216.921 cv
cp
.909804 .870588 .85098 rgb
f
76.3623 216.324 mo
76.7563 215.23 78.0176 215.378 78.2715 216.23 cv
78.8281 218.098 75.7319 218.073 76.3623 216.324 cv
cp
f
84.3606 209.642 mo
84.1658 209.642 83.9765 209.502 84.0747 209.23 cv
84.1358 209.06 84.2633 208.986 84.3863 208.986 cv
84.5127 208.986 84.6345 209.065 84.6748 209.201 cv
84.7633 209.497 84.5591 209.642 84.3606 209.642 cv
.698039 .666667 .65098 rgb
f
78.1607 221.673 mo
78.1605 221.672 78.1602 221.671 78.1599 221.671 cv
78.1603 221.672 78.1604 221.672 78.1607 221.673 cv
78.1535 221.655 mo
78.153 221.654 78.1521 221.651 78.1516 221.65 cv
78.1523 221.652 78.1528 221.653 78.1535 221.655 cv
78.1457 221.636 mo
78.145 221.634 78.1441 221.632 78.1434 221.63 cv
78.1442 221.632 78.1449 221.634 78.1457 221.636 cv
78.1377 221.616 mo
78.1368 221.614 78.1357 221.611 78.1348 221.609 cv
78.1357 221.611 78.1368 221.614 78.1377 221.616 cv
78.1271 221.59 mo
78.1251 221.585 78.1236 221.582 78.1215 221.577 cv
78.1233 221.581 78.1254 221.586 78.1271 221.59 cv
78.1187 221.57 mo
78.1169 221.565 78.1146 221.56 78.1127 221.555 cv
78.1148 221.56 78.1166 221.565 78.1187 221.57 cv
78.1104 221.55 mo
78.1081 221.544 78.1058 221.539 78.1035 221.533 cv
78.1059 221.539 78.108 221.544 78.1104 221.55 cv
78.1019 221.529 mo
78.0992 221.523 78.0967 221.517 78.0939 221.51 cv
78.0966 221.516 78.0993 221.523 78.1019 221.529 cv
78.0933 221.509 mo
77.9186 221.09 77.7157 220.656 77.4837 220.205 cv
77.7159 220.656 77.9186 221.09 78.0933 221.509 cv
77.4827 220.203 mo
77.4793 220.196 77.4758 220.189 77.4724 220.183 cv
77.4757 220.189 77.4794 220.196 77.4827 220.203 cv
77.4701 220.178 mo
77.467 220.172 77.4635 220.165 77.4604 220.159 cv
77.4637 220.166 77.4668 220.172 77.4701 220.178 cv
77.4581 220.155 mo
77.4541 220.147 77.4504 220.14 77.4463 220.132 cv
77.4503 220.14 77.4542 220.147 77.4581 220.155 cv
.741176 .721569 .709804 rgb
f
71.4698 230.853 mo
72.3506 228.581 72.9365 225.515 72.164 222.805 cv
71.2291 219.527 68.8472 215.774 64.3974 215.774 cv
64.069 215.774 63.7286 215.795 63.3774 215.837 cv
64.5053 215.36 65.7645 215.15 67.057 215.15 cv
71.3861 215.15 76.0851 217.512 77.4463 220.132 cv
77.4463 220.132 li
77.4504 220.14 77.4541 220.147 77.4581 220.155 cv
77.4588 220.156 77.4597 220.158 77.4604 220.159 cv
77.4635 220.165 77.467 220.172 77.4701 220.178 cv
77.4709 220.18 77.4715 220.181 77.4724 220.183 cv
77.4758 220.189 77.4793 220.196 77.4827 220.203 cv
77.4831 220.203 77.4833 220.204 77.4837 220.205 cv
77.7157 220.656 77.9186 221.09 78.0933 221.509 cv
78.0934 221.509 78.0938 221.51 78.0939 221.51 cv
78.0967 221.517 78.0992 221.523 78.1019 221.529 cv
78.1024 221.531 78.103 221.532 78.1035 221.533 cv
78.1058 221.539 78.1081 221.544 78.1104 221.55 cv
78.111 221.551 78.1121 221.554 78.1127 221.555 cv
78.1146 221.56 78.1169 221.565 78.1187 221.57 cv
78.1197 221.572 78.1205 221.574 78.1215 221.577 cv
78.1236 221.582 78.1251 221.585 78.1271 221.59 cv
78.1297 221.597 78.1322 221.603 78.1348 221.609 cv
78.1357 221.611 78.1368 221.614 78.1377 221.616 cv
78.1396 221.621 78.1415 221.625 78.1434 221.63 cv
78.1441 221.632 78.145 221.634 78.1457 221.636 cv
78.1477 221.641 78.1496 221.645 78.1516 221.65 cv
78.1521 221.651 78.153 221.654 78.1535 221.655 cv
78.1555 221.66 78.1579 221.666 78.1599 221.671 cv
78.1602 221.671 78.1605 221.672 78.1607 221.673 cv
80.5293 227.537 77.2741 230.171 71.4698 230.853 cv
.388235 .388235 .388235 rgb
f
62.3044 230.702 mo
62.2944 230.701 62.2844 230.7 62.2744 230.699 cv
61.4224 230.604 60.7074 230.4 60.1166 230.103 cv
60.1166 230.103 li
60.7074 230.4 61.4224 230.604 62.2744 230.699 cv
62.2843 230.7 62.2945 230.701 62.3044 230.702 cv
.466667 .466667 .466667 rgb
f
62.5855 230.73 mo
62.4914 230.72 62.3985 230.712 62.3044 230.702 cv
62.2945 230.701 62.2843 230.7 62.2744 230.699 cv
61.4224 230.604 60.7074 230.4 60.1166 230.103 cv
58.4501 229.268 57.7696 227.704 57.7709 225.837 cv
57.7725 223.607 58.7486 220.945 60.1811 218.58 cv
60.2207 218.521 li
60.9891 218.664 61.7355 219.118 62.3986 219.779 cv
62.1289 220.802 61.8128 222.034 61.6138 223.17 cv
61.2237 225.396 62.7802 229.039 62.7802 229.039 cv
62.7802 229.039 61.501 224.264 62.5366 222.004 cv
62.7781 221.478 62.9268 220.961 63.0129 220.48 cv
63.8534 221.571 64.4937 223 64.7681 224.484 cv
65.1577 226.595 64.1333 229.019 62.5855 230.73 cv
.52549 .52549 .52549 rgb
f
69.9126 217.889 mo
70.6206 219.234 73.522 224.443 72.4497 226.859 cv
72.2388 227.335 73.2998 224.213 70.877 222.142 cv
69.0884 220.613 69.7158 218.191 68.3491 218.24 cv
67.8989 218.254 68.3574 221.34 68.251 222.468 cv
67.9321 225.845 66.3481 228.406 66.0977 228.67 cv
65.8442 228.937 67.5518 223.175 67.1685 219.544 cv
66.8213 216.253 65.9619 215.941 65.9619 215.941 cv
65.9619 215.941 68.8872 215.941 69.9126 217.889 cv
cp
.639216 .639216 .639216 rgb
f
63.0129 220.48 mo
62.8181 220.227 62.6128 219.992 62.3986 219.779 cv
62.657 218.799 62.8727 218.01 62.9019 217.682 cv
62.9019 217.682 63.2961 218.895 63.0129 220.48 cv
.603922 .592157 .584314 rgb
f
62.7802 229.039 mo
62.7802 229.039 61.2237 225.396 61.6138 223.17 cv
61.8128 222.034 62.1289 220.802 62.3986 219.779 cv
62.6128 219.992 62.8181 220.227 63.0129 220.48 cv
62.9268 220.961 62.7781 221.478 62.5366 222.004 cv
61.501 224.264 62.7802 229.039 62.7802 229.039 cv
.666667 .65098 .647059 rgb
f
15.7971 204.836 mo
14.7772 204.836 14.7861 203.256 15.1367 202.085 cv
15.3562 201.352 15.9396 200.903 16.5242 200.903 cv
16.7624 200.903 17.0006 200.978 17.2148 201.138 cv
16.9068 202.313 16.6811 203.482 16.5212 204.638 cv
16.5172 204.64 16.5133 204.642 16.5093 204.644 cv
16.2302 204.777 15.9944 204.836 15.7971 204.836 cv
.556863 .556863 .556863 rgb
f
16.5212 204.638 mo
16.6811 203.482 16.9068 202.313 17.2148 201.138 cv
17.3964 201.273 17.5605 201.47 17.6923 201.736 cv
18.3603 203.078 18.2324 203.822 16.5212 204.638 cv
.517647 .517647 .517647 rgb
f
11.6589 210.822 mo
10.9901 210.822 10.237 209.905 9.81542 209.033 cv
9.32475 208.018 9.83379 206.924 10.8423 206.924 cv
11.0331 206.924 11.2417 206.963 11.4649 207.049 cv
12.8671 207.59 13.2734 208.226 12.5552 209.994 cv
12.3139 210.587 11.9971 210.822 11.6589 210.822 cv
.572549 .572549 .572549 rgb
f
4.42582 211.584 mo
4.0999 211.584 3.7691 211.165 3.59421 210.757 cv
3.37796 210.252 3.69769 209.668 4.23215 209.668 cv
4.31301 209.668 4.39872 209.681 4.4883 209.71 cv
5.17037 209.93 5.3511 210.233 4.92969 211.138 cv
4.78074 211.459 4.60399 211.584 4.42582 211.584 cv
.752941 .745098 .741176 rgb
f
6.2495 217.353 mo
5.99643 217.353 5.73956 217.028 5.60348 216.71 cv
5.4356 216.319 5.68379 215.865 6.09871 215.865 cv
6.16155 215.865 6.22821 215.875 6.29783 215.898 cv
6.82764 216.069 6.96782 216.304 6.64067 217.007 cv
6.52503 217.256 6.38781 217.353 6.2495 217.353 cv
f
11.2342 204.362 mo
11.066 204.362 10.8601 204.263 10.581 204.048 cv
9.96583 203.576 10.5718 203.199 11.0967 203.101 cv
11.1378 203.093 11.1786 203.09 11.2186 203.09 cv
11.6496 203.09 11.9975 203.517 11.7388 203.956 cv
11.5845 204.218 11.4368 204.362 11.2342 204.362 cv
f
7.93201 203.902 mo
7.42148 203.902 7.42593 203.111 7.60154 202.527 cv
7.71139 202.16 8.00332 201.935 8.29582 201.935 cv
8.5157 201.935 8.73588 202.062 8.87941 202.351 cv
9.21387 203.025 9.14894 203.396 8.28761 203.806 cv
8.14829 203.872 8.03052 203.902 7.93201 203.902 cv
.572549 .572549 .572549 rgb
f
303.115 221.591 mo
303.115 221.591 301.874 228.457 303.296 231.348 cv
304.717 234.24 325.463 234.041 341.465 233.695 cv
358.194 233.333 380.375 230.828 385.086 229.766 cv
388.948 228.897 383.965 218.015 376.913 217.989 cv
369.862 217.962 303.115 221.591 303.115 221.591 cv
.317647 .317647 .317647 rgb
f
312.207 185.025 mo
314.155 182.665 348.352 164.852 350.023 165.266 cv
353.911 166.227 380.768 194.759 382.726 199.428 cv
384.683 204.096 385.562 226.541 385.2 228.478 cv
384.839 230.414 309.549 232.095 305.451 231.626 cv
301.354 231.156 301.154 212.021 300.829 210.604 cv
300.505 209.187 309.085 188.804 312.207 185.025 cv
.737255 .686275 .568627 rgb
f
324.343 231.52 mo
332.076 231.371 341.255 231.138 350.115 230.845 cv
350.115 230.845 350.115 230.845 350.115 230.845 cv
341.255 231.139 332.074 231.371 324.343 231.52 cv
.47451 .447059 .396078 rgb
f
322.057 231.562 mo
326.285 231.471 344.245 230.995 350.116 230.835 cv
350.116 230.838 350.115 230.841 350.115 230.845 cv
341.255 231.138 332.076 231.371 324.343 231.52 cv
323.566 231.535 322.803 231.549 322.057 231.562 cv
339.862 228.87 mo
335 228.87 329.91 228.748 328.213 228.193 cv
324.795 227.076 322.168 223.572 321.79 216.038 cv
321.577 211.796 321.643 210.547 321.258 210.087 cv
320.982 209.76 320.476 209.835 319.474 209.508 cv
319.391 206.271 319.339 203.346 319.339 201.156 cv
319.338 199.146 319.383 197.754 319.488 197.306 cv
320.108 194.682 341.016 177.087 342.893 174.636 cv
342.893 174.636 li
345.095 174.971 352.128 198.514 350.99 200.311 cv
350.16 201.622 350.397 219.202 350.174 228.818 cv
350.174 228.818 350.174 228.818 350.174 228.818 cv
350.017 228.802 349.659 228.795 349.141 228.795 cv
348.249 228.795 346.883 228.814 345.264 228.833 cv
343.644 228.852 341.771 228.87 339.862 228.87 cv
.772549 .705882 .572549 rgb
f
358.533 196.205 mo
360.154 200.191 356.14 219.959 354.266 230.703 cv
370.732 230.113 385.043 229.32 385.2 228.478 cv
385.562 226.541 384.683 204.096 382.726 199.428 cv
380.777 194.784 354.196 166.531 350.095 165.293 cv
349.583 166.607 348.895 168.483 348.394 170.252 cv
347.494 173.423 356.337 190.804 358.533 196.205 cv
cp
.658824 .603922 .490196 rgb
f
309.45 231.705 mo
309.272 231.705 309.099 231.705 308.931 231.704 cv
308.935 231.704 308.94 231.704 308.944 231.704 cv
310.387 231.704 312.909 231.689 315.58 231.66 cv
313.174 231.69 311.097 231.705 309.45 231.705 cv
.811765 .756863 .647059 rgb
f
307.381 231.694 mo
306.407 231.682 305.745 231.659 305.451 231.626 cv
304.162 231.478 303.259 229.482 302.616 226.772 cv
302.616 226.772 li
303.259 229.482 304.162 231.478 305.451 231.626 cv
305.746 231.659 306.406 231.682 307.381 231.694 cv
.619608 .588235 .533333 rgb
f
312.207 185.025 mo
312.208 185.024 312.209 185.023 312.21 185.022 cv
312.209 185.023 312.208 185.024 312.207 185.025 cv
312.21 185.021 mo
312.211 185.02 312.212 185.019 312.213 185.018 cv
312.212 185.019 312.211 185.02 312.21 185.021 cv
312.213 185.018 mo
312.214 185.017 312.215 185.016 312.215 185.015 cv
312.215 185.016 312.214 185.017 312.213 185.018 cv
312.216 185.014 mo
312.466 184.72 313.196 184.196 314.29 183.502 cv
313.197 184.195 312.466 184.72 312.216 185.014 cv
.93421 .902376 .845075 rgb
f
307.913 231.7 mo
307.727 231.698 307.549 231.696 307.381 231.694 cv
306.406 231.682 305.746 231.659 305.451 231.626 cv
304.162 231.478 303.259 229.482 302.616 226.772 cv
301.216 220.869 301.052 211.575 300.829 210.604 cv
300.823 210.578 300.82 210.545 300.82 210.506 cv
300.821 208.436 309.143 188.734 312.207 185.025 cv
312.207 185.025 li
312.208 185.024 312.209 185.023 312.21 185.022 cv
312.21 185.021 312.21 185.021 312.21 185.021 cv
312.211 185.02 312.212 185.019 312.213 185.018 cv
312.213 185.018 312.213 185.018 312.213 185.018 cv
312.214 185.017 312.215 185.016 312.215 185.015 cv
312.216 185.015 312.216 185.015 312.216 185.014 cv
312.466 184.72 313.197 184.195 314.29 183.502 cv
320.372 179.645 337.666 170.567 345.778 166.872 cv
344.889 169.957 343.854 173.381 342.893 174.636 cv
342.893 174.636 li
341.016 177.087 320.108 194.682 319.488 197.306 cv
319.383 197.754 319.338 199.146 319.339 201.156 cv
319.339 203.346 319.391 206.271 319.474 209.508 cv
319.389 209.48 319.3 209.45 319.208 209.416 cv
318.154 209.027 316.878 208.942 315.552 208.942 cv
315.036 208.942 314.512 208.955 313.991 208.968 cv
313.469 208.981 312.95 208.994 312.444 208.994 cv
311.423 208.994 310.454 208.941 309.622 208.73 cv
309.054 208.585 308.53 208.449 308.047 208.333 cv
308.082 208.231 309.775 203.364 310.474 199.621 cv
311.18 195.837 313.878 186.988 313.878 186.988 cv
305.335 207.412 li
308.029 208.329 li
307.163 208.122 306.424 207.982 305.778 207.982 cv
305.068 207.982 304.471 208.151 303.94 208.583 cv
302.655 209.631 306.39 228.65 306.66 229.964 cv
306.957 231.404 306.501 231.677 307.913 231.7 cv
.811765 .756863 .647059 rgb
f
347.282 184.08 mo
347.282 184.08 351.183 194.551 351.595 198.109 cv
352.008 201.667 350.291 218.738 350.291 218.738 cv
350.291 218.738 349.444 204.746 348.397 198.205 cv
347.351 191.664 347.282 184.08 347.282 184.08 cv
cp
.827451 .772549 .658824 rgb
f
341.086 178.252 mo
341.086 178.252 338.592 183.389 336.218 186.65 cv
333.844 189.91 327.262 197.008 327.564 198.158 cv
327.868 199.308 328.378 206.446 328.415 207.067 cv
328.453 207.688 325.193 200.171 325.102 197.373 cv
325.011 194.574 330.981 190.239 334.609 185.812 cv
338.237 181.385 341.451 177.521 341.086 178.252 cv
cp
f
326.322 189.953 mo
326.322 189.953 336.746 180.485 338.531 178.844 cv
340.316 177.203 342.521 175.545 343.165 174.223 cv
343.81 172.901 345.677 167.222 345.677 167.222 cv
345.677 167.222 342.86 172.613 340.531 174.779 cv
338.202 176.946 326.322 189.953 326.322 189.953 cv
cp
.886275 .831373 .737255 rgb
f
308.885 231.704 mo
308.456 231.704 308.128 231.703 307.926 231.7 cv
307.923 231.7 307.919 231.7 307.916 231.7 cv
308.216 231.702 308.54 231.704 308.885 231.704 cv
.533333 .498039 .427451 rgb
f
308.931 231.704 mo
308.916 231.704 308.9 231.704 308.885 231.704 cv
308.54 231.704 308.216 231.702 307.916 231.7 cv
307.915 231.7 307.914 231.7 307.913 231.7 cv
308.227 231.702 308.567 231.704 308.931 231.704 cv
.686274 .635294 .517647 rgb
f
315.812 231.658 mo
317.703 231.635 319.793 231.603 322.03 231.563 cv
322.028 231.563 322.027 231.563 322.026 231.563 cv
320.195 231.602 317.964 231.634 315.812 231.658 cv
.533333 .498039 .427451 rgb
f
315.58 231.66 mo
317.024 231.643 318.586 231.62 320.244 231.593 cv
320.009 225.956 319.663 216.913 319.474 209.508 cv
319.474 209.508 li
319.663 216.913 320.009 225.956 320.244 231.593 cv
320.837 231.584 321.441 231.573 322.057 231.562 cv
322.048 231.562 322.039 231.563 322.03 231.563 cv
319.793 231.603 317.703 231.635 315.812 231.658 cv
315.734 231.659 315.657 231.66 315.58 231.66 cv
350.116 230.835 mo
350.138 230.214 350.157 229.538 350.174 228.818 cv
351.555 228.963 352.937 230.749 351.95 230.783 cv
351.803 230.788 351.145 230.806 350.116 230.835 cv
.686274 .635294 .517647 rgb
f
320.244 231.593 mo
320.009 225.956 319.663 216.913 319.474 209.508 cv
320.476 209.835 320.982 209.76 321.258 210.087 cv
321.643 210.547 321.577 211.796 321.79 216.038 cv
322.168 223.572 324.795 227.076 328.213 228.193 cv
329.91 228.748 335 228.87 339.862 228.87 cv
341.771 228.87 343.644 228.852 345.264 228.833 cv
346.883 228.814 348.249 228.795 349.141 228.795 cv
349.659 228.795 350.017 228.802 350.174 228.818 cv
350.174 228.818 350.174 228.818 350.174 228.818 cv
350.157 229.538 350.138 230.214 350.116 230.835 cv
344.245 230.995 326.285 231.471 322.057 231.562 cv
321.441 231.573 320.837 231.584 320.244 231.593 cv
.701961 .643137 .521569 rgb
f
308.944 231.704 mo
308.94 231.704 308.935 231.704 308.931 231.704 cv
308.567 231.704 308.227 231.702 307.913 231.7 cv
306.501 231.677 306.957 231.404 306.66 229.964 cv
306.39 228.65 302.655 209.631 303.94 208.583 cv
304.471 208.151 305.068 207.982 305.778 207.982 cv
306.424 207.982 307.163 208.122 308.029 208.329 cv
308.046 208.334 li
308.046 208.334 308.046 208.334 308.047 208.333 cv
308.53 208.449 309.054 208.585 309.622 208.73 cv
310.454 208.941 311.423 208.994 312.444 208.994 cv
312.95 208.994 313.469 208.981 313.991 208.968 cv
314.512 208.955 315.036 208.942 315.552 208.942 cv
316.878 208.942 318.154 209.027 319.208 209.416 cv
319.3 209.45 319.389 209.48 319.474 209.508 cv
319.663 216.913 320.009 225.956 320.244 231.593 cv
318.586 231.62 317.024 231.643 315.58 231.66 cv
312.909 231.689 310.387 231.704 308.944 231.704 cv
.713725 .658823 .54902 rgb
f
326.119 214.218 mo
327.098 216.75 329.098 221.576 330.174 223.906 cv
331.25 226.237 334.007 228.349 336.885 228.853 cv
337.776 229.008 330.21 228.946 328.213 228.193 cv
325.629 227.22 322.633 226.859 321.959 218.083 cv
321.285 209.31 321.258 210.087 321.258 210.087 cv
321.258 210.087 324.803 210.812 326.119 214.218 cv
cp
.576471 .521569 .439216 rgb
f
348.771 172.396 mo
349.045 171.894 350.627 175.463 354.729 179.686 cv
360.078 185.192 368.412 192.102 370.471 195.525 cv
374.109 201.572 369.689 222.217 366.584 224.976 cv
363.479 227.736 354.337 230.275 354.438 229.713 cv
354.539 229.151 359.285 201.97 358.708 197.292 cv
358.143 192.708 347.637 174.469 348.771 172.396 cv
cp
f
355.17 229.482 mo
356.912 229.301 366.266 228.548 368.562 225.675 cv
372.946 220.186 372.871 203.326 373.919 203.263 cv
374.967 203.2 379.405 207.021 380.852 211.609 cv
382.298 216.196 386.364 227.826 385.2 228.478 cv
383.902 229.204 379.05 229.49 372.712 229.878 cv
360.816 230.61 344.719 230.98 343.114 231.023 cv
341.695 231.06 336 231.21 336 231.21 cv
336 231.21 342.149 228.958 342.983 228.856 cv
348.314 228.208 355.17 229.482 355.17 229.482 cv
cp
f
319.357 211.238 mo
320.242 213.638 320.078 225.101 321.472 226.886 cv
322.865 228.672 326.277 229.05 326.277 229.05 cv
326.277 229.05 326.411 229.321 324.793 229.63 cv
323.176 229.939 322.074 229.116 321.184 229.848 cv
320.293 230.582 320.244 231.593 320.244 231.593 cv
319.518 231.804 314.093 231.927 310.178 231.443 cv
307.929 231.165 305.276 227.166 304.572 225.455 cv
303.869 223.744 304.185 219.038 304.185 219.038 cv
304.185 219.038 304.5 224.524 306.613 226.617 cv
308.727 228.709 310.299 229.281 312.661 228.203 cv
315.023 227.125 312.785 222.386 312.785 222.386 cv
312.785 222.386 315.007 226.33 316.497 225.785 cv
319.819 224.572 319.357 211.238 319.357 211.238 cv
cp
f
344.31 219.96 mo
344.31 219.96 344.789 227.876 348.351 228.798 cv
351.912 229.72 354.276 230.162 354.276 230.162 cv
343.177 230.207 li
343.177 230.207 344.477 229.352 344.042 226.574 cv
343.606 223.794 344.31 219.96 344.31 219.96 cv
cp
f
353.355 170.498 mo
353.355 170.498 358.647 176.862 358.921 179.433 cv
359.195 182.003 358.91 188.474 358.91 188.474 cv
363.396 192.363 li
363.396 192.363 361.784 181.09 360.349 178.255 cv
358.912 175.42 353.355 170.498 353.355 170.498 cv
cp
f
308.047 208.333 mo
308.04 208.331 308.035 208.33 308.029 208.329 cv
305.335 207.412 li
313.878 186.988 li
313.878 186.988 311.18 195.837 310.474 199.621 cv
309.775 203.364 308.082 208.231 308.047 208.333 cv
.713725 .658823 .54902 rgb
f
308.046 208.334 mo
308.029 208.329 li
308.035 208.33 308.04 208.331 308.047 208.333 cv
308.046 208.334 308.046 208.334 308.046 208.334 cv
.678431 .623529 .513725 rgb
f
319.331 181.828 mo
318.646 182.102 313.237 185.596 312.737 186.169 cv
310.843 188.339 304.055 206.203 303.915 207.769 cv
303.776 209.335 305.242 209.091 307.435 209.271 cv
309.627 209.45 317.307 208.908 317.307 208.908 cv
317.307 208.908 306.067 208.574 306.08 207.483 cv
306.092 206.391 313.25 188.195 313.878 186.988 cv
314.506 185.781 319.331 181.828 319.331 181.828 cv
cp
.886275 .831373 .737255 rgb
f
341.086 178.252 mo
340.055 180.271 334.717 194.984 334.222 195.007 cv
333.727 195.029 336.958 184.08 336.958 184.08 cv
341.086 178.252 li
cp
.827451 .772549 .658824 rgb
f
148.554 202.132 mo
148.554 202.132 141.942 204.511 142.933 208.387 cv
143.924 212.263 145.73 216.082 152.145 217.222 cv
158.443 218.343 161.822 217.222 161.822 217.222 cv
161.822 217.222 160.733 219.277 161.822 222.855 cv
162.911 226.433 165.867 233.34 193.319 233.354 cv
216.223 233.366 220.446 232.093 226.459 228.611 cv
230.932 226.019 233.766 219.65 228.668 215.341 cv
223.571 211.035 151.928 200.23 148.554 202.132 cv
.129412 .129412 .129412 rgb
f
247.582 217.703 mo
247.582 217.703 232.342 215.246 235.099 221.552 cv
237.349 226.697 244.02 228.001 251.665 227.203 cv
258.314 226.506 262.922 219.228 259.501 217.542 cv
256.078 215.856 247.582 217.703 247.582 217.703 cv
f
153.367 189.949 mo
141.189 193.992 139.898 207.208 145.357 212.249 cv
150.816 217.291 167.42 218.715 172.354 206.82 cv
177.289 194.925 161.552 187.231 153.367 189.949 cv
.478431 .301961 .239216 rgb
f
146.017 204.497 mo
144.758 204.497 143.473 204.35 142.282 204.079 cv
142.358 200.001 144.246 195.558 148.363 192.509 cv
151.36 193.14 153.646 194.851 153.555 199.722 cv
153.492 203.123 149.868 204.497 146.017 204.497 cv
.545098 .360784 .298039 rgb
f
144.867 210.917 mo
144.63 210.917 144.402 210.906 144.182 210.884 cv
143.471 209.865 142.948 208.667 142.633 207.361 cv
143.396 207.581 144.25 207.728 145.179 207.728 cv
145.867 207.728 146.595 207.647 147.357 207.457 cv
152.334 206.212 155.601 203.763 155.601 203.763 cv
155.601 203.763 153.423 209.349 146.579 210.736 cv
145.96 210.862 145.392 210.917 144.867 210.917 cv
f
157.056 215.972 mo
156.226 215.972 155.402 215.926 154.596 215.838 cv
154.912 215.035 156.024 213.447 156.378 212.636 cv
158.517 207.737 158.47 204.658 158.361 198.503 cv
158.299 194.979 156.541 191.814 154.932 189.57 cv
155.611 189.458 156.324 189.404 157.057 189.404 cv
160.586 189.404 164.604 190.665 167.76 192.891 cv
167.759 192.892 167.759 192.891 167.758 192.892 cv
164.686 190.727 160.798 189.475 157.338 189.411 cv
160.145 191.44 163.089 194.315 164.16 197.927 cv
161.58 202.992 159.181 210.27 158.916 215.894 cv
158.295 215.947 157.674 215.972 157.056 215.972 cv
156.886 214.463 mo
156.35 214.463 156.295 215.105 156.616 215.267 cv
156.72 215.32 156.813 215.342 156.893 215.342 cv
157.384 215.342 157.409 214.488 156.92 214.463 cv
156.909 214.463 156.897 214.463 156.886 214.463 cv
159.518 195.696 mo
158.982 195.696 158.928 196.338 159.248 196.499 cv
159.353 196.552 159.445 196.575 159.526 196.575 cv
160.016 196.575 160.041 195.721 159.553 195.697 cv
159.541 195.696 159.529 195.696 159.518 195.696 cv
.396078 .247059 .196078 rgb
f
164.16 197.927 mo
163.089 194.315 160.145 191.44 157.338 189.411 cv
160.798 189.475 164.686 190.727 167.758 192.892 cv
166.536 194.101 165.48 195.481 164.626 197.04 cv
164.625 197.041 164.624 197.042 164.624 197.043 cv
164.618 197.055 164.611 197.067 164.605 197.078 cv
164.604 197.079 164.604 197.08 164.604 197.081 cv
164.598 197.091 164.591 197.103 164.586 197.114 cv
164.585 197.115 164.584 197.116 164.584 197.117 cv
164.577 197.129 164.572 197.139 164.566 197.151 cv
164.564 197.153 164.563 197.155 164.562 197.157 cv
164.556 197.168 164.55 197.18 164.544 197.191 cv
164.415 197.431 164.287 197.676 164.16 197.927 cv
.341176 .2 .14902 rgb
f
177.712 191.123 mo
180.484 185.579 197.149 159.277 214.57 165.188 cv
231.99 171.098 231.659 203.439 222.638 214.949 cv
215.171 224.476 162.158 222.231 177.712 191.123 cv
.380392 .215686 .156863 rgb
f
206.62 215.977 mo
205.774 217.384 204.792 218.691 203.71 219.91 cv
212.294 220.064 220.099 218.188 222.638 214.949 cv
231.659 203.439 231.99 171.098 214.57 165.188 cv
213.77 164.916 212.974 164.734 212.178 164.594 cv
214.514 167.497 217.468 172.031 217.66 176.698 cv
218.376 194.027 215.333 201.477 206.62 215.977 cv
.278431 .14902 .109804 rgb
f
208.64 195.88 mo
212.839 187.436 214.655 177.593 206.62 172.927 cv
199.456 168.766 187.019 178.035 183.753 189.402 cv
180.487 200.769 202.16 208.91 208.64 195.88 cv
.470588 .270588 .207843 rgb
f
211.595 171.527 mo
211.595 171.527 210.766 168.08 202.18 166.141 cv
202.021 166.104 201.851 166.076 201.683 166.045 cv
198.732 167.324 195.918 169.221 193.319 171.426 cv
196.28 170.143 199.474 169.034 201.984 168.85 cv
208.419 168.378 211.595 171.527 211.595 171.527 cv
cp
f
202.074 183.175 mo
201.531 182.902 201.637 181.795 202.58 181.842 cv
203.523 181.89 203.313 183.8 202.074 183.175 cv
.380392 .215686 .156863 rgb
f
207.983 177.381 mo
207.508 177.141 207.601 176.172 208.427 176.213 cv
209.254 176.254 209.069 177.929 207.983 177.381 cv
cp
f
148.841 198.654 mo
148.366 198.414 148.458 197.445 149.285 197.486 cv
150.112 197.527 149.927 199.203 148.841 198.654 cv
cp
f
155.888 194.804 mo
155.412 194.564 155.505 193.595 156.332 193.636 cv
157.158 193.677 156.974 195.352 155.888 194.804 cv
cp
f
155.523 201.974 mo
154.842 201.631 154.974 200.244 156.158 200.303 cv
157.341 200.363 157.077 202.759 155.523 201.974 cv
cp
f
159.526 196.575 mo
159.445 196.575 159.353 196.552 159.248 196.499 cv
158.928 196.338 158.982 195.696 159.518 195.696 cv
159.529 195.696 159.541 195.696 159.553 195.697 cv
160.041 195.721 160.016 196.575 159.526 196.575 cv
.294118 .176471 .141176 rgb
f
153.477 211.796 mo
153.397 211.796 153.304 211.773 153.199 211.72 cv
152.879 211.56 152.934 210.917 153.47 210.917 cv
153.481 210.917 153.493 210.917 153.504 210.917 cv
153.993 210.942 153.968 211.796 153.477 211.796 cv
.345098 .211765 .168627 rgb
f
152.62 214.463 mo
152.54 214.463 152.448 214.44 152.343 214.387 cv
152.023 214.225 152.077 213.583 152.614 213.583 cv
152.625 213.583 152.636 213.583 152.648 213.584 cv
153.137 213.609 153.111 214.463 152.62 214.463 cv
.545098 .360784 .298039 rgb
f
146.307 206.347 mo
146.227 206.347 146.134 206.324 146.029 206.271 cv
145.709 206.11 145.764 205.467 146.3 205.467 cv
146.311 205.467 146.323 205.468 146.334 205.468 cv
146.823 205.493 146.798 206.347 146.307 206.347 cv
f
155.159 198.942 mo
155.078 198.942 154.986 198.92 154.881 198.867 cv
154.56 198.706 154.615 198.063 155.152 198.063 cv
155.163 198.063 155.174 198.063 155.186 198.064 cv
155.674 198.089 155.649 198.942 155.159 198.942 cv
f
156.893 215.342 mo
156.813 215.342 156.72 215.32 156.616 215.267 cv
156.295 215.105 156.35 214.463 156.886 214.463 cv
156.897 214.463 156.909 214.463 156.92 214.463 cv
157.409 214.488 157.384 215.342 156.893 215.342 cv
.294118 .176471 .141176 rgb
f
149.847 211.796 mo
149.767 211.796 149.674 211.773 149.569 211.72 cv
149.249 211.56 149.303 210.917 149.839 210.917 cv
149.851 210.917 149.862 210.917 149.874 210.917 cv
150.363 210.942 150.337 211.796 149.847 211.796 cv
.345098 .211765 .168627 rgb
f
207.556 184.753 mo
206.576 184.259 206.767 182.263 208.469 182.348 cv
210.172 182.433 209.792 185.882 207.556 184.753 cv
.380392 .215686 .156863 rgb
f
198.457 176.55 mo
197.882 176.26 197.993 175.089 198.993 175.139 cv
199.992 175.189 199.77 177.212 198.457 176.55 cv
cp
.533333 .356863 .282353 rgb
f
189.045 184.574 mo
188.728 184.414 188.79 183.766 189.342 183.793 cv
189.894 183.821 189.77 184.939 189.045 184.574 cv
f
216.743 193.1 mo
214.896 192.099 212.947 191.187 210.922 190.372 cv
211.877 187.441 212.386 184.51 212.168 181.827 cv
214.009 182.493 215.837 183.348 217.703 184.432 cv
217.582 187.601 217.269 190.432 216.743 193.1 cv
180.298 186.71 mo
181.173 185.352 182.223 183.818 183.423 182.206 cv
184.86 181.586 186.517 180.998 188.375 180.547 cv
187.051 182.233 185.898 184.091 184.997 186.058 cv
183.385 186.186 181.815 186.402 180.298 186.71 cv
.282353 .156863 .117647 rgb
f
227.752 202.549 mo
226.938 201.034 225.965 199.705 224.827 198.688 cv
222.516 196.621 219.772 194.742 216.743 193.1 cv
217.269 190.432 217.582 187.601 217.703 184.432 cv
219.235 185.323 220.792 186.368 222.404 187.593 cv
224.715 189.347 226.796 192.318 228.668 195.083 cv
228.545 197.643 228.234 200.162 227.752 202.549 cv
.215686 .113725 .0862745 rgb
f
210.922 190.372 mo
203.907 187.551 196.027 185.915 188.678 185.915 cv
187.434 185.915 186.204 185.962 184.997 186.058 cv
185.898 184.091 187.051 182.233 188.375 180.547 cv
190.339 180.069 192.527 179.744 194.912 179.693 cv
195.727 179.675 196.522 179.666 197.3 179.666 cv
202.883 179.666 207.568 180.161 212.168 181.827 cv
212.386 184.51 211.877 187.441 210.922 190.372 cv
208.365 182.345 mo
206.759 182.345 206.597 184.27 207.556 184.753 cv
207.87 184.912 208.147 184.98 208.387 184.98 cv
209.857 184.98 209.933 182.421 208.469 182.348 cv
208.433 182.346 208.399 182.345 208.365 182.345 cv
189.308 183.793 mo
188.787 183.793 188.735 184.417 189.045 184.574 cv
189.147 184.625 189.237 184.647 189.315 184.647 cv
189.792 184.647 189.816 183.817 189.342 183.793 cv
189.33 183.793 189.319 183.793 189.308 183.793 cv
202.523 181.841 mo
201.633 181.841 201.542 182.908 202.074 183.175 cv
202.248 183.263 202.402 183.301 202.535 183.301 cv
203.35 183.301 203.391 181.883 202.58 181.842 cv
202.561 181.841 202.541 181.841 202.523 181.841 cv
.341176 .192157 .14902 rgb
f
202.535 183.301 mo
202.402 183.301 202.248 183.263 202.074 183.175 cv
201.542 182.908 201.633 181.841 202.523 181.841 cv
202.541 181.841 202.561 181.841 202.58 181.842 cv
203.391 181.883 203.35 183.301 202.535 183.301 cv
.282353 .156863 .117647 rgb
f
208.387 184.98 mo
208.147 184.98 207.87 184.912 207.556 184.753 cv
206.597 184.27 206.759 182.345 208.365 182.345 cv
208.399 182.345 208.433 182.346 208.469 182.348 cv
209.933 182.421 209.857 184.98 208.387 184.98 cv
f
189.315 184.647 mo
189.237 184.647 189.147 184.625 189.045 184.574 cv
188.735 184.417 188.787 183.793 189.308 183.793 cv
189.319 183.793 189.33 183.793 189.342 183.793 cv
189.816 183.817 189.792 184.647 189.315 184.647 cv
.380392 .247059 .196078 rgb
f
252.159 203.718 mo
240.93 203.313 233.35 213.244 234.958 218.77 cv
236.566 224.296 248.41 230.26 258.085 222.425 cv
267.761 214.59 259.706 203.991 252.159 203.718 cv
.380392 .215686 .156863 rgb
f
180.409 230.554 mo
168.063 229.873 162.116 224.876 160.34 222.576 cv
156.727 217.896 160.535 204.669 164.544 197.191 cv
174.074 179.412 209.267 184.767 224.827 198.688 cv
231.216 204.403 232.436 219.921 229.205 223.222 cv
221.723 230.867 214.238 232.421 180.409 230.554 cv
.533333 .356863 .282353 rgb
f
214.005 201.925 mo
216.339 213.523 211.905 218.271 208.406 223.83 cv
207.066 225.957 203.537 228.705 199.392 231.261 cv
217.569 231.423 223.392 229.162 229.205 223.222 cv
232.437 219.921 231.216 204.402 224.827 198.687 cv
219.154 193.613 210.869 189.685 202.172 187.593 cv
207.261 190.994 212.803 195.947 214.005 201.925 cv
cp
.458824 .278431 .215686 rgb
f
164.562 197.157 mo
164.563 197.155 164.564 197.153 164.566 197.151 cv
164.564 197.153 164.563 197.155 164.562 197.157 cv
164.584 197.117 mo
164.584 197.116 164.585 197.115 164.586 197.114 cv
164.585 197.115 164.584 197.116 164.584 197.117 cv
164.604 197.081 mo
164.604 197.08 164.604 197.079 164.605 197.078 cv
164.604 197.079 164.604 197.08 164.604 197.081 cv
164.624 197.043 mo
164.624 197.042 164.625 197.041 164.626 197.04 cv
164.624 197.043 li
.521569 .34902 .294118 rgb
f
181.105 212.636 mo
178.476 212.636 175.789 212.013 173.292 210.607 cv
168.668 208.002 164.852 203.597 163.614 199.05 cv
163.921 198.404 164.231 197.775 164.544 197.191 cv
164.55 197.18 164.556 197.169 164.562 197.157 cv
164.563 197.155 164.564 197.153 164.566 197.151 cv
164.572 197.14 164.578 197.128 164.584 197.117 cv
164.584 197.116 164.585 197.115 164.586 197.114 cv
164.592 197.102 164.597 197.092 164.604 197.081 cv
164.604 197.08 164.604 197.079 164.605 197.078 cv
164.611 197.067 164.618 197.055 164.624 197.043 cv
164.626 197.04 li
168.071 190.756 174.762 187.413 182.639 186.328 cv
189.2 188.78 196.359 193.8 196.507 199.722 cv
196.683 206.785 189.165 212.636 181.105 212.636 cv
.615686 .423529 .356863 rgb
f
182.327 221.127 mo
174.448 221.127 165.486 218.733 159.275 212.611 cv
159.659 210.244 160.309 207.739 161.111 205.316 cv
162.19 207.259 163.972 209.352 166.877 211.357 cv
172.708 215.38 180.072 217.41 186.015 217.41 cv
189.821 217.41 193.046 216.577 194.912 214.902 cv
200.818 209.6 199.773 199.722 199.773 199.722 cv
199.773 199.722 204.745 214.278 194.327 218.916 cv
191.219 220.3 186.961 221.128 182.327 221.127 cv
.494118 .317647 .247059 rgb
f
196.51 221.129 mo
196.51 221.129 202.881 215.289 203.739 210.607 cv
205.005 203.706 203.97 199.339 200.007 193.629 cv
197.111 189.459 192.914 187.151 189.826 185.935 cv
191.892 185.982 193.991 186.158 196.098 186.447 cv
198.237 187.968 200.334 189.607 201.803 191.101 cv
206.193 195.566 207.239 203.957 206.306 209.855 cv
205.373 215.753 196.51 221.129 196.51 221.129 cv
.615686 .427451 .360784 rgb
f
179.521 210.814 mo
178.626 210.363 178.8 208.539 180.355 208.617 cv
181.911 208.695 181.564 211.845 179.521 210.814 cv
cp
.533333 .356863 .282353 rgb
f
185.451 205.539 mo
183.857 204.734 184.167 201.485 186.938 201.624 cv
189.709 201.762 189.091 207.375 185.451 205.539 cv
cp
f
213.89 196.943 mo
212.805 196.395 213.016 194.183 214.902 194.277 cv
216.789 194.372 216.368 198.193 213.89 196.943 cv
cp
.380392 .215686 .156863 rgb
f
218.695 203.893 mo
218.152 203.619 218.258 202.513 219.201 202.56 cv
220.145 202.607 219.934 204.518 218.695 203.893 cv
cp
f
219.405 200.326 mo
218.863 200.052 218.969 198.947 219.912 198.994 cv
220.854 199.041 220.645 200.952 219.405 200.326 cv
cp
f
214.779 219.996 mo
214.236 219.721 214.342 218.615 215.285 218.662 cv
216.229 218.709 216.019 220.621 214.779 219.996 cv
cp
f
211.65 224.206 mo
211.225 223.99 211.307 223.122 212.048 223.159 cv
212.789 223.196 212.624 224.697 211.65 224.206 cv
cp
f
218.066 211.832 mo
217.64 211.617 217.723 210.748 218.464 210.785 cv
219.205 210.822 219.039 212.322 218.066 211.832 cv
cp
.533333 .356863 .282353 rgb
f
217.761 218.66 mo
216.901 218.226 217.068 216.474 218.563 216.548 cv
220.057 216.624 219.724 219.65 217.761 218.66 cv
cp
f
214.947 225.63 mo
214.518 225.414 214.601 224.539 215.348 224.576 cv
216.095 224.613 215.929 226.126 214.947 225.63 cv
cp
f
225.593 222.608 mo
225.163 222.391 225.247 221.515 225.994 221.552 cv
226.741 221.589 226.574 223.103 225.593 222.608 cv
cp
f
185.015 210.535 mo
184.142 210.093 184.312 208.314 185.83 208.39 cv
187.348 208.466 187.009 211.541 185.015 210.535 cv
cp
f
185.015 193.101 mo
184.142 192.66 184.312 190.88 185.83 190.957 cv
187.348 191.033 187.009 194.107 185.015 193.101 cv
cp
.458824 .278431 .215686 rgb
f
179.844 191.725 mo
179.408 191.505 179.493 190.615 180.251 190.653 cv
181.01 190.691 180.841 192.228 179.844 191.725 cv
cp
f
167.212 199.649 mo
166.592 199.335 166.712 198.072 167.791 198.126 cv
168.868 198.18 168.628 200.363 167.212 199.649 cv
cp
f
168.836 204.223 mo
168.216 203.91 168.337 202.646 169.415 202.701 cv
170.493 202.753 170.252 204.937 168.836 204.223 cv
cp
f
163.177 220.082 mo
162.557 219.769 162.677 218.504 163.755 218.558 cv
164.833 218.613 164.593 220.796 163.177 220.082 cv
cp
f
167.285 225.107 mo
166.767 224.845 166.868 223.791 167.767 223.835 cv
168.667 223.88 168.466 225.703 167.285 225.107 cv
cp
f
175.183 223.402 mo
174.665 223.14 174.766 222.085 175.665 222.13 cv
176.565 222.175 176.364 223.998 175.183 223.402 cv
cp
f
172.928 227.779 mo
172.41 227.517 172.511 226.462 173.41 226.507 cv
174.31 226.552 174.109 228.375 172.928 227.779 cv
cp
f
gsave
241.362 215.881 mo
239.387 215.881 237.211 215.093 235.544 213.66 cv
236.915 210.453 239.985 207.15 244.183 205.269 cv
245.879 206.74 246.953 208.877 246.436 211.929 cv
245.972 214.657 243.823 215.882 241.362 215.881 cv
clp
235.544 205.269 mo
246.953 205.269 li
246.953 215.882 li
235.544 215.882 li
cp
.443137 .270588 .211765 rgb
f
grestore
234.994 218.889 mo
234.982 218.849 234.969 218.81 234.958 218.77 cv
234.958 218.77 li
234.958 218.77 li
234.969 218.809 234.982 218.849 234.994 218.889 cv
234.953 218.754 mo
234.953 218.751 234.952 218.749 234.951 218.746 cv
234.952 218.749 234.953 218.751 234.953 218.754 cv
234.949 218.737 mo
234.948 218.735 234.948 218.734 234.947 218.732 cv
234.948 218.733 234.948 218.735 234.949 218.737 cv
234.944 218.72 mo
234.943 218.719 234.943 218.718 234.943 218.717 cv
234.943 218.718 234.943 218.719 234.944 218.72 cv
.656378 .540115 .498777 rgb
f
239.943 221.13 mo
239.844 221.13 239.744 221.129 239.642 221.127 cv
238.016 221.095 236.742 220.831 235.743 220.432 cv
235.413 219.922 235.158 219.404 234.994 218.889 cv
234.982 218.849 234.969 218.809 234.958 218.77 cv
234.958 218.77 li
234.956 218.765 234.955 218.759 234.953 218.754 cv
234.953 218.751 234.952 218.749 234.951 218.746 cv
234.95 218.743 234.949 218.74 234.949 218.737 cv
234.948 218.735 234.948 218.733 234.947 218.732 cv
234.946 218.728 234.945 218.724 234.944 218.72 cv
234.943 218.719 234.943 218.718 234.943 218.717 cv
234.745 218.007 234.7 217.223 234.79 216.402 cv
235.914 217.443 237.778 218.661 240.36 218.661 cv
240.363 218.661 240.366 218.661 240.369 218.661 cv
244.88 218.656 246.566 216.546 246.566 216.546 cv
246.566 216.546 246.688 221.131 239.943 221.13 cv
.443137 .270588 .211765 rgb
f
257.08 223.185 mo
257.417 222.948 257.753 222.695 258.085 222.425 cv
259.143 221.569 259.989 220.679 260.647 219.773 cv
260.647 219.773 li
259.989 220.679 259.143 221.569 258.085 222.425 cv
257.752 222.695 257.417 222.948 257.08 223.185 cv
.235294 .145098 .113725 rgb
f
247.803 226.187 mo
247.015 226.187 246.241 226.128 245.488 226.019 cv
247.391 225.216 249.308 224.162 250.468 222.855 cv
253.42 219.527 255.301 215.856 254.368 209.818 cv
253.879 206.654 251.764 204.822 249.857 203.785 cv
250.409 203.735 250.969 203.707 251.54 203.707 cv
251.745 203.707 251.951 203.711 252.159 203.718 cv
257.23 203.901 262.53 208.746 262.527 214.282 cv
262.526 216.085 261.963 217.961 260.647 219.773 cv
259.989 220.679 259.143 221.569 258.085 222.425 cv
257.753 222.695 257.417 222.948 257.08 223.185 cv
254.031 225.33 250.815 226.187 247.803 226.187 cv
.305882 .168627 .121569 rgb
f
239.79 212.986 mo
239.36 212.769 239.444 211.894 240.191 211.931 cv
240.938 211.968 240.771 213.482 239.79 212.986 cv
cp
.533333 .356863 .282353 rgb
f
244.815 209.071 mo
244.385 208.854 244.469 207.978 245.216 208.015 cv
245.963 208.052 245.797 209.566 244.815 209.071 cv
cp
f
242.014 217.488 mo
241.776 217.368 241.822 216.884 242.234 216.904 cv
242.647 216.925 242.556 217.761 242.014 217.488 cv
cp
f
248.047 221.88 mo
247.969 221.88 247.878 221.858 247.775 221.806 cv
247.462 221.649 247.515 221.021 248.039 221.021 cv
248.05 221.021 248.061 221.021 248.073 221.022 cv
248.551 221.045 248.526 221.88 248.047 221.88 cv
.305882 .168627 .121569 rgb
f
244.227 223.63 mo
244.098 223.63 243.95 223.594 243.782 223.509 cv
243.27 223.249 243.357 222.221 244.215 222.221 cv
244.233 222.221 244.252 222.221 244.271 222.222 cv
245.054 222.262 245.013 223.63 244.227 223.63 cv
f
251.054 218.407 mo
250.926 218.407 250.777 218.37 250.609 218.286 cv
250.096 218.027 250.184 216.998 251.041 216.998 cv
251.06 216.998 251.079 216.999 251.098 217 cv
251.881 217.038 251.841 218.407 251.054 218.407 cv
f
14.4048 336.301 mo
10.2617 338.35 8.97026 341.915 9.24565 345.478 cv
9.59277 349.965 18.9423 352.918 52.9268 352.696 cv
86.9112 352.472 91.8135 348.824 93.2822 346.154 cv
94.751 343.486 94.8584 333.046 90.1338 330.681 cv
85.4087 328.316 14.4048 336.301 14.4048 336.301 cv
.129412 .129412 .129412 rgb
f
91.5668 345.519 mo
94.374 341.575 95.3823 322.828 92.7295 307.209 cv
90.0771 291.592 89.332 288.595 81.7627 288.159 cv
74.1934 287.722 13.2895 316.97 10.3183 327.445 cv
7.34672 337.918 8.34181 346.564 13.0601 347.708 cv
30.6831 351.979 86.3408 352.86 91.5668 345.519 cv
.737255 .631373 .568627 rgb
f
69.6982 320.213 mo
71.315 328.58 69.5933 326.496 71.7935 334.051 cv
73.1069 338.561 74.9843 345.28 76.2851 349.965 cv
84.21 349.104 90.0405 347.662 91.5668 345.519 cv
94.374 341.575 95.3823 322.828 92.7295 307.209 cv
90.248 292.598 89.435 289.035 83.1421 288.279 cv
77.8428 299.372 68.3882 313.433 69.6982 320.213 cv
.639216 .52549 .482353 rgb
f
35.3789 323.567 mo
44.5274 318.209 66.438 314.082 67.2207 311.114 cv
67.8066 308.892 76.5762 295.031 80.9512 288.199 cv
70.6401 289.436 13.2022 317.281 10.3183 327.445 cv
9.86475 329.042 9.51518 330.589 9.24565 332.082 cv
17.2822 333.124 27.5308 328.163 35.3789 323.567 cv
.8 .705882 .67451 rgb
f
20.1396 339.288 mo
19.0772 339.288 18.0621 339.205 17.1592 339.052 cv
11.8945 338.161 10.6196 334.228 11.9341 332.497 cv
12.0278 332.373 12.3375 332.275 12.8143 332.179 cv
14.4718 332.074 16.1881 331.779 17.9283 331.339 cv
19.5504 331.017 21.3317 330.564 23.0464 329.876 cv
29.4477 327.31 35.9654 323.054 39.9126 321.376 cv
39.9703 321.352 40.0284 321.327 40.0873 321.303 cv
42.2021 320.432 44.5531 319.599 46.9632 318.802 cv
54.2121 316.421 62.9856 314.105 65.1426 314.105 cv
65.2379 314.105 65.3208 314.109 65.3896 314.119 cv
67.5952 314.415 68.8125 321.796 67.9444 324.227 cv
67.0757 326.659 61.1045 327.015 56.3457 327.162 cv
55.1869 327.197 54.369 327.265 53.657 327.265 cv
52.1212 327.265 51.078 326.948 48.1699 325.305 cv
47.6151 324.992 46.6451 324.864 45.5217 324.864 cv
43.5882 324.864 41.2006 325.244 39.6962 325.714 cv
37.3179 326.457 32.2109 326.011 31.8378 332.222 cv
31.5289 337.368 25.2712 339.288 20.1396 339.288 cv
.678431 .568627 .517647 rgb
f
12.8143 332.179 mo
13.8742 331.967 15.759 331.77 17.9283 331.339 cv
16.1881 331.779 14.4718 332.074 12.8143 332.179 cv
40.0873 321.303 mo
41.9238 320.531 44.3444 319.662 46.9632 318.802 cv
44.5531 319.599 42.2021 320.432 40.0873 321.303 cv
.705882 .6 .560784 rgb
f
80.0825 289.558 mo
78.4263 292.185 70.8179 303.925 69.0195 307.519 cv
67.2207 311.114 66.5015 312.242 64.4023 313.068 cv
62.3032 313.894 50.6973 317.604 50.6973 317.604 cv
50.6973 317.604 58.7563 316.348 62.0107 315.457 cv
65.2656 314.564 65.2656 315.292 65.7114 317.604 cv
66.1572 319.916 65.4141 321.998 63.0356 322.591 cv
60.6572 323.187 57.6841 324.227 57.6841 324.227 cv
57.6841 324.227 63.7964 323.965 66.3062 322.889 cv
68.8159 321.813 66.9956 316.2 69.6982 312.037 cv
72.4014 307.875 80.0825 289.558 80.0825 289.558 cv
cp
.917647 .823529 .8 rgb
f
84.8413 290.482 mo
83.2993 290.354 79.6191 304.068 77.2774 306.892 cv
74.9361 309.716 72.2378 312.428 73.4727 318.226 cv
74.7075 324.023 75.5756 344.296 79.3262 345.931 cv
84.2246 348.068 85.4746 341.621 81.9249 329.132 cv
78.3755 316.646 76.1215 314.33 79.0083 310.21 cv
81.895 306.091 81.6992 317.794 84.5239 318.404 cv
88.2583 319.21 86.2866 313.004 83.2661 304.902 cv
80.7329 298.106 89.1528 290.839 84.8413 290.482 cv
.556863 .443137 .407843 rgb
f
24.1938 315.168 mo
24.3217 315.091 24.4481 315.016 24.5734 314.943 cv
24.3263 315.09 24.1938 315.168 24.1938 315.168 cv
.866667 .772549 .745098 rgb
f
44.3071 303.715 mo
46.2757 302.658 48.5952 301.498 51.0091 300.332 cv
48.7888 301.424 46.5406 302.558 44.3071 303.715 cv
.953172 .899654 .886274 rgb
f
44.3037 303.717 mo
44.3048 303.716 44.3061 303.716 44.3071 303.715 cv
46.5406 302.558 48.7888 301.424 51.0091 300.332 cv
51.0097 300.332 51.0109 300.332 51.0116 300.331 cv
48.7889 301.424 46.5397 302.559 44.3037 303.717 cv
.839216 .741176 .701961 rgb
f
24.5734 314.943 mo
26.6165 313.734 36.5038 307.904 44.2973 303.72 cv
44.2995 303.719 44.3016 303.718 44.3037 303.717 cv
46.5397 302.559 48.7889 301.424 51.0116 300.331 cv
59.3112 296.325 68.7144 292.272 68.7144 292.272 cv
68.7144 292.272 60.4468 299.957 56.1358 302.187 cv
51.8247 304.418 50.6972 310.21 38.6557 314.105 cv
38.1032 314.284 37.572 314.355 37.0488 314.355 cv
36.0012 314.355 34.9859 314.069 33.8993 313.782 cv
32.8125 313.496 31.6542 313.209 30.3198 313.209 cv
28.718 313.209 26.8624 313.622 24.5734 314.943 cv
.866667 .772549 .745098 rgb
f
13.668 327.162 mo
13.668 327.162 19.7759 328.57 25.1274 326.697 cv
30.479 324.822 35.3789 323.567 35.3789 323.567 cv
35.3789 323.567 28.8442 328.984 22.3032 329.58 cv
15.7622 330.173 13.668 327.162 13.668 327.162 cv
cp
.917647 .823529 .8 rgb
f
25.7192 320.213 mo
25.7192 320.213 25.4146 324.886 27.7241 325.821 cv
30.0332 326.754 23.9746 328.39 23.9746 328.39 cv
23.9746 328.39 23.3374 322.591 25.7192 320.213 cv
cp
f
9.24565 342.587 mo
9.24565 342.587 9.81542 345.847 18.289 346.335 cv
21.8061 346.538 24.7279 346.196 27.1998 345.853 cv
30.6835 345.371 33.2739 344.888 35.3789 345.931 cv
38.2075 347.333 44.149 348.607 51.455 348.384 cv
58.7617 348.162 63.2216 346.935 67.6812 347.715 cv
72.1411 348.496 73.5904 348.102 76.935 348.41 cv
80.2803 348.718 87.0811 346.851 88.642 346.335 cv
90.2031 345.82 92.0166 344.72 92.0166 344.72 cv
92.0166 344.72 92.1245 346.283 86.5659 348.496 cv
81.9473 350.335 71.5835 350.68 62.7754 350.982 cv
53.9673 351.284 40.3794 350.982 29.0688 349.965 cv
19.5425 349.11 15.143 348.99 12.0454 347.493 cv
9.81006 346.412 9.24565 342.587 9.24565 342.587 cv
.556863 .431373 .392157 rgb
f
60.2261 306.892 mo
60.2261 306.892 59.022 311.917 54.4136 313.552 cv
49.8047 315.188 37.6147 320.213 37.6147 320.213 cv
37.6147 320.213 46.416 314.119 51.4551 312.037 cv
56.4946 309.957 59.3486 308.883 60.2261 306.892 cv
cp
.917647 .823529 .8 rgb
f
31.8378 339.288 mo
31.8378 339.288 32.9082 331.89 36.9712 329.657 cv
38.3254 328.912 40.1048 328.664 41.8749 328.664 cv
45.4155 328.664 48.9204 329.657 48.9204 329.657 cv
48.9204 329.657 39.7705 330.554 37.6147 332.222 cv
35.4594 333.89 31.8378 339.288 31.8378 339.288 cv
.678431 .568627 .517647 rgb
f
42.8735 343.813 mo
42.8735 343.813 50.8193 344.53 53.8003 345.931 cv
56.7813 347.333 61.2632 349.965 61.2632 349.965 cv
54.8594 349.965 li
54.8594 349.965 54.8701 349.166 51.4551 347.326 cv
47.8354 345.375 42.8735 343.813 42.8735 343.813 cv
cp
.556863 .431373 .392157 rgb
f
17.1187 343.813 mo
17.1187 343.813 20.667 346.238 24.5234 346.335 cv
28.3794 346.433 27.7661 347.994 27.7661 347.994 cv
22.4604 348.496 li
22.4604 348.496 17.8989 346.601 17.1187 343.813 cv
cp
f
55.9592 334.562 mo
55.2731 334.562 54.6063 334.071 54.9522 333.111 cv
55.167 332.515 55.6149 332.252 56.0477 332.252 cv
56.4935 332.252 56.9232 332.531 57.0659 333.009 cv
57.3771 334.052 56.6581 334.562 55.9592 334.562 cv
.564706 .482353 .435294 rgb
f
40.9647 347.086 mo
40.4871 347.086 40.023 346.744 40.2637 346.076 cv
40.4132 345.661 40.7248 345.479 41.026 345.479 cv
41.3363 345.479 41.6355 345.672 41.7349 346.005 cv
41.9512 346.731 41.451 347.086 40.9647 347.086 cv
f
84.521 321.821 mo
84.0436 321.821 83.5797 321.479 83.8204 320.811 cv
83.9698 320.396 84.2816 320.214 84.5828 320.214 cv
84.8928 320.214 85.1917 320.407 85.291 320.74 cv
85.5076 321.466 85.0074 321.821 84.521 321.821 cv
.486274 .4 .368627 rgb
f
72.0303 322.624 mo
71.5529 322.624 71.0889 322.282 71.3296 321.615 cv
71.479 321.2 71.7909 321.017 72.0921 321.017 cv
72.4022 321.017 72.701 321.211 72.8003 321.543 cv
73.0169 322.269 72.5166 322.624 72.0303 322.624 cv
f
83.5761 331.15 mo
83.2974 331.15 83.0264 330.95 83.1669 330.56 cv
83.2543 330.318 83.4361 330.212 83.6118 330.212 cv
83.7928 330.212 83.9674 330.325 84.0254 330.519 cv
84.1517 330.943 83.8599 331.15 83.5761 331.15 cv
f
86.549 302.262 mo
86.2705 302.262 86.0002 302.063 86.1406 301.673 cv
86.2278 301.431 86.4099 301.324 86.5858 301.324 cv
86.7667 301.324 86.9411 301.437 86.999 301.631 cv
87.1255 302.055 86.8331 302.262 86.549 302.262 cv
f
75.5595 316.107 mo
75.2808 316.107 75.0098 315.907 75.1504 315.517 cv
75.2377 315.275 75.4194 315.169 75.5951 315.169 cv
75.7762 315.169 75.9508 315.282 76.0088 315.476 cv
76.1351 315.9 75.8433 316.107 75.5595 316.107 cv
.427451 .337255 .309804 rgb
f
26.7261 343.607 mo
27.0293 342.765 28.0015 342.879 28.1968 343.537 cv
28.626 344.974 26.2402 344.956 26.7261 343.607 cv
cp
.556863 .431373 .392157 rgb
f
51.1887 330.04 mo
50.6483 330.04 50.1231 329.654 50.3955 328.898 cv
50.5646 328.428 50.9174 328.222 51.2582 328.222 cv
51.6092 328.222 51.9476 328.441 52.0601 328.818 cv
52.3049 329.639 51.7389 330.04 51.1887 330.04 cv
.564706 .482353 .435294 rgb
f
36.281 337.246 mo
36.0002 337.246 35.7271 337.045 35.8687 336.652 cv
35.9567 336.408 36.14 336.301 36.3171 336.301 cv
36.4993 336.301 36.675 336.415 36.7334 336.611 cv
36.8607 337.037 36.5668 337.246 36.281 337.246 cv
f
57.1242 329.603 mo
56.8436 329.603 56.5709 329.403 56.7124 329.01 cv
56.8002 328.766 56.9835 328.659 57.1606 328.659 cv
57.3428 328.659 57.5184 328.773 57.5766 328.968 cv
57.704 329.395 57.41 329.603 57.1242 329.603 cv
f
63.6777 331.105 mo
63.1876 331.105 62.7115 330.755 62.9585 330.07 cv
63.112 329.643 63.4323 329.456 63.7415 329.456 cv
64.0598 329.456 64.3665 329.654 64.4682 329.996 cv
64.6905 330.741 64.1768 331.105 63.6777 331.105 cv
f
65.7417 327.714 mo
65.939 327.167 66.5703 327.242 66.6973 327.668 cv
66.9761 328.603 65.4258 328.59 65.7417 327.714 cv
cp
.917647 .823529 .8 rgb
f
42.3276 334.626 mo
42.4878 334.181 43.001 334.242 43.104 334.587 cv
43.3306 335.348 42.0708 335.337 42.3276 334.626 cv
cp
f
23.9219 341.629 mo
24.1157 341.091 24.7368 341.165 24.8618 341.583 cv
25.1357 342.503 23.6118 342.491 23.9219 341.629 cv
cp
f
144.931 337.113 mo
143.855 338.874 143.101 344.908 144.931 348.07 cv
146.366 350.548 153.679 351.724 162.679 352.017 cv
171.68 352.311 200.01 352.197 213.44 351.547 cv
227.438 350.872 232.785 351.38 238.264 349.774 cv
243.743 348.167 244.134 343.564 242.862 341.462 cv
241.591 339.363 240.885 331.695 220.154 331.909 cv
199.425 332.123 144.931 337.113 144.931 337.113 cv
cp
.129412 .129412 .129412 rgb
f
237.547 315.896 mo
234.804 305.496 233.594 287.164 221.593 286.642 cv
209.592 286.12 193.667 287.164 187.28 294.468 cv
180.894 301.773 183.429 309.005 179.813 312.433 cv
176.198 315.861 156.204 313.917 147.5 324.47 cv
143.063 329.85 143.978 345.928 146.979 348.21 cv
149.979 350.494 232.363 350.841 238.604 347.678 cv
244.108 344.888 241.424 330.595 237.547 315.896 cv
cp
.447059 .447059 .447059 rgb
f
201.302 299.74 mo
201.302 299.74 203.858 304.556 202.864 308.703 cv
201.87 312.849 199.79 324.207 195.547 328.017 cv
191.304 331.83 169.052 331.005 167.541 331.597 cv
166.029 332.188 162.542 341.431 174.021 341.276 cv
183.262 341.15 193.383 338.197 199.326 334.83 cv
205.271 331.462 204.997 324.785 209.797 324.785 cv
218.11 324.785 214.581 339.725 219.634 341.06 cv
229.198 343.587 229.763 334.218 226.462 313.054 cv
223.937 296.855 211.494 294.653 201.302 299.74 cv
cp
.388235 .380392 .380392 rgb
f
188.33 293.41 mo
190.848 299.871 197.881 306.234 204.408 305.792 cv
210.937 305.349 223.929 303.492 228.685 300.906 cv
233.324 298.382 231.359 289.258 225.546 287.162 cv
219.732 285.064 207.21 286.153 198.861 288.357 cv
190.513 290.56 188.33 293.41 188.33 293.41 cv
cp
.619608 .619608 .619608 rgb
f
179.813 312.433 mo
179.813 312.433 181.858 316.324 188.33 321.068 cv
197.315 327.656 197.315 327.656 194.114 329.058 cv
190.913 330.459 165.011 332.631 157.906 332.426 cv
150.801 332.22 145.724 326.099 149.632 322.018 cv
153.541 317.937 159.408 316.335 166.747 315.277 cv
174.085 314.219 179.813 312.433 179.813 312.433 cv
cp
f
221.241 303.711 mo
221.828 302.987 226.462 303.008 228.945 297.31 cv
230.093 294.678 229.763 290.736 230.677 292.503 cv
232.312 295.664 232.675 294.796 234.217 301.317 cv
235.76 307.837 240.445 324.75 241.086 332.011 cv
241.727 339.273 243.443 344.548 238.604 347.678 cv
233.764 350.809 218.241 349.504 218.241 349.504 cv
218.241 349.504 230.075 344.874 226.935 326.103 cv
225.06 314.9 221.241 303.711 221.241 303.711 cv
cp
.298039 .294118 .294118 rgb
f
144.498 339.06 mo
144.498 339.06 147.399 346.264 153.894 345.993 cv
160.389 345.722 165.537 344.894 175.681 345.993 cv
185.826 347.091 191.66 346.848 204.408 348.226 cv
217.157 349.602 222.807 347.744 225.688 341.462 cv
227.478 337.562 237.579 348.226 237.579 348.226 cv
237.579 348.226 233.58 349.25 224.959 349.439 cv
216.337 349.628 193.535 351.201 177.647 350.809 cv
161.759 350.417 153.453 349.719 147.881 348.794 cv
144.448 348.226 144.498 339.06 144.498 339.06 cv
cp
f
165.281 332.229 mo
165.281 332.229 181.456 331.96 187.456 331.308 cv
193.457 330.656 197.37 329.588 198.805 326.666 cv
200.239 323.742 201.328 315.258 201.328 315.258 cv
201.328 315.258 199.054 324.644 196.489 325.275 cv
193.925 325.906 191.358 323.296 191.358 323.296 cv
191.358 323.296 194.207 326.164 193.946 327.525 cv
193.685 328.886 191.5 329.58 185.679 330.362 cv
181.021 330.988 165.281 332.229 165.281 332.229 cv
cp
.788235 .788235 .788235 rgb
f
150.822 329.867 mo
150.822 329.867 153.835 332.089 156.232 332.263 cv
158.628 332.439 163.615 332.311 163.615 332.311 cv
163.615 332.311 158.97 333.101 157.454 335.156 cv
157.049 335.704 155.938 341.462 155.938 341.462 cv
155.938 341.462 156.378 336.183 154.861 333.835 cv
154.352 333.045 150.822 329.867 150.822 329.867 cv
cp
f
184.978 321.785 mo
184.978 321.785 189.674 324.71 188.826 326.281 cv
187.978 327.851 178.716 329.482 178.716 329.482 cv
178.716 329.482 186.037 326.689 186.478 325.242 cv
186.935 323.744 184.978 321.785 184.978 321.785 cv
cp
f
150.822 326.677 mo
150.822 326.677 149.692 323.285 152.823 321.329 cv
155.954 319.373 161.563 317.611 166.455 316.763 cv
171.346 315.916 176.303 315.258 176.303 315.258 cv
176.303 315.258 157.219 319.894 153.867 322.437 cv
151.837 323.976 150.822 326.677 150.822 326.677 cv
cp
f
196.587 303.523 mo
196.587 303.523 198.805 304.436 202.849 304.632 cv
206.893 304.828 212.294 304.939 212.294 304.939 cv
212.294 304.939 205.196 305.675 204.051 306.915 cv
203.485 307.525 202.522 309.915 202.522 309.915 cv
202.522 309.915 203.044 306.98 200.501 305.814 cv
199.494 305.352 196.587 303.523 196.587 303.523 cv
cp
f
226.696 300.693 mo
226.696 300.693 223.222 303.871 222.937 304.828 cv
222.676 305.705 223.654 310.717 223.654 310.717 cv
223.654 310.717 220.328 303.556 221.276 303.328 cv
223.012 302.908 226.696 300.693 226.696 300.693 cv
cp
f
198.87 289.37 mo
198.87 289.37 192.413 290.935 191.761 293.023 cv
191.108 295.109 194.63 299.61 194.63 299.61 cv
194.63 299.61 193.436 294.841 193.783 293.41 cv
194.239 291.522 198.87 289.37 198.87 289.37 cv
cp
f
227.241 292.435 mo
227.241 292.435 226.916 297.523 222.807 299.61 cv
218.697 301.697 210.219 302.414 210.219 302.414 cv
210.219 302.414 219.35 300.001 222.35 297.718 cv
225.351 295.435 227.241 292.435 227.241 292.435 cv
cp
f
207.153 307.762 mo
208.163 308.026 207.479 310.241 207.479 312.785 cv
207.479 315.328 208.156 321.394 207.72 321.785 cv
207.283 322.176 206.632 315.654 206.827 312.98 cv
207.022 310.306 205.653 307.371 207.153 307.762 cv
cp
.298039 .294118 .294118 rgb
f
219.441 309.912 mo
220.451 310.175 219.768 312.39 219.768 314.933 cv
219.768 317.477 220.444 323.542 220.008 323.934 cv
219.572 324.326 218.92 317.803 219.115 315.129 cv
219.311 312.455 217.941 309.52 219.441 309.912 cv
cp
f
234.242 325.226 mo
235.252 325.49 234.568 327.705 234.568 330.25 cv
234.568 332.792 235.245 338.859 234.809 339.25 cv
234.372 339.64 233.721 333.119 233.916 330.445 cv
234.111 327.771 232.742 324.835 234.242 325.226 cv
cp
.388235 .380392 .380392 rgb
f
200.614 329.517 mo
201.624 329.78 200.94 331.996 200.94 334.539 cv
200.94 337.083 201.617 343.148 201.182 343.54 cv
200.745 343.931 200.093 337.409 200.288 334.734 cv
200.484 332.06 199.114 329.125 200.614 329.517 cv
cp
f
211.653 305.814 mo
212.125 305.773 211.914 308.871 211.653 310.371 cv
211.393 311.872 212.136 318.749 211.928 319.386 cv
211.719 320.024 211.066 313.111 211.066 309.915 cv
211.066 306.718 210.806 305.886 211.653 305.814 cv
cp
.298039 .294118 .294118 rgb
f
209.175 316.437 mo
209.623 316.347 209.44 318.394 209.797 319.763 cv
210.153 321.132 209.731 322.958 209.486 322.958 cv
209.24 322.958 209.175 320.835 209.175 319.386 cv
209.175 317.937 208.522 316.568 209.175 316.437 cv
cp
f
179.006 337.243 mo
179.454 337.154 179.271 339.199 179.628 340.57 cv
179.985 341.939 179.563 343.765 179.317 343.765 cv
179.071 343.765 179.006 341.642 179.006 340.192 cv
179.006 338.743 178.354 337.373 179.006 337.243 cv
cp
.388235 .380392 .380392 rgb
f
170.371 333.259 mo
170.818 333.169 170.636 335.216 170.992 336.585 cv
171.349 337.955 170.927 339.781 170.682 339.781 cv
170.436 339.781 170.371 337.658 170.371 336.208 cv
170.371 334.759 169.718 333.39 170.371 333.259 cv
cp
.298039 .294118 .294118 rgb
f
210.794 324.459 mo
211.242 324.37 211.06 326.416 211.416 327.786 cv
211.772 329.156 211.351 330.982 211.104 330.982 cv
210.859 330.982 210.794 328.858 210.794 327.409 cv
210.794 325.959 210.142 324.589 210.794 324.459 cv
cp
.388235 .380392 .380392 rgb
f
203.566 320.967 mo
204.022 321.002 204.088 324.72 203.566 325.633 cv
203.044 326.546 203.109 320.933 203.566 320.967 cv
cp
.298039 .294118 .294118 rgb
f
221.106 334.439 mo
220.604 334.945 220.711 330.33 221.106 330.003 cv
221.502 329.677 221.754 333.787 221.106 334.439 cv
cp
f
231.234 321.904 mo
230.732 322.41 230.839 317.794 231.234 317.468 cv
231.631 317.143 231.883 321.251 231.234 321.904 cv
cp
.388235 .380392 .380392 rgb
f
173.494 337.201 mo
172.992 337.707 173.099 333.092 173.494 332.766 cv
173.89 332.44 174.142 336.548 173.494 337.201 cv
cp
.298039 .294118 .294118 rgb
f
206.412 335.626 mo
205.91 336.132 206.017 331.517 206.412 331.191 cv
206.809 330.865 207.061 334.974 206.412 335.626 cv
cp
.388235 .380392 .380392 rgb
f
155.008 328.503 mo
153.912 327.563 155.986 326.837 156.378 327.718 cv
156.769 328.601 155.693 329.089 155.008 328.503 cv
cp
.447059 .447059 .447059 rgb
f
157.786 323.563 mo
157.091 322.967 158.405 322.507 158.653 323.066 cv
158.901 323.625 158.219 323.935 157.786 323.563 cv
cp
f
160.3 327.615 mo
159.953 327.317 160.61 327.087 160.733 327.367 cv
160.857 327.646 160.517 327.8 160.3 327.615 cv
cp
f
153.694 325.78 mo
153.347 325.482 154.004 325.252 154.127 325.532 cv
154.251 325.811 153.911 325.966 153.694 325.78 cv
cp
f
165.973 320.552 mo
165.445 320.1 166.442 319.751 166.631 320.175 cv
166.819 320.599 166.302 320.833 165.973 320.552 cv
cp
.388235 .380392 .380392 rgb
f
170.856 319.113 mo
170.33 318.662 171.327 318.313 171.515 318.737 cv
171.703 319.16 171.186 319.396 170.856 319.113 cv
cp
f
169.202 321.225 mo
168.675 320.773 169.672 320.424 169.86 320.848 cv
170.048 321.272 169.531 321.507 169.202 321.225 cv
cp
f
176.455 335.888 mo
175.928 335.436 176.925 335.087 177.113 335.511 cv
177.301 335.935 176.784 336.169 176.455 335.888 cv
cp
.298039 .294118 .294118 rgb
f
173.618 340.27 mo
173.091 339.818 174.088 339.469 174.276 339.893 cv
174.464 340.317 173.947 340.552 173.618 340.27 cv
cp
f
163.342 340.725 mo
162.815 340.273 163.812 339.924 164 340.348 cv
164.188 340.772 163.671 341.007 163.342 340.725 cv
cp
.388235 .380392 .380392 rgb
f
202.501 299.832 mo
201.974 299.38 202.971 299.032 203.158 299.456 cv
203.347 299.879 202.83 300.115 202.501 299.832 cv
cp
.447059 .447059 .447059 rgb
f
208.149 299.595 mo
207.366 298.923 208.849 298.405 209.128 299.035 cv
209.407 299.665 208.639 300.013 208.149 299.595 cv
cp
f
214.807 324.333 mo
214.233 323.841 215.318 323.462 215.523 323.923 cv
215.728 324.384 215.165 324.64 214.807 324.333 cv
cp
f
211.144 322.184 mo
210.857 321.938 211.399 321.749 211.502 321.979 cv
211.604 322.209 211.322 322.337 211.144 322.184 cv
cp
f
215.649 318.666 mo
215.363 318.42 215.905 318.231 216.008 318.461 cv
216.11 318.692 215.829 318.82 215.649 318.666 cv
cp
f
201.18 329.415 mo
200.893 329.168 201.435 328.979 201.537 329.209 cv
201.64 329.44 201.358 329.568 201.18 329.415 cv
cp
f
201.41 325.754 mo
201.124 325.508 201.666 325.319 201.769 325.549 cv
201.871 325.78 201.59 325.908 201.41 325.754 cv
cp
f
205.393 325.102 mo
205.105 324.857 205.648 324.667 205.75 324.897 cv
205.853 325.128 205.571 325.255 205.393 325.102 cv
cp
f
212.877 332.367 mo
212.452 332.003 213.257 331.721 213.408 332.064 cv
213.56 332.406 213.143 332.595 212.877 332.367 cv
cp
.388235 .380392 .380392 rgb
f
208.403 328.1 mo
207.882 327.654 208.868 327.308 209.054 327.728 cv
209.24 328.146 208.729 328.378 208.403 328.1 cv
cp
f
203.574 333.746 mo
203.237 333.457 203.875 333.234 203.995 333.505 cv
204.115 333.776 203.784 333.926 203.574 333.746 cv
cp
f
198.059 337.603 mo
197.722 337.314 198.358 337.091 198.479 337.363 cv
198.599 337.632 198.269 337.783 198.059 337.603 cv
cp
f
202.073 338.217 mo
201.577 337.792 202.516 337.464 202.692 337.863 cv
202.869 338.261 202.383 338.483 202.073 338.217 cv
cp
f
190.033 340.712 mo
189.537 340.287 190.475 339.958 190.652 340.357 cv
190.829 340.755 190.342 340.977 190.033 340.712 cv
cp
f
185.271 337.449 mo
184.776 337.025 185.714 336.697 185.891 337.095 cv
186.068 337.494 185.581 337.714 185.271 337.449 cv
cp
.298039 .294118 .294118 rgb
f
189.938 336.566 mo
189.621 336.294 190.22 336.084 190.333 336.339 cv
190.446 336.593 190.135 336.736 189.938 336.566 cv
cp
f
187.91 335.453 mo
187.593 335.181 188.192 334.972 188.305 335.226 cv
188.418 335.482 188.107 335.623 187.91 335.453 cv
cp
f
180.549 339.248 mo
180.107 338.869 180.943 338.576 181.101 338.931 cv
181.258 339.287 180.825 339.484 180.549 339.248 cv
cp
f
218.503 326.007 mo
218.062 325.629 218.897 325.337 219.055 325.692 cv
219.212 326.047 218.779 326.244 218.503 326.007 cv
cp
f
212.534 328.177 mo
212.109 327.813 212.913 327.532 213.065 327.874 cv
213.217 328.215 212.8 328.405 212.534 328.177 cv
cp
.388235 .380392 .380392 rgb
f
206.271 294.98 mo
205.764 294.546 206.722 294.211 206.902 294.619 cv
207.083 295.025 206.586 295.251 206.271 294.98 cv
cp
.447059 .447059 .447059 rgb
f
221.241 294.648 mo
220.734 294.214 221.692 293.879 221.873 294.287 cv
222.054 294.693 221.557 294.919 221.241 294.648 cv
cp
f
223.489 291.769 mo
223.129 291.459 223.811 291.22 223.939 291.511 cv
224.067 291.8 223.714 291.961 223.489 291.769 cv
cp
f
161.981 334.699 mo
161.454 334.248 162.451 333.899 162.639 334.323 cv
162.827 334.747 162.31 334.982 161.981 334.699 cv
cp
.388235 .380392 .380392 rgb
f
311.727 332.662 mo
306.975 333.602 305.698 338.483 309.295 342.476 cv
312.892 346.47 319.079 350.482 349.637 349.75 cv
380.517 349.009 382.19 345.04 383.202 342.443 cv
384.78 338.389 381.111 334.726 365.783 329.347 cv
350.455 323.968 314.689 332.074 311.727 332.662 cv
.129412 .129412 .129412 rgb
f
313.561 343.818 mo
307.291 339.107 298.211 325.695 301.757 313.376 cv
305.302 301.059 320.391 286.669 334.905 286.052 cv
349.42 285.437 378.338 302.812 383.132 309.171 cv
389.268 317.309 385.397 336.877 380.593 342.619 cv
376.553 347.448 324.146 351.769 313.561 343.818 cv
.713726 .533333 .470588 rgb
f
344.347 348.184 mo
344.347 348.184 li
349.014 348.09 353.727 347.824 358.146 347.431 cv
358.15 347.43 358.152 347.43 358.156 347.43 cv
353.734 347.823 349.017 348.09 344.347 348.184 cv
313.583 343.834 mo
313.576 343.829 313.569 343.823 313.561 343.818 cv
313.219 343.561 312.868 343.277 312.511 342.969 cv
312.868 343.277 313.219 343.561 313.561 343.818 cv
313.569 343.823 313.576 343.829 313.583 343.834 cv
312.51 342.968 mo
312.505 342.964 312.5 342.96 312.495 342.956 cv
312.5 342.96 312.505 342.964 312.51 342.968 cv
.415686 .313725 .282353 rgb
f
383.122 309.158 mo
383.121 309.157 383.12 309.156 383.119 309.154 cv
383.12 309.155 383.121 309.157 383.122 309.158 cv
383.11 309.142 mo
383.108 309.141 383.107 309.139 383.106 309.137 cv
383.107 309.139 383.108 309.14 383.11 309.142 cv
383.1 309.129 mo
383.097 309.126 383.095 309.122 383.092 309.119 cv
383.095 309.122 383.097 309.126 383.1 309.129 cv
383.088 309.114 mo
383.084 309.109 383.081 309.105 383.078 309.1 cv
383.081 309.105 383.085 309.109 383.088 309.114 cv
383.075 309.097 mo
383.068 309.088 383.061 309.079 383.054 309.07 cv
383.061 309.079 383.068 309.088 383.075 309.097 cv
383.054 309.069 mo
382.996 308.995 382.935 308.92 382.871 308.843 cv
382.935 308.92 382.996 308.996 383.054 309.069 cv
382.868 308.84 mo
382.865 308.836 382.861 308.831 382.858 308.827 cv
382.861 308.831 382.865 308.836 382.868 308.84 cv
382.852 308.821 mo
382.85 308.818 382.849 308.816 382.847 308.814 cv
382.849 308.816 382.851 308.818 382.852 308.821 cv
382.837 308.802 mo
382.836 308.8 382.834 308.799 382.833 308.797 cv
382.834 308.799 382.835 308.8 382.837 308.802 cv
382.822 308.785 mo
382.822 308.784 382.821 308.783 382.82 308.782 cv
382.821 308.783 382.822 308.784 382.822 308.785 cv
382.808 308.768 mo
382.808 308.768 382.807 308.766 382.806 308.766 cv
382.807 308.767 382.807 308.767 382.808 308.768 cv
382.793 308.75 mo
382.793 308.75 382.793 308.75 382.792 308.75 cv
382.793 308.75 382.793 308.75 382.793 308.75 cv
.752895 .652134 .618547 rgb
f
344.347 348.184 mo
344.372 348.183 344.395 348.182 344.42 348.181 cv
349.12 348.018 353.795 347.767 358.146 347.431 cv
353.727 347.824 349.014 348.09 344.347 348.184 cv
316.237 345.259 mo
315.185 344.836 314.291 344.362 313.583 343.834 cv
313.576 343.829 313.569 343.823 313.561 343.818 cv
313.219 343.561 312.868 343.277 312.511 342.969 cv
312.511 342.969 312.51 342.969 312.51 342.968 cv
312.505 342.964 312.5 342.96 312.495 342.956 cv
310.349 341.101 307.993 338.364 305.972 335.095 cv
309.964 337.102 322.828 341.43 333.845 341.43 cv
341.101 341.43 347.555 339.552 350.144 333.897 cv
354.561 324.246 361.129 325.712 368.322 315.99 cv
372.941 309.746 369.945 301.792 367.192 297.49 cv
374.465 301.67 380.479 306.034 382.792 308.75 cv
382.793 308.75 382.793 308.75 382.793 308.75 cv
382.798 308.756 382.802 308.761 382.806 308.766 cv
382.807 308.766 382.808 308.768 382.808 308.768 cv
382.812 308.773 382.816 308.778 382.82 308.782 cv
382.821 308.783 382.822 308.784 382.822 308.785 cv
382.826 308.789 382.829 308.793 382.833 308.797 cv
382.834 308.799 382.836 308.8 382.837 308.802 cv
382.84 308.806 382.844 308.81 382.847 308.814 cv
382.849 308.816 382.85 308.818 382.852 308.821 cv
382.854 308.823 382.856 308.825 382.858 308.827 cv
382.861 308.831 382.865 308.836 382.868 308.84 cv
382.869 308.841 382.87 308.842 382.871 308.843 cv
382.935 308.92 382.996 308.995 383.054 309.069 cv
383.054 309.07 383.054 309.07 383.054 309.07 cv
383.061 309.079 383.068 309.088 383.075 309.097 cv
383.076 309.098 383.077 309.099 383.078 309.1 cv
383.081 309.105 383.084 309.109 383.088 309.114 cv
383.089 309.115 383.091 309.117 383.092 309.119 cv
383.095 309.122 383.097 309.126 383.1 309.129 cv
383.102 309.132 383.104 309.134 383.106 309.137 cv
383.107 309.139 383.108 309.141 383.11 309.142 cv
383.113 309.146 383.116 309.15 383.119 309.154 cv
383.12 309.156 383.121 309.157 383.122 309.158 cv
383.125 309.163 383.129 309.167 383.132 309.171 cv
385.391 312.167 386.293 316.713 386.292 321.547 cv
386.292 325.553 385.671 329.756 384.687 333.441 cv
384.709 333.349 384.732 333.262 384.754 333.181 cv
384.952 332.465 384.02 331.894 382.452 331.461 cv
382.531 331.302 382.602 331.142 382.666 330.981 cv
384.78 325.648 379.958 319.052 379.958 319.052 cv
379.958 319.052 382.074 323.662 380.381 329.253 cv
380.2 329.851 379.96 330.402 379.675 330.91 cv
377.187 330.553 374.142 330.382 371.371 330.382 cv
371.01 330.382 370.653 330.385 370.303 330.391 cv
363.892 330.498 357.376 335.489 354.288 339.712 cv
351.433 343.62 344.891 345.213 337.509 345.213 cv
334.417 345.213 331.177 344.934 328 344.427 cv
317.238 342.712 310.326 340.847 310.326 340.847 cv
310.326 340.847 312.693 343.494 316.233 345.257 cv
316.235 345.258 316.236 345.259 316.237 345.259 cv
.643137 .470588 .411765 rgb
f
347.461 301.724 mo
347.51 294.049 342.908 288.986 337.177 286.102 cv
336.39 286.048 335.625 286.023 334.905 286.052 cv
321.373 286.627 307.347 299.173 302.636 310.851 cv
308.631 315.896 317.199 319.562 324.527 319.419 cv
339.337 319.132 347.377 314.841 347.461 301.724 cv
cp
.768627 .580392 .521569 rgb
f
305.972 307.56 mo
305.972 307.56 308.871 301.407 314.267 296.963 cv
319.661 292.521 324.422 289.627 324.422 289.627 cv
324.422 289.627 318.709 294.845 317.969 296.858 cv
317.229 298.871 322.2 301.407 324.422 299.396 cv
326.644 297.386 328.229 295.588 328.229 295.588 cv
328.229 295.588 327.066 298.935 324.633 300.806 cv
322.2 302.675 317.229 301.686 316.171 300.806 cv
315.112 299.925 313.861 299.796 312.063 301.384 cv
310.265 302.97 307.516 304.828 305.972 307.56 cv
cp
.827451 .639216 .580392 rgb
f
328.229 330.391 mo
328.229 330.391 331.826 322.011 325.585 322.011 cv
319.688 322.011 313.525 317.252 313.525 317.252 cv
313.525 317.252 318.89 320.375 329.29 319.16 cv
339.691 317.945 343.626 313.521 343.626 313.521 cv
343.626 313.521 340.184 318.65 333.777 321.468 cv
330.982 322.697 330.451 328.169 328.229 330.391 cv
cp
.847059 .682353 .623529 rgb
f
329.852 331.783 mo
329.852 331.783 335.998 326.91 340.667 326.763 cv
347.553 326.548 350.401 322.265 352.909 320.774 cv
355.416 319.284 360.071 319.423 360.071 319.423 cv
360.071 319.423 353.659 320.488 350.236 324.823 cv
346.813 329.158 342.863 328.023 339.055 328.873 cv
335.247 329.721 329.852 331.783 329.852 331.783 cv
cp
.827451 .639216 .580392 rgb
f
304.641 321.127 mo
305.909 323.234 310.141 324.931 314.372 325 cv
318.604 325.067 324.104 327.451 324.104 327.451 cv
324.104 327.451 317.013 326.763 313.525 326.763 cv
307.461 326.763 304.641 321.127 304.641 321.127 cv
cp
f
328 319.984 mo
328 319.984 332.771 318.292 337.08 312.513 cv
341.932 306.009 342.237 300.806 342.237 300.806 cv
342.237 300.806 343.005 306.806 339.196 313.521 cv
336.073 319.029 332.555 320.951 332.555 320.951 cv
328 319.984 li
cp
.847059 .682353 .623529 rgb
f
310.326 340.847 mo
310.326 340.847 317.238 342.712 328 344.427 cv
338.761 346.142 350.236 345.257 354.288 339.712 cv
357.376 335.489 363.892 330.498 370.303 330.391 cv
376.714 330.286 385.317 331.139 384.754 333.181 cv
384.189 335.222 383.625 341.287 379.676 343.685 cv
375.727 346.082 360.223 347.634 344.42 348.181 cv
330.019 348.68 319.772 347.019 316.233 345.257 cv
312.693 343.494 310.326 340.847 310.326 340.847 cv
.486275 .352941 .309804 rgb
f
379.958 319.052 mo
379.958 319.052 384.78 325.648 382.666 330.981 cv
381.107 334.914 374.739 338.389 374.739 338.389 cv
371.777 336.423 li
371.777 336.423 378.688 334.844 380.381 329.253 cv
382.074 323.662 379.958 319.052 379.958 319.052 cv
f
356.136 333.486 mo
356.136 333.486 358.237 328.169 363.44 326.785 cv
369.829 325.083 370.293 326.454 373.902 326.492 cv
378.593 326.541 379.253 325.208 379.253 325.208 cv
379.253 325.208 378.478 328.72 373.541 328.72 cv
369.615 328.72 365.924 327.888 361.16 330.156 cv
358.101 331.613 356.136 333.486 356.136 333.486 cv
cp
.517647 .368627 .321569 rgb
f
352.454 334.798 mo
352.454 334.798 350.108 343.318 344.402 344.64 cv
340.275 345.596 337.504 345.212 337.504 345.212 cv
345.685 346.365 li
345.685 346.365 349.422 345.306 351.114 341.71 cv
352.807 338.113 352.454 334.798 352.454 334.798 cv
cp
.486275 .352941 .309804 rgb
f
346.006 290.792 mo
346.006 290.792 349.146 293.939 350.236 298.593 cv
351.326 303.248 350.959 310.439 349.098 313.521 cv
347.235 316.604 340.667 320.951 340.667 320.951 cv
340.667 320.951 348.722 318.878 351.6 314.638 cv
354.479 310.398 355.416 309.833 356.968 309.833 cv
358.52 309.833 359.288 311.385 363.77 310.117 cv
368.251 308.847 371.23 299.942 362.688 295.015 cv
354.146 290.087 342.946 287.061 342.946 287.061 cv
342.946 287.061 344.042 289.23 346.006 290.792 cv
cp
.596078 .431373 .376471 rgb
f
354.571 304.72 mo
354.571 304.72 355.261 300.238 354.475 297.49 cv
353.688 294.742 349.637 291.639 349.637 291.639 cv
349.637 291.639 355.522 293.261 356.792 297.49 cv
357.461 299.721 356.792 304.615 356.792 304.615 cv
356.792 304.615 359.859 303.31 360.459 300.102 cv
360.799 298.279 359.472 295.306 359.472 295.306 cv
359.472 295.306 363.174 298.198 362.139 301.817 cv
361.062 305.582 359.986 305.814 357.462 307.224 cv
354.937 308.635 352.31 309.411 352.31 309.411 cv
352.31 309.411 354.175 307.671 354.571 304.72 cv
cp
.486275 .352941 .309804 rgb
f
319.661 313.995 mo
320.298 313.708 321.213 314.701 320.508 315.406 cv
319.803 316.111 318.251 314.629 319.661 313.995 cv
cp
.827451 .639216 .580392 rgb
f
354.976 312.748 mo
355.612 312.462 356.526 313.454 355.821 314.159 cv
355.116 314.864 353.564 313.382 354.976 312.748 cv
cp
.596078 .431373 .376471 rgb
f
351.935 317.978 mo
352.253 317.835 352.71 318.331 352.357 318.683 cv
352.005 319.036 351.229 318.295 351.935 317.978 cv
cp
f
359.339 314.63 mo
359.85 314.4 360.584 315.196 360.018 315.761 cv
359.452 316.328 358.207 315.139 359.339 314.63 cv
cp
f
340.814 334.179 mo
341.325 333.949 342.06 334.745 341.493 335.31 cv
340.928 335.876 339.683 334.688 340.814 334.179 cv
cp
.827451 .639216 .580392 rgb
f
334.938 336.351 mo
335.449 336.121 336.183 336.916 335.617 337.482 cv
335.051 338.048 333.807 336.86 334.938 336.351 cv
cp
f
328.806 338.41 mo
329.061 338.294 329.428 338.693 329.145 338.976 cv
328.862 339.258 328.239 338.665 328.806 338.41 cv
cp
f
338.504 339.05 mo
338.76 338.936 339.126 339.333 338.844 339.617 cv
338.561 339.9 337.938 339.306 338.504 339.05 cv
cp
f
gsave
345.848 336.31 mo
345.558 336.31 345.229 335.876 345.69 335.669 cv
345.721 335.655 345.754 335.649 345.787 335.649 cv
346.025 335.649 346.278 335.987 346.03 336.236 cv
345.978 336.288 345.914 336.31 345.848 336.31 cv
clp
345.229 335.649 mo
346.278 335.649 li
346.278 336.31 li
345.229 336.31 li
cp
.643137 .470588 .411765 rgb
f
grestore
342.194 342.132 mo
342.45 342.017 342.816 342.416 342.534 342.699 cv
342.251 342.982 341.629 342.387 342.194 342.132 cv
cp
.486275 .352941 .309804 rgb
f
337.062 342.462 mo
337.317 342.348 337.685 342.746 337.401 343.029 cv
337.118 343.312 336.496 342.717 337.062 342.462 cv
cp
f
338.84 343.124 mo
339.096 343.009 339.462 343.407 339.18 343.689 cv
338.896 343.972 338.273 343.378 338.84 343.124 cv
cp
f
355.47 330.072 mo
355.725 329.958 356.092 330.355 355.809 330.638 cv
355.526 330.921 354.903 330.328 355.47 330.072 cv
cp
f
372.277 322.361 mo
372.684 322.177 373.268 322.81 372.817 323.259 cv
372.367 323.709 371.378 322.765 372.277 322.361 cv
cp
f
374.179 324.011 mo
374.502 323.865 374.967 324.369 374.608 324.728 cv
374.25 325.085 373.462 324.333 374.179 324.011 cv
cp
f
369.007 336.398 mo
368.64 336.398 368.224 335.85 368.809 335.586 cv
368.848 335.569 368.889 335.561 368.93 335.561 cv
369.232 335.561 369.553 335.988 369.238 336.303 cv
369.172 336.37 369.091 336.398 369.007 336.398 cv
.552941 .4 .34902 rgb
f
359.004 339.488 mo
358.601 339.488 358.146 339.01 358.786 338.781 cv
358.829 338.765 358.874 338.758 358.92 338.758 cv
359.251 338.758 359.602 339.131 359.257 339.406 cv
359.184 339.463 359.096 339.488 359.004 339.488 cv
f
359.47 342.477 mo
359.067 342.477 358.612 341.998 359.252 341.77 cv
359.295 341.755 359.34 341.748 359.386 341.748 cv
359.717 341.748 360.068 342.119 359.723 342.394 cv
359.65 342.452 359.561 342.477 359.47 342.477 cv
f
352.966 344.851 mo
352.598 344.851 352.184 344.292 352.768 344.024 cv
352.807 344.006 352.848 343.998 352.889 343.998 cv
353.191 343.998 353.512 344.434 353.197 344.754 cv
353.131 344.822 353.05 344.851 352.966 344.851 cv
f
363.633 334.408 mo
363.449 334.408 363.241 334.128 363.533 333.995 cv
363.553 333.986 363.573 333.981 363.594 333.981 cv
363.746 333.981 363.906 334.199 363.748 334.36 cv
363.715 334.394 363.675 334.408 363.633 334.408 cv
f
373.707 332.661 mo
373.524 332.661 373.316 332.381 373.607 332.248 cv
373.627 332.239 373.648 332.234 373.668 332.234 cv
373.82 332.234 373.98 332.452 373.822 332.613 cv
373.789 332.647 373.749 332.661 373.707 332.661 cv
f
380.337 335.012 mo
380.153 335.012 379.945 334.733 380.236 334.599 cv
380.256 334.59 380.277 334.586 380.298 334.586 cv
380.449 334.586 380.609 334.803 380.452 334.964 cv
380.419 334.998 380.379 335.012 380.337 335.012 cv
f
377.781 321.935 mo
378.104 321.79 378.569 322.293 378.211 322.652 cv
377.853 323.01 377.064 322.257 377.781 321.935 cv
cp
.486275 .352941 .309804 rgb
f
333.524 339.853 mo
333.092 339.853 332.604 339.209 333.29 338.9 cv
333.336 338.879 333.385 338.869 333.434 338.869 cv
333.789 338.869 334.166 339.371 333.796 339.742 cv
333.718 339.82 333.622 339.853 333.524 339.853 cv
.643137 .470588 .411765 rgb
f
323.548 336.486 mo
323.206 336.486 322.818 335.975 323.362 335.73 cv
323.399 335.714 323.437 335.706 323.476 335.706 cv
323.757 335.706 324.057 336.104 323.764 336.398 cv
323.702 336.46 323.626 336.486 323.548 336.486 cv
f
317.162 337.361 mo
316.819 337.361 316.431 336.85 316.976 336.605 cv
317.012 336.588 317.051 336.581 317.09 336.581 cv
317.371 336.581 317.669 336.98 317.377 337.273 cv
317.315 337.335 317.24 337.361 317.162 337.361 cv
f
315.632 335.189 mo
315.29 335.189 314.903 334.678 315.447 334.433 cv
315.484 334.417 315.522 334.409 315.561 334.409 cv
315.843 334.409 316.141 334.808 315.848 335.101 cv
315.786 335.163 315.71 335.189 315.632 335.189 cv
f
358.365 312.222 mo
358.54 312.144 358.791 312.416 358.598 312.61 cv
358.404 312.803 357.978 312.397 358.365 312.222 cv
cp
.596078 .431373 .376471 rgb
f
364.581 311.109 mo
364.906 310.962 365.373 311.468 365.013 311.828 cv
364.653 312.187 363.861 311.432 364.581 311.109 cv
cp
f
362.613 312.539 mo
362.938 312.392 363.405 312.898 363.045 313.257 cv
362.686 313.618 361.894 312.863 362.613 312.539 cv
cp
f
315.381 311.055 mo
315.842 310.847 316.505 311.566 315.994 312.077 cv
315.483 312.587 314.359 311.515 315.381 311.055 cv
cp
.847059 .682353 .623529 rgb
f
322.177 307.578 mo
322.407 307.474 322.738 307.833 322.483 308.089 cv
322.228 308.344 321.666 307.808 322.177 307.578 cv
cp
f
338.452 118.427 mo
338.863 118.214 342.364 117.944 343.338 116.805 cv
344.311 115.666 348.077 112.871 352.148 114.633 cv
356.22 116.395 356.584 117.792 356.159 117.975 cv
355.733 118.157 354.076 117.073 352.665 117.975 cv
351.254 118.876 352.027 121.56 351.602 122.106 cv
351.177 122.653 350.561 121.471 348.622 119.858 cv
346.684 118.246 344.713 119.061 342.005 119.032 cv
340.476 119.017 337.275 119.036 338.452 118.427 cv
cp
.129412 .129412 .129412 rgb
f
315.204 33.1953 mo
312.842 23.1895 314.794 2.78711 337.395 .732422 cv
359.995 -1.32227 368.214 6.89648 370.269 16.3477 cv
372.323 25.7988 374.789 49.2217 361.229 52.9199 cv
347.668 56.6182 322.19 62.7822 315.204 33.1953 cv
cp
.356863 .537255 .0980392 rgb
f
318.867 27.5801 mo
317.012 19.7207 319.424 4.53711 337.175 2.92383 cv
354.927 1.30957 360.503 6.92285 362.117 14.3467 cv
363.73 21.7695 365.667 40.167 355.017 43.0723 cv
344.365 45.9766 324.354 50.8184 318.867 27.5801 cv
cp
.4 .623529 .113725 rgb
f
310.638 73.2227 mo
303.554 72.3721 293.013 61.5977 292.638 48.4727 cv
292.263 35.3467 302.388 27.4717 313.263 28.2217 cv
324.138 28.9717 335.013 35.3467 336.138 48.4727 cv
337.263 61.5977 329.388 75.4727 310.638 73.2227 cv
cp
f
309.385 68.0176 mo
303.547 67.3164 294.859 58.4375 294.551 47.6201 cv
294.241 36.8037 302.586 30.3145 311.548 30.9316 cv
320.511 31.5498 329.473 36.8037 330.399 47.6201 cv
331.327 58.4375 324.837 69.8721 309.385 68.0176 cv
cp
.509804 .729412 .137255 rgb
f
356.2 81.3184 mo
349.539 80.5195 339.627 70.3867 339.274 58.0449 cv
338.922 45.7031 348.442 38.2988 358.669 39.0039 cv
368.895 39.709 379.121 45.7031 380.179 58.0449 cv
381.236 70.3867 373.831 83.4346 356.2 81.3184 cv
cp
.4 .623529 .113725 rgb
f
352.651 77.4346 mo
347.03 76.7607 338.667 68.2109 338.369 57.7969 cv
338.071 47.3828 346.105 41.1348 354.734 41.7295 cv
363.362 42.3252 371.991 47.3828 372.884 57.7969 cv
373.776 68.2109 367.528 79.2197 352.651 77.4346 cv
cp
.509804 .729412 .137255 rgb
f
380.555 46.4893 mo
380.555 46.4893 380.84 53.7803 377.056 55.5352 cv
373.894 57.001 371.808 56.5576 371.808 56.5576 cv
371.803 56.5625 li
373.511 52.7852 373.514 48.8594 373.514 48.8594 cv
373.514 48.8594 372.44 54.4385 368.93 58.2852 cv
368.328 58.1494 367.384 57.7744 366.063 56.7891 cv
363.553 54.915 364.639 49.9521 364.639 49.9521 cv
363.944 50.9551 363.093 55.877 364.969 58.0654 cv
365.77 58.998 366.583 59.5352 367.213 59.8467 cv
366.442 60.4209 365.59 60.9072 364.639 61.2539 cv
360.831 62.6455 357.841 62.6758 356.874 62.6406 cv
357.374 60.6895 357.886 58.7061 358.407 56.6973 cv
359.104 54.0107 359.598 51.2861 359.934 48.7422 cv
361.315 48.3838 365.066 47.0449 366.609 42.8438 cv
367.02 41.7285 367.26 40.5811 367.38 39.4424 cv
368.279 39.2139 370.193 38.6699 371.349 37.9219 cv
372.898 36.9199 372.625 34.5498 372.442 33.1826 cv
372.442 33.1826 372.352 35.8291 371.258 36.7383 cv
370.453 37.4082 368.469 37.7324 367.474 37.8574 cv
367.545 32.7656 365.516 28.2607 365.516 28.2607 cv
365.516 28.2607 366.519 37.7393 365.607 41.75 cv
364.918 44.7832 361.728 45.9385 360.214 46.3213 cv
360.769 40.709 360.533 36.4971 360.048 36.5547 cv
359.446 36.627 359.774 39.5625 357.04 52.5049 cv
356.896 53.1895 356.745 53.9082 356.591 54.6455 cv
355.771 54.3252 354.573 53.7002 353.303 52.4941 cv
350.998 50.3066 351.035 44.4844 351.035 44.4844 cv
350.591 46.3984 349.84 50.1348 351.035 52.8691 cv
351.88 54.7998 354.611 56.1367 356.146 56.7568 cv
354.488 64.5615 352.322 73.6055 349.566 73.376 cv
347.75 73.2246 346.194 64.8086 346.194 61.5273 cv
346.194 58.4453 345.31 53.832 345.505 45.1221 cv
345.508 45.1211 349.658 43.7539 351.992 39.9268 cv
352.603 38.9268 352.854 37.8213 352.899 36.7334 cv
352.901 36.7383 li
352.901 36.7383 355.745 35.501 358.042 33.7295 cv
361.232 31.2695 360.536 25.7998 360.536 25.7998 cv
360.536 25.7998 359.592 29.6279 358.315 31.8154 cv
357.264 33.6191 353.987 35.0479 352.867 35.4951 cv
352.636 32.9141 351.48 30.7217 351.48 30.7217 cv
351.48 30.7217 352.938 35.917 350.934 39.3799 cv
349.46 41.9248 346.86 42.6963 345.582 42.9277 cv
346.034 33.3701 349.293 27.7139 349.293 27.7139 cv
346.741 27.7139 343.277 37.2842 343.277 49.6797 cv
343.277 54.5928 343.836 60.7637 344.402 66.4717 cv
343.684 66.1025 342.699 65.5479 341.455 64.7188 cv
338.721 62.8965 333.161 46.4893 333.161 46.4893 cv
333.89 50.4082 336.279 61.8008 339.449 65.6289 cv
341.188 67.7285 343.401 68.8096 344.686 69.2979 cv
345.436 76.7549 346.03 82.8271 345.101 83.2197 cv
342.412 84.3506 342.73 79.1182 339.905 72.0996 cv
334.455 58.5625 333.708 59.7959 331.521 54.3271 cv
330.776 52.4678 329.78 49.3994 328.757 46.1514 cv
330.393 45.3174 334.437 42.9619 335.517 39.5625 cv
337.718 32.6357 334.527 27.4404 333.799 25.7998 cv
333.799 25.7998 335.024 30.5527 334.723 34.7383 cv
334.722 34.7402 334.423 35.2305 331.559 33.1826 cv
328.118 30.7217 327.602 23.7041 327.602 23.7041 cv
327.236 26.7119 327.726 32.6758 330.244 34.3672 cv
332.929 36.1699 333.999 36.6611 334.43 36.7666 cv
334.28 37.4141 334.074 38.0205 333.799 38.5596 cv
332.104 41.8799 329.32 43.6074 328.151 44.2188 cv
326.363 38.499 324.627 32.8496 324.138 32.7266 cv
323.408 32.5449 325.688 43.3906 328.239 51.4111 cv
328.438 52.0342 328.671 52.6865 328.919 53.3506 cv
328.122 53.4004 326.662 53.333 324 52.96 cv
321.532 52.6152 319.752 50.8066 318.491 48.6934 cv
319.455 48.0986 322.661 45.9072 322.544 43.1172 cv
322.406 39.8359 320.036 35.5518 318.942 34.1855 cv
318.942 34.1855 322.68 42.1143 321.039 44.4844 cv
319.409 46.8379 317.6 46.9219 317.575 46.9229 cv
316.22 43.918 315.753 40.9297 315.753 40.9297 cv
315.753 40.9297 315.935 49.3145 319.672 53.1426 cv
322.415 55.9531 327.291 55.668 329.691 55.3184 cv
332.63 62.498 337.369 71.4307 338.295 79.2227 cv
337.324 79.1816 335.564 78.7646 332.401 77.2646 cv
330.032 76.1406 328.107 73.6758 326.605 70.9619 cv
327.92 70.2676 329.997 68.8975 330.427 66.9961 cv
331.064 64.1709 327.602 58.4268 327.602 58.4268 cv
327.602 58.4268 329.424 62.4395 329.241 65.8115 cv
329.119 68.0762 327.108 69.0234 325.799 69.4033 cv
323.61 64.8838 322.547 60.252 322.547 60.252 cv
322.111 64.9834 323.656 70.2402 326.127 74.2441 cv
325.578 74.3057 324.755 74.3203 323.713 74.0947 cv
321.947 73.7129 318.578 70.6426 318.578 70.6426 cv
318.578 70.6426 320.369 74.2852 322.474 75.0771 cv
324.874 75.9814 326.356 75.9492 327.168 75.7754 cv
328.36 77.3809 329.7 78.7051 331.108 79.5732 cv
333.501 81.0488 336.572 81.7842 338.607 82.1357 cv
339.206 85.6914 341.069 90.4375 341.576 94.1563 cv
342.688 102.313 342.217 108.751 342.268 109.468 cv
342.997 119.676 339.085 117.671 338.893 118.392 cv
338.721 119.04 344.936 117.847 347.105 118.309 cv
348.952 118.702 350.295 121.316 351.035 121.316 cv
351.571 121.316 350.396 117.986 352.482 117.397 cv
353.997 116.97 355.182 117.336 355.783 117.308 cv
357.138 117.243 351.035 113.843 350.465 105.247 cv
350.095 99.6826 350.568 90.4199 352.027 83.1279 cv
352.295 81.7861 352.596 80.375 352.921 78.9063 cv
354.815 78.9766 359.095 78.8994 362.6 77.1133 cv
363.85 76.4756 364.827 75.2393 365.592 73.7764 cv
366.621 74.0625 369.953 74.7588 371.805 72.373 cv
374.012 69.5303 374.539 61.5273 374.448 61.0723 cv
374.448 61.0723 372.808 69.8584 370.894 71.4805 cv
368.979 73.1025 366.202 72.4658 366.202 72.4658 cv
366.201 72.4668 li
367.77 68.665 368.159 64.1318 368.159 64.1318 cv
368.159 64.1318 366.367 70.9111 363.623 74.1797 cv
363.294 73.9932 362.889 73.7139 362.383 73.2617 cv
360.813 71.8613 361.779 65.8115 361.779 65.8115 cv
361.779 65.8115 359.136 70.1855 360.536 72.9199 cv
361.244 74.3037 361.979 74.9395 362.533 75.2305 cv
362.326 75.3809 li
359.717 77.0977 355.454 76.6416 353.51 76.3125 cv
354.344 72.7021 355.309 68.7949 356.347 64.709 cv
357.797 64.6621 361.786 64.3613 366.063 62.5303 cv
368.196 61.6172 369.717 60.1045 370.804 58.4121 cv
372.877 58.4912 377.409 58.3213 379.278 55.5352 cv
381.739 51.8662 380.555 46.4893 380.555 46.4893 cv
cp
.34902 .203922 .152941 rgb
f
380.555 46.4893 mo
380.555 46.4893 380.84 53.7803 377.056 55.5352 cv
373.894 57.001 371.808 56.5576 371.808 56.5576 cv
371.803 56.5625 li
373.511 52.7852 373.514 48.8594 373.514 48.8594 cv
373.514 48.8594 372.44 54.4385 368.93 58.2852 cv
368.328 58.1494 367.384 57.7744 366.063 56.7891 cv
363.553 54.915 364.639 49.9521 364.639 49.9521 cv
363.944 50.9551 363.093 55.877 364.969 58.0654 cv
365.77 58.998 366.583 59.5352 367.213 59.8467 cv
366.442 60.4209 365.59 60.9072 364.639 61.2539 cv
360.831 62.6455 357.841 62.6758 356.874 62.6406 cv
357.374 60.6895 357.886 58.7061 358.407 56.6973 cv
359.104 54.0107 359.598 51.2861 359.934 48.7422 cv
361.315 48.3838 365.066 47.0449 366.609 42.8438 cv
367.02 41.7285 367.26 40.5811 367.38 39.4424 cv
368.279 39.2139 370.193 38.6699 371.349 37.9219 cv
372.898 36.9199 372.625 34.5498 372.442 33.1826 cv
372.442 33.1826 372.352 35.8291 371.258 36.7383 cv
370.453 37.4082 368.469 37.7324 367.474 37.8574 cv
367.545 32.7656 365.516 28.2607 365.516 28.2607 cv
365.516 28.2607 366.519 37.7393 365.607 41.75 cv
364.918 44.7832 361.728 45.9385 360.214 46.3213 cv
360.769 40.709 360.533 36.4971 360.048 36.5547 cv
359.446 36.627 359.774 39.5625 357.04 52.5049 cv
356.896 53.1895 356.745 53.9082 356.591 54.6455 cv
355.771 54.3252 354.573 53.7002 353.303 52.4941 cv
350.998 50.3066 351.035 44.4844 351.035 44.4844 cv
350.591 46.3984 349.84 50.1348 351.035 52.8691 cv
351.88 54.7998 354.611 56.1367 356.146 56.7568 cv
354.488 64.5615 352.322 73.6055 349.566 73.376 cv
347.75 73.2246 346.194 64.8086 346.194 61.5273 cv
346.194 58.4453 345.31 53.832 345.505 45.1221 cv
345.508 45.1211 349.658 43.7539 351.992 39.9268 cv
352.603 38.9268 352.854 37.8213 352.899 36.7334 cv
352.901 36.7383 li
352.901 36.7383 355.745 35.501 358.042 33.7295 cv
361.232 31.2695 360.536 25.7998 360.536 25.7998 cv
360.536 25.7998 359.592 29.6279 358.315 31.8154 cv
357.264 33.6191 353.987 35.0479 352.867 35.4951 cv
352.636 32.9141 351.48 30.7217 351.48 30.7217 cv
351.48 30.7217 352.938 35.917 350.934 39.3799 cv
349.46 41.9248 346.86 42.6963 345.582 42.9277 cv
346.034 33.3701 349.293 27.7139 349.293 27.7139 cv
346.741 27.7139 343.277 37.2842 343.277 49.6797 cv
343.277 54.5928 343.836 60.7637 344.402 66.4717 cv
343.684 66.1025 342.699 65.5479 341.455 64.7188 cv
338.721 62.8965 333.161 46.4893 333.161 46.4893 cv
333.89 50.4082 336.279 61.8008 339.449 65.6289 cv
341.188 67.7285 343.401 68.8096 344.686 69.2979 cv
345.436 76.7549 346.03 82.8271 345.101 83.2197 cv
342.412 84.3506 342.73 79.1182 339.905 72.0996 cv
334.455 58.5625 333.708 59.7959 331.521 54.3271 cv
330.776 52.4678 329.78 49.3994 328.757 46.1514 cv
330.393 45.3174 334.437 42.9619 335.517 39.5625 cv
337.718 32.6357 334.527 27.4404 333.799 25.7998 cv
333.799 25.7998 335.024 30.5527 334.723 34.7383 cv
334.722 34.7402 334.423 35.2305 331.559 33.1826 cv
328.118 30.7217 327.602 23.7041 327.602 23.7041 cv
327.236 26.7119 327.726 32.6758 330.244 34.3672 cv
332.929 36.1699 333.999 36.6611 334.43 36.7666 cv
334.28 37.4141 334.074 38.0205 333.799 38.5596 cv
332.104 41.8799 329.32 43.6074 328.151 44.2188 cv
326.363 38.499 324.271 31.0137 323.781 30.8916 cv
323.052 30.709 325.688 43.3906 328.239 51.4111 cv
328.438 52.0342 328.671 52.6865 328.919 53.3506 cv
328.122 53.4004 326.662 53.333 324 52.96 cv
321.532 52.6152 319.752 50.8066 318.491 48.6934 cv
319.455 48.0986 322.661 45.9072 322.544 43.1172 cv
322.406 39.8359 320.036 35.5518 318.942 34.1855 cv
318.942 34.1855 322.68 42.1143 321.039 44.4844 cv
319.409 46.8379 317.6 46.9219 317.575 46.9229 cv
316.22 43.918 315.753 40.9297 315.753 40.9297 cv
315.753 40.9297 315.935 49.3145 319.672 53.1426 cv
322.415 55.9531 327.291 55.668 329.691 55.3184 cv
332.63 62.498 337.369 71.4307 338.295 79.2227 cv
337.324 79.1816 335.564 78.7646 332.401 77.2646 cv
330.032 76.1406 328.107 73.6758 326.605 70.9619 cv
327.92 70.2676 329.997 68.8975 330.427 66.9961 cv
331.064 64.1709 327.602 58.4268 327.602 58.4268 cv
327.602 58.4268 329.424 62.4395 329.241 65.8115 cv
329.119 68.0762 327.108 69.0234 325.799 69.4033 cv
323.61 64.8838 322.547 60.252 322.547 60.252 cv
322.111 64.9834 323.656 70.2402 326.127 74.2441 cv
325.578 74.3057 324.755 74.3203 323.713 74.0947 cv
321.947 73.7129 318.578 70.6426 318.578 70.6426 cv
318.578 70.6426 320.369 74.2852 322.474 75.0771 cv
324.874 75.9814 326.356 75.9492 327.168 75.7754 cv
328.36 77.3809 329.7 78.7051 331.108 79.5732 cv
333.501 81.0488 336.572 81.7842 338.607 82.1357 cv
339.206 85.6914 341.069 90.4375 341.576 94.1563 cv
342.688 102.313 342.217 108.751 342.268 109.468 cv
342.997 119.676 338.721 117.975 338.902 118.582 cv
339.096 119.225 344.936 117.847 347.105 118.309 cv
348.952 118.702 350.295 121.316 351.035 121.316 cv
351.571 121.316 350.396 117.986 352.482 117.397 cv
353.997 116.97 355.182 117.336 355.783 117.308 cv
357.138 117.243 351.035 113.843 350.465 105.247 cv
350.095 99.6826 350.568 90.4199 352.027 83.1279 cv
352.295 81.7861 352.596 80.375 352.921 78.9063 cv
354.815 78.9766 359.095 78.8994 362.6 77.1133 cv
363.85 76.4756 364.827 75.2393 365.592 73.7764 cv
366.621 74.0625 369.953 74.7588 371.805 72.373 cv
374.012 69.5303 374.539 61.5273 374.448 61.0723 cv
374.448 61.0723 372.808 69.8584 370.894 71.4805 cv
368.979 73.1025 366.202 72.4658 366.202 72.4658 cv
366.201 72.4668 li
367.77 68.665 368.159 64.1318 368.159 64.1318 cv
368.159 64.1318 366.367 70.9111 363.623 74.1797 cv
363.294 73.9932 362.889 73.7139 362.383 73.2617 cv
360.813 71.8613 361.779 65.8115 361.779 65.8115 cv
361.779 65.8115 359.136 70.1855 360.536 72.9199 cv
361.244 74.3037 361.979 74.9395 362.533 75.2305 cv
362.326 75.3809 li
359.717 77.0977 355.454 76.6416 353.51 76.3125 cv
354.344 72.7021 355.309 68.7949 356.347 64.709 cv
357.797 64.6621 361.786 64.3613 366.063 62.5303 cv
368.196 61.6172 369.717 60.1045 370.804 58.4121 cv
372.877 58.4912 377.409 58.3213 379.278 55.5352 cv
381.739 51.8662 380.555 46.4893 380.555 46.4893 cv
cp
f
355.783 117.308 mo
357.138 117.243 351.035 113.843 350.465 105.247 cv
350.095 99.6826 350.568 90.4199 352.027 83.1279 cv
352.184 82.3457 352.354 81.5342 352.53 80.708 cv
352.537 80.667 li
352.592 80.4072 352.646 80.165 352.698 79.9316 cv
352.772 79.5889 352.844 79.2549 352.921 78.9063 cv
352.941 78.9063 li
353.168 77.9814 353.369 77.2012 353.51 76.3125 cv
354.282 72.9697 355.17 69.3662 356.12 65.6084 cv
356.128 65.5742 li
356.729 63.1865 356.675 63.3506 356.874 62.6406 cv
357.374 60.6895 357.886 58.7061 358.407 56.6973 cv
359.1 54.0254 359.592 51.3145 359.928 48.7822 cv
360.023 47.9131 360.121 47.0752 360.214 46.3213 cv
360.768 40.7197 360.534 36.5146 360.051 36.5557 cv
360.003 37.8291 359.914 39.7676 359.771 41.2031 cv
359.541 43.5273 358.225 56.1045 357.587 58.2012 cv
356.948 60.2969 353.85 72.5098 353.258 74.4238 cv
352.665 76.3379 349.878 86.0723 349.657 101.539 cv
349.528 110.611 351.526 115.09 353.256 117.244 cv
354.396 117.095 355.289 117.331 355.783 117.308 cv
cp
.227451 .12549 .0980392 rgb
f
360.171 70.3672 mo
360.105 70.9805 360.123 71.5928 360.267 72.166 cv
360.192 71.5957 360.166 70.9795 360.171 70.3672 cv
cp
.466667 .27451 .215686 rgb
f
376.271 56.4922 mo
373.141 58.0254 370.49 57.5352 370.49 57.5352 cv
370.485 57.54 li
370.977 56.4531 371.323 55.3574 371.572 54.3438 cv
370.906 55.6768 369.779 57.2627 368.93 58.2852 cv
368.848 58.3828 368.638 59.2949 367.886 59.3857 cv
367.275 59.46 366.072 58.7539 364.758 57.7744 cv
364.826 57.874 364.892 57.9746 364.969 58.0654 cv
365.77 58.998 366.583 59.5352 367.213 59.8467 cv
366.655 60.707 366.883 60.958 364.399 61.9834 cv
360.652 63.5303 356.522 63.6523 355.557 63.6172 cv
356.057 61.667 356.568 59.6826 357.09 57.6738 cv
357.786 54.9883 357.75 54.3125 358.206 50.8184 cv
358.247 50.502 358.765 49.4434 358.889 49.3037 cv
359.307 48.8301 361.621 48.2314 362.764 47.5254 cv
363.761 46.6475 364.917 45.5381 365.516 43.9072 cv
365.926 42.792 366.094 42.752 366.609 40.7471 cv
366.69 40.4346 366.609 39.623 367.38 39.4424 cv
368.115 39.2559 369.525 38.8545 370.648 38.3066 cv
370.968 37.8672 371.668 37.2988 371.744 36.7373 cv
371.523 36.9092 370.59 37.6787 369.8 37.9824 cv
368.823 38.3584 367.259 38.6689 366.792 38.4385 cv
365.888 37.9922 366.101 36.8428 365.981 35.9102 cv
366.017 38.1006 365.939 40.2881 365.607 41.75 cv
365.217 43.4648 364.028 44.5791 362.794 45.293 cv
361.544 46.4795 359.873 47.0518 358.896 47.2988 cv
359.156 44.666 359.241 42.3496 359.21 40.6289 cv
358.853 43.0576 358.242 46.8125 357.04 52.5049 cv
356.896 53.1895 356.706 54.0957 356.591 54.6455 cv
356.526 54.9541 356.562 55.4443 355.784 55.501 cv
355.301 55.5371 353.256 54.6768 351.985 53.4707 cv
351.295 52.8164 350.818 51.833 350.484 50.7803 cv
350.578 51.5078 350.75 52.2168 351.035 52.8691 cv
351.88 54.7998 354.611 56.1367 356.146 56.7568 cv
354.56 64.2236 352.164 71.9551 349.92 73.3486 cv
349.185 73.8047 349.253 73.7607 348.296 73.4639 cv
346.555 72.9248 346.194 67.6943 345.525 62.6514 cv
345.121 59.5957 345.101 57.6689 344.462 48.1904 cv
344.463 48.1904 344.111 46.2275 344.576 45.4863 cv
344.649 45.3711 345.422 45.2344 345.505 45.1221 cv
345.506 45.1211 346.72 44.7178 348.201 43.748 cv
349.081 43.0078 349.963 42.0713 350.675 40.9043 cv
351.25 39.9609 351.499 38.9238 351.564 37.8955 cv
351.408 38.4102 351.205 38.9111 350.934 39.3799 cv
350.247 40.5664 349.315 41.3633 348.388 41.9043 cv
346.965 43.2402 345.235 43.7285 344.265 43.9043 cv
344.717 34.3467 347.976 28.6914 347.976 28.6914 cv
347.762 28.7158 li
345.545 31.4727 343.277 39.6504 343.277 49.6797 cv
343.277 54.5928 343.915 63.2139 344.402 66.4717 cv
344.471 66.9268 344.737 67.3184 344.166 67.6797 cv
343.65 68.0059 341.811 66.5947 340.566 65.7656 cv
339.559 65.0938 337.738 62.3701 336.383 59.2891 cv
337.278 61.9121 338.313 64.2568 339.449 65.6289 cv
341.188 67.7285 343.401 68.8096 344.686 69.2979 cv
345.436 76.7549 345.73 82.1768 345.263 83.0713 cv
344.827 83.9023 344.766 84.2217 343.764 84.4043 cv
340.894 84.9258 341.413 80.0947 338.588 73.0771 cv
333.138 59.54 332.391 60.7734 330.203 55.3047 cv
329.459 53.4453 328.463 50.377 327.439 47.1279 cv
327.801 46.9443 330.09 45.4375 330.955 44.8535 cv
332.331 43.7275 333.411 42.1748 334.199 40.54 cv
335.713 37.3975 335.693 36.3564 335.37 34.2803 cv
335.371 34.7627 335.436 36.2178 333.571 35.54 cv
332.672 35.2129 329.525 33.1924 329.15 32.6992 cv
329.503 33.3271 330.201 34.2373 330.658 34.6436 cv
332.432 36.2178 333.999 36.6611 334.43 36.7666 cv
334.28 37.4141 334.074 38.0205 333.799 38.5596 cv
332.489 41.123 330.54 42.7285 329.178 43.6123 cv
328.233 44.3955 327.364 44.918 326.833 45.1953 cv
326.245 43.3145 325.664 41.4453 325.13 39.7734 cv
325.923 43.334 327.051 47.6777 328.239 51.4111 cv
328.438 52.0342 329.084 53.6914 328.697 54.2861 cv
328.487 54.6094 325.345 54.3096 322.683 53.9375 cv
320.854 53.6816 319.405 52.6211 318.264 51.2295 cv
318.666 51.9355 319.131 52.5879 319.672 53.1426 cv
322.415 55.9531 327.291 55.668 329.691 55.3184 cv
332.63 62.498 338.139 74.7695 338.295 79.2227 cv
338.308 79.5938 338.652 80.0977 337.647 80.3994 cv
337.247 80.5195 334.247 79.7422 331.084 78.2422 cv
328.715 77.1182 326.758 74.0371 325.938 71.9629 cv
325.766 71.5293 327.168 70.6484 327.475 70.4551 cv
328.235 69.7793 329.113 68.9961 329.333 68.0215 cv
329.43 67.5908 329.559 67.166 329.492 66.6318 cv
329.188 67.8311 328.364 68.6357 327.556 69.252 cv
326.693 69.9082 325.569 70.2686 324.821 69.9355 cv
323.877 69.5146 323.631 68.5176 323.275 67.6191 cv
323.547 68.6221 323.988 69.9473 324.543 71.2158 cv
325.3 72.9482 326.149 74.5635 325.983 75.0039 cv
325.663 75.8516 323.5 75.29 322.52 75.0928 cv
324.892 75.9785 326.362 75.9473 327.168 75.7754 cv
328.36 77.3809 329.7 78.7051 331.108 79.5732 cv
333.501 81.0488 336.572 81.7842 338.607 82.1357 cv
339.206 85.6914 341.069 90.4375 341.576 94.1563 cv
342.688 102.313 342.217 108.751 342.268 109.468 cv
342.997 119.676 338.534 117.593 338.417 118.521 cv
338.332 119.188 345.191 117.975 347.105 118.309 cv
348.966 118.634 350.295 121.316 351.035 121.316 cv
351.264 121.316 351.182 120.71 351.174 119.97 cv
349.797 116.744 348.324 112.689 348.062 108.725 cv
347.691 103.159 348.517 92.8652 349.976 85.5742 cv
350.243 84.2324 350.69 82.6416 351.26 80.2588 cv
351.331 79.959 351.428 79.1396 351.754 78.875 cv
352.017 78.6611 352.604 78.8447 352.921 78.9063 cv
354.815 78.9766 358.897 79.1357 362.605 77.1094 cv
364.309 76.1787 364.757 75.1143 364.922 74.9053 cv
365.358 74.3516 365.385 74.1729 365.592 73.7764 cv
366.373 73.9941 368.611 74.4424 370.392 73.6035 cv
370.468 73.5205 371.165 73.0615 371.239 72.9707 cv
372.154 71.8584 372.276 70.8594 372.671 69.3428 cv
372.291 70.2236 371.663 72.375 369.959 72.9199 cv
367.659 73.6563 366.218 73.2441 365.972 72.7832 cv
365.826 72.5098 366.302 70.6797 366.564 69.6846 cv
365.92 71.0703 364.787 73.5762 363.898 74.5605 cv
363.26 75.2676 362.463 75.9053 361.129 76.5996 cv
358.358 78.0439 353.083 78.1553 352.191 77.2891 cv
352.085 77.1855 352.039 76.3545 352.369 75.0039 cv
352.988 72.4629 353.829 70.6348 354.781 66.6816 cv
354.846 66.4131 355.219 65.1641 355.559 64.877 cv
355.8 64.6729 356.029 64.7109 356.347 64.709 cv
358.612 64.6943 361.786 64.3613 366.063 62.5303 cv
366.544 62.3242 367.947 61.4912 368.853 60.7383 cv
369.959 59.8184 370.586 58.752 370.804 58.4121 cv
372.338 58.4707 375.217 58.3896 377.368 57.2168 cv
377.584 57.001 377.787 56.7715 377.961 56.5117 cv
378.632 55.5127 379.644 53.6602 379.871 52.5498 cv
379.36 53.5254 378.504 55.3984 376.271 56.4922 cv
cp
f
317.438 49.502 mo
317.725 49.3145 318.101 49.0508 318.509 48.7197 cv
318.491 48.6934 li
318.694 48.5654 li
319.91 47.5391 321.285 45.9658 321.226 44.127 cv
321.173 44.2549 321.113 44.377 321.039 44.4844 cv
320.279 45.582 320.219 45.6357 318.824 46.5254 cv
317.903 47.1133 317.142 46.9473 316.654 47.0996 cv
316.824 47.6777 317.21 48.9355 317.438 49.502 cv
cp
f
352.908 35.9053 mo
352.851 36.3643 352.97 36.9463 352.844 37.3975 cv
352.97 37.3418 354.526 36.2764 356.538 34.9375 cv
357.867 33.7881 358.862 31.6807 359.111 30.168 cv
358.867 30.7578 358.601 31.3281 358.315 31.8154 cv
357.857 32.6006 357.136 33.4551 356.196 34.0488 cv
354.936 35.1709 353.926 35.4785 352.908 35.9053 cv
cp
f
347.698 83.4014 mo
347.698 83.4014 348.667 88.1406 348.296 91.1943 cv
347.926 94.2471 347.379 99.2598 347.06 102.177 cv
346.741 105.093 347.06 111.428 347.06 111.428 cv
347.06 111.428 345.191 107.417 346.239 99.5332 cv
347.288 91.6504 347.516 89.3262 347.606 87.6855 cv
347.698 86.0449 347.698 83.4014 347.698 83.4014 cv
cp
.286275 .164706 .12549 rgb
f
321.487 20.8027 mo
321.278 18.4785 323.19 8.63965 335.53 6.2959 cv
351.65 3.23438 357.972 8.54004 358.493 15.1738 cv
359.014 21.8086 356.438 25.8604 350.274 29.3203 cv
344.112 32.7793 323.083 38.5713 321.487 20.8027 cv
cp
.509804 .729412 .137255 rgb
f
345.237 84.9512 mo
345.237 84.9512 346.239 88.4141 345.92 91.0576 cv
345.602 93.7002 346.923 97.415 346.923 97.415 cv
346.604 99.0322 li
346.604 99.0322 344.69 94.2471 345.009 91.0117 cv
345.328 87.7764 345.237 84.9512 345.237 84.9512 cv
cp
.286275 .164706 .12549 rgb
f
342.64 94.3838 mo
342.64 94.3838 345.055 98.6221 344.735 101.994 cv
344.417 105.367 344.437 109.24 344.974 112.02 cv
345.511 114.8 346.148 116.805 346.148 116.805 cv
346.148 116.805 343.597 113.615 343.46 109.878 cv
343.323 106.142 344.052 103.043 344.007 100.946 cv
343.961 98.8496 342.64 94.3838 342.64 94.3838 cv
cp
.588235 .360784 .305882 rgb
f
349.067 84.541 mo
349.067 84.541 347.88 79.5283 349.384 76.5205 cv
350.888 73.5127 352.665 70.8691 352.665 70.8691 cv
352.665 70.8691 350.751 74.7891 350.067 77.7051 cv
349.384 80.6221 349.067 84.541 349.067 84.541 cv
cp
.286275 .164706 .12549 rgb
f
345.646 69.7607 mo
345.646 69.7607 346.883 74.8516 347.379 78.6318 cv
347.609 80.3916 346.649 87.0771 346.649 87.0771 cv
346.649 87.0771 346.881 79.1484 346.37 75.4111 cv
345.859 71.6748 345.646 69.7607 345.646 69.7607 cv
cp
.34902 .203922 .152941 rgb
f
342.853 87.3506 mo
342.853 87.3506 343.541 92.4141 344.394 94.3838 cv
345.374 96.6475 344.219 99.0322 344.219 99.0322 cv
343.759 97.7715 li
343.759 97.7715 344.574 96.9209 343.759 94.3838 cv
342.943 91.8477 342.853 87.3506 342.853 87.3506 cv
cp
.588235 .360784 .305882 rgb
f
339.449 81.7305 mo
339.449 81.7305 341.029 88.4443 342.153 90.1768 cv
343.277 91.9082 343.581 92.333 343.581 92.333 cv
343.581 93.1914 li
343.581 93.1914 342.609 91.999 341.759 90.5107 cv
340.908 89.0215 339.479 83.9482 339.449 81.7305 cv
cp
f
348.296 74.333 mo
348.296 74.333 348.29 76.2471 348.017 77.25 cv
347.743 78.252 347.15 79.0723 347.15 79.0723 cv
346.923 77.9785 li
346.923 77.9785 347.248 77.2041 347.609 76.293 cv
347.972 75.3809 348.296 74.333 348.296 74.333 cv
cp
.34902 .203922 .152941 rgb
f
343.82 85.543 mo
343.82 85.543 344.144 88.5967 343.915 89.417 cv
343.688 90.2373 343.432 90.7988 343.432 90.7988 cv
343.581 91.5283 li
343.581 91.5283 344.372 91.1025 344.395 88.8701 cv
344.417 86.6367 343.82 85.543 343.82 85.543 cv
cp
.588235 .360784 .305882 rgb
f
345.646 108.192 mo
345.646 108.192 345.891 111.655 346.923 113.539 cv
347.956 115.423 349.067 117.975 349.067 117.975 cv
349.067 117.975 346.771 115.483 346.148 113.722 cv
345.525 111.959 345.646 108.192 345.646 108.192 cv
cp
.286275 .164706 .12549 rgb
f
341.516 117.975 mo
341.516 117.975 343.338 117.428 343.156 115.727 cv
342.974 114.025 343.913 110.318 343.913 110.318 cv
343.913 111.959 li
343.913 111.959 344.363 114.633 343.82 116.03 cv
343.277 117.428 341.516 117.975 341.516 117.975 cv
cp
.588235 .360784 .305882 rgb
f
307.686 50.5889 mo
308.507 45.5752 313.132 38.9199 322.078 39.6982 cv
331.024 40.4756 335.048 44.9404 334.27 51.748 cv
333.492 58.5547 331.024 64.3975 326.162 66.3428 cv
321.3 68.2871 304.717 68.7324 307.686 50.5889 cv
cp
.619608 .866667 .156863 rgb
f
308.644 50.1348 mo
308.914 47.543 312.281 39.875 319.456 40.499 cv
326.631 41.123 329.282 45.1787 328.658 50.6377 cv
328.035 56.0967 326.631 60.3076 322.731 61.8672 cv
318.832 63.4277 307.113 64.7998 308.644 50.1348 cv
cp
.682353 .917647 .172549 rgb
f
352.619 53.3662 mo
354.383 53.127 361.962 55.2178 362.981 61.7813 cv
364.001 68.3438 360.953 71.6113 355.927 72.2529 cv
350.9 72.8955 346.82 72.5654 344.565 69.416 cv
342.311 66.2676 339.146 55.1953 352.619 53.3662 cv
cp
.356863 .537255 .0980392 rgb
f
352.655 53.4785 mo
354.043 53.29 360.01 54.9365 360.813 60.1025 cv
361.615 65.2695 359.216 67.8418 355.259 68.3477 cv
351.302 68.8535 348.089 68.5928 346.314 66.1143 cv
344.539 63.6348 342.048 54.918 352.655 53.4785 cv
cp
.4 .623529 .113725 rgb
f
351.994 53.4736 mo
352.949 53.3438 357.059 54.4775 357.611 58.0352 cv
358.164 61.5938 356.512 63.3643 353.787 63.7129 cv
351.062 64.0605 348.85 63.8818 347.628 62.1748 cv
346.405 60.4678 344.689 54.4648 351.994 53.4736 cv
cp
.509804 .729412 .137255 rgb
f
353.088 30.7256 mo
353.435 27.4668 360.508 14.8252 372.698 15.8857 cv
384.889 16.9453 389.394 23.8359 388.334 33.1113 cv
387.273 42.3867 384.889 49.542 378.264 52.1914 cv
371.639 54.8418 350.438 55.6367 353.088 30.7256 cv
cp
.619608 .866667 .156863 rgb
f
353.051 30.5 mo
353.342 27.7686 359.269 17.1758 369.484 18.0645 cv
379.699 18.9521 383.475 24.7266 382.586 32.499 cv
381.698 40.2715 379.699 46.2676 374.147 48.4883 cv
368.596 50.709 350.83 51.375 353.051 30.5 cv
cp
.682353 .917647 .172549 rgb
f
355.207 28.9258 mo
355.664 26.2559 358.931 20.9482 365.047 21.4795 cv
371.164 22.0117 373.424 25.4688 372.893 30.123 cv
372.36 34.7764 371.164 38.3672 367.84 39.6963 cv
364.516 41.0264 353.089 41.3154 355.207 28.9258 cv
cp
.745098 .937255 .196078 rgb
f
328.832 23.0732 mo
328.963 21.8486 331.619 17.1025 336.196 17.5 cv
340.774 17.8984 342.466 20.4854 342.067 23.9688 cv
341.67 27.4521 340.774 30.1387 338.286 31.1338 cv
335.799 32.1289 327.837 32.4277 328.832 23.0732 cv
cp
.619608 .866667 .156863 rgb
f
330.186 23.0225 mo
330.282 22.1172 332.246 18.6064 335.632 18.9014 cv
339.018 19.1953 340.269 21.1094 339.974 23.6846 cv
339.68 26.2607 339.018 28.248 337.178 28.9834 cv
335.338 29.7197 329.45 29.9404 330.186 23.0225 cv
cp
.682353 .917647 .172549 rgb
f
300.441 36.5557 mo
300.441 36.5557 302.373 37.0615 303.018 38.8096 cv
303.661 40.5586 303.661 41.4785 303.661 41.4785 cv
303.661 41.4785 302.189 40.5586 301.315 39.0166 cv
300.441 37.4756 300.441 36.5557 300.441 36.5557 cv
cp
.4 .623529 .113725 rgb
f
304.168 35.7549 mo
304.168 35.7549 304.938 36.9463 304.438 38.1719 cv
303.939 39.3975 303.498 39.8799 303.498 39.8799 cv
303.498 39.8799 303.167 38.6914 303.447 37.4648 cv
303.727 36.2373 304.168 35.7549 304.168 35.7549 cv
cp
f
309.012 36.2178 mo
309.012 36.2178 309.884 37.5654 309.318 38.9512 cv
308.754 40.3369 308.255 40.8828 308.255 40.8828 cv
308.255 40.8828 307.88 39.5391 308.197 38.1514 cv
308.514 36.7637 309.012 36.2178 309.012 36.2178 cv
cp
f
304.688 42.8086 mo
304.688 42.8086 305.834 43.3242 306.051 44.4766 cv
306.267 45.6279 306.171 46.1982 306.171 46.1982 cv
306.171 46.1982 305.354 45.4736 304.973 44.4268 cv
304.592 43.3789 304.688 42.8086 304.688 42.8086 cv
cp
f
297.033 40.3896 mo
297.033 40.3896 298.45 41.0283 298.718 42.4531 cv
298.986 43.877 298.867 44.583 298.867 44.583 cv
298.867 44.583 297.856 43.6865 297.385 42.3916 cv
296.914 41.0957 297.033 40.3896 297.033 40.3896 cv
cp
f
296.144 44.1699 mo
296.144 44.1699 297.693 44.0547 298.608 45.1797 cv
299.523 46.3037 299.756 46.9805 299.756 46.9805 cv
299.756 46.9805 298.44 46.6748 297.408 45.7617 cv
296.376 44.8477 296.144 44.1699 296.144 44.1699 cv
cp
f
299.883 42.2676 mo
299.883 42.2676 301.146 43.1719 301.129 44.6211 cv
301.111 46.0703 300.855 46.7393 300.855 46.7393 cv
300.855 46.7393 300.041 45.6621 299.834 44.2988 cv
299.627 42.9365 299.883 42.2676 299.883 42.2676 cv
cp
f
304.876 61.624 mo
304.876 61.624 306.14 62.5283 306.122 63.9775 cv
306.105 65.4268 305.85 66.0957 305.85 66.0957 cv
305.85 66.0957 305.035 65.0186 304.828 63.6553 cv
304.62 62.293 304.876 61.624 304.876 61.624 cv
cp
f
308.438 62.709 mo
308.438 62.709 308.879 64.1992 307.974 65.332 cv
307.067 66.4639 306.455 66.834 306.455 66.834 cv
306.455 66.834 306.476 65.4824 307.15 64.2813 cv
307.826 63.0791 308.438 62.709 308.438 62.709 cv
cp
f
305.968 58.0049 mo
305.968 58.0049 307.21 58.9385 307.158 60.3877 cv
307.106 61.8359 306.835 62.499 306.835 62.499 cv
306.835 62.499 306.046 61.4023 305.871 60.0342 cv
305.696 58.667 305.968 58.0049 305.968 58.0049 cv
cp
f
316.517 48.5713 mo
316.517 48.5713 317.759 49.5059 317.707 50.9541 cv
317.655 52.4033 317.384 53.0654 317.384 53.0654 cv
317.384 53.0654 316.595 51.9688 316.42 50.6016 cv
316.245 49.2344 316.517 48.5713 316.517 48.5713 cv
cp
.619608 .866667 .156863 rgb
f
320.753 49.4785 mo
320.753 49.4785 321.337 50.918 320.547 52.1338 cv
319.757 53.3496 319.184 53.7773 319.184 53.7773 cv
319.184 53.7773 319.071 52.4316 319.625 51.1689 cv
320.179 49.9063 320.753 49.4785 320.753 49.4785 cv
cp
f
365.55 43.9121 mo
365.55 43.9121 366.63 44.3633 366.861 45.4316 cv
367.092 46.499 367.017 47.0332 367.017 47.0332 cv
367.017 47.0332 366.237 46.3789 365.855 45.4121 cv
365.475 44.4453 365.55 43.9121 365.55 43.9121 cv
cp
.745098 .937255 .196078 rgb
f
367.229 41.5586 mo
367.229 41.5586 368.481 42.4795 368.444 43.9287 cv
368.408 45.3779 368.144 46.043 368.144 46.043 cv
368.144 46.043 367.344 44.9551 367.154 43.5889 cv
366.965 42.2236 367.229 41.5586 367.229 41.5586 cv
cp
f
373.5 42.3262 mo
373.5 42.3262 373.859 43.6357 373.048 44.6094 cv
372.237 45.583 371.695 45.8955 371.695 45.8955 cv
371.695 45.8955 371.736 44.7158 372.348 43.6768 cv
372.958 42.6387 373.5 42.3262 373.5 42.3262 cv
cp
f
371.052 39.1748 mo
371.052 39.1748 372.194 39.9092 372.242 41.1758 cv
372.291 42.4414 372.097 43.0361 372.097 43.0361 cv
372.097 43.0361 371.339 42.1309 371.099 40.9512 cv
370.857 39.7695 371.052 39.1748 371.052 39.1748 cv
cp
f
373.771 35.54 mo
373.771 35.54 374.924 36.583 374.741 38.0215 cv
374.559 39.459 374.229 40.0947 374.229 40.0947 cv
374.229 40.0947 373.542 38.9307 373.492 37.5527 cv
373.441 36.1758 373.771 35.54 373.771 35.54 cv
cp
f
357.181 41.9785 mo
357.181 41.9785 358.729 41.8623 359.646 42.9863 cv
360.563 44.1094 360.795 44.7861 360.795 44.7861 cv
360.795 44.7861 359.479 44.4814 358.446 43.5693 cv
357.413 42.6563 357.181 41.9785 357.181 41.9785 cv
cp
f
376.016 25.6953 mo
376.016 25.6953 376.79 27.043 376.172 28.3545 cv
375.554 29.666 375.044 30.168 375.044 30.168 cv
375.044 30.168 374.75 28.8496 375.128 27.5234 cv
375.506 26.1973 376.016 25.6953 376.016 25.6953 cv
cp
f
380.426 31.7451 mo
380.426 31.7451 380.292 33.293 379.036 34.0176 cv
377.78 34.7412 377.075 34.8633 377.075 34.8633 cv
377.075 34.8633 377.587 33.6123 378.653 32.7393 cv
379.72 31.8662 380.426 31.7451 380.426 31.7451 cv
cp
f
347.797 13.2129 mo
347.797 13.2129 347.663 14.7607 346.407 15.4854 cv
345.151 16.21 344.446 16.3311 344.446 16.3311 cv
344.446 16.3311 344.958 15.0811 346.024 14.207 cv
347.092 13.334 347.797 13.2129 347.797 13.2129 cv
cp
.4 .623529 .113725 rgb
f
349.582 17.001 mo
349.582 17.001 350.338 18.3584 349.704 19.6621 cv
349.069 20.9658 348.553 21.4609 348.553 21.4609 cv
348.553 21.4609 348.276 20.1387 348.671 18.8184 cv
349.065 17.4971 349.582 17.001 349.582 17.001 cv
cp
f
344.499 18.3115 mo
344.499 18.3115 346.3 18.5635 347.068 20.0752 cv
347.836 21.5869 347.935 22.4189 347.935 22.4189 cv
347.935 22.4189 346.506 21.7441 345.552 20.4434 cv
344.597 19.1436 344.499 18.3115 344.499 18.3115 cv
cp
f
345.985 24.4072 mo
345.985 24.4072 346.208 26.2119 344.946 27.3447 cv
343.685 28.4785 342.907 28.7881 342.907 28.7881 cv
342.907 28.7881 343.189 27.2334 344.198 25.9746 cv
345.207 24.7168 345.985 24.4072 345.985 24.4072 cv
cp
f
339.945 10.6963 mo
339.945 10.6963 341.552 11.5479 341.758 13.2305 cv
341.964 14.9141 341.772 15.7295 341.772 15.7295 cv
341.772 15.7295 340.66 14.6074 340.207 13.0596 cv
339.753 11.5117 339.945 10.6963 339.945 10.6963 cv
cp
f
342.238 9.51367 mo
342.238 9.51367 343.594 10.7246 343.391 12.4082 cv
343.187 14.0918 342.806 14.8379 342.806 14.8379 cv
342.806 14.8379 341.994 13.4814 341.925 11.8701 cv
341.856 10.2588 342.238 9.51367 342.238 9.51367 cv
cp
f
331.573 9.54004 mo
331.573 9.54004 333.386 9.38867 334.469 10.6934 cv
335.551 11.998 335.83 12.7881 335.83 12.7881 cv
335.83 12.7881 334.288 12.4443 333.07 11.3867 cv
331.853 10.3291 331.573 9.54004 331.573 9.54004 cv
cp
f
337.852 8.58789 mo
337.852 8.58789 338.766 10.1592 338.052 11.6973 cv
337.338 13.2354 336.744 13.8262 336.744 13.8262 cv
336.744 13.8262 336.392 12.2852 336.825 10.7314 cv
337.258 9.17871 337.852 8.58789 337.852 8.58789 cv
cp
f
330.208 14.625 mo
330.208 14.625 331.559 14.0723 332.702 14.8096 cv
333.846 15.5479 334.25 16.085 334.25 16.085 cv
334.25 16.085 332.986 16.1943 331.799 15.6777 cv
330.612 15.1621 330.208 14.625 330.208 14.625 cv
cp
f
350.691 8.64258 mo
350.691 8.64258 351.646 9.74707 351.311 11.0654 cv
350.976 12.3848 350.596 12.9395 350.596 12.9395 cv
350.596 12.9395 350.09 11.7764 350.2 10.4863 cv
350.312 9.19727 350.691 8.64258 350.691 8.64258 cv
cp
f
327.296 17.3223 mo
327.296 17.3223 328.28 16.2451 329.63 16.4238 cv
330.979 16.6025 331.573 16.916 331.573 16.916 cv
331.573 16.916 330.478 17.5547 329.184 17.5947 cv
327.891 17.6357 327.296 17.3223 327.296 17.3223 cv
cp
f
323.402 19.6738 mo
323.402 19.6738 324.771 20.1807 325.114 21.4971 cv
325.457 22.8145 325.392 23.4834 325.392 23.4834 cv
325.392 23.4834 324.387 22.709 323.861 21.5264 cv
323.336 20.3438 323.402 19.6738 323.402 19.6738 cv
cp
f
327.231 21.6045 mo
327.231 21.6045 327.577 23.0225 326.678 24.0439 cv
325.777 25.0645 325.187 25.3848 325.187 25.3848 cv
325.187 25.3848 325.267 24.1191 325.953 23.0215 cv
326.64 21.9248 327.231 21.6045 327.231 21.6045 cv
cp
f
347.91 26.2793 mo
347.91 26.2793 347.624 27.7109 346.376 28.2549 cv
345.129 28.7988 344.458 28.8379 344.458 28.8379 cv
344.458 28.8379 345.066 27.7246 346.152 27.0225 cv
347.239 26.3193 347.91 26.2793 347.91 26.2793 cv
cp
f
344.639 29.7637 mo
344.639 29.7637 343.796 30.9551 342.435 30.9453 cv
341.074 30.9355 340.445 30.6992 340.445 30.6992 cv
340.445 30.6992 341.453 29.9287 342.731 29.7285 cv
344.01 29.5273 344.639 29.7637 344.639 29.7637 cv
cp
f
346.734 7.73535 mo
346.734 7.73535 347.016 9.16797 346.07 10.1465 cv
345.125 11.126 344.52 11.418 344.52 11.418 cv
344.52 11.418 344.657 10.1572 345.394 9.09277 cv
346.13 8.02832 346.734 7.73535 346.734 7.73535 cv
cp
f
373.95 22.7734 mo
373.95 22.7734 375.101 23.8193 374.915 25.2568 cv
374.729 26.6943 374.397 27.3291 374.397 27.3291 cv
374.397 27.3291 373.714 26.1641 373.666 24.7861 cv
373.619 23.4082 373.95 22.7734 373.95 22.7734 cv
cp
.745098 .937255 .196078 rgb
f
369.661 45.1035 mo
369.661 45.1035 369.921 46.6357 368.887 47.6523 cv
367.853 48.668 367.2 48.9629 367.2 48.9629 cv
367.2 48.9629 367.382 47.624 368.195 46.5107 cv
369.009 45.3975 369.661 45.1035 369.661 45.1035 cv
cp
f
319.316 47.209 mo
319.316 47.209 320.201 48.4863 319.696 49.8447 cv
319.191 51.2041 318.726 51.748 318.726 51.748 cv
318.726 51.748 318.322 50.459 318.586 49.1055 cv
318.851 47.752 319.316 47.209 319.316 47.209 cv
cp
.619608 .866667 .156863 rgb
f
311.783 53.4219 mo
311.783 53.4219 313.287 53.8135 313.79 55.1729 cv
314.293 56.5322 314.294 57.248 314.294 57.248 cv
314.294 57.248 313.147 56.5342 312.466 55.3359 cv
311.784 54.1377 311.783 53.4219 311.783 53.4219 cv
cp
f
312.521 50.3936 mo
312.521 50.3936 313.614 51.124 313.638 52.3496 cv
313.662 53.5742 313.464 54.1465 313.464 54.1465 cv
313.464 54.1465 312.747 53.2578 312.535 52.1123 cv
312.324 50.9658 312.521 50.3936 312.521 50.3936 cv
cp
f
315.152 44.9619 mo
315.152 44.9619 315.578 46.2051 314.854 47.1934 cv
314.131 48.1826 313.626 48.5176 313.626 48.5176 cv
313.626 48.5176 313.595 47.376 314.121 46.3359 cv
314.648 45.2969 315.152 44.9619 315.152 44.9619 cv
cp
f
310.617 49.7246 mo
310.617 49.7246 311.311 50.8398 310.828 51.9658 cv
310.345 53.0918 309.929 53.5313 309.929 53.5313 cv
309.929 53.5313 309.642 52.4268 309.921 51.2949 cv
310.201 50.1641 310.617 49.7246 310.617 49.7246 cv
cp
f
351.462 57.0723 mo
351.462 57.0723 352.155 58.1875 351.673 59.3135 cv
351.189 60.4395 350.773 60.8789 350.773 60.8789 cv
350.773 60.8789 350.486 59.7744 350.766 58.6426 cv
351.046 57.5117 351.462 57.0723 351.462 57.0723 cv
cp
f
348.02 57.7598 mo
348.02 57.7598 349.288 58.1016 349.703 59.2549 cv
350.119 60.4072 350.114 61.0127 350.114 61.0127 cv
350.114 61.0127 349.15 60.4004 348.583 59.3828 cv
348.016 58.3643 348.02 57.7598 348.02 57.7598 cv
cp
f
348.906 55.1631 mo
348.906 55.1631 350.001 55.6982 350.177 56.8213 cv
350.353 57.9443 350.242 58.4941 350.242 58.4941 cv
350.242 58.4941 349.472 57.7676 349.134 56.7402 cv
348.796 55.7139 348.906 55.1631 348.906 55.1631 cv
cp
f
354.975 58.5596 mo
354.975 58.5596 355.443 59.6855 354.833 60.6445 cv
354.223 61.6025 353.775 61.9434 353.775 61.9434 cv
353.775 61.9434 353.679 60.8887 354.104 59.8945 cv
354.528 58.9004 354.975 58.5596 354.975 58.5596 cv
cp
f
352.87 55.1318 mo
352.87 55.1318 353.938 55.7207 354.056 56.8516 cv
354.175 57.9824 354.036 58.5264 354.036 58.5264 cv
354.036 58.5264 353.304 57.7607 353.018 56.7188 cv
352.732 55.6758 352.87 55.1318 352.87 55.1318 cv
cp
f
349.051 64.2441 mo
349.051 64.2441 350.118 64.833 350.236 65.9639 cv
350.355 67.0938 350.218 67.6387 350.218 67.6387 cv
350.218 67.6387 349.484 66.873 349.199 65.8311 cv
348.913 64.7881 349.051 64.2441 349.051 64.2441 cv
cp
.356863 .537255 .0980392 rgb
f
352.989 64.5361 mo
352.989 64.5361 353.254 65.7256 352.484 66.5625 cv
351.715 67.3994 351.215 67.6563 351.215 67.6563 cv
351.215 67.6563 351.305 66.6006 351.897 65.6963 cv
352.49 64.792 352.989 64.5361 352.989 64.5361 cv
cp
f
358.583 64.3809 mo
358.583 64.3809 358.847 65.5713 358.077 66.4082 cv
357.308 67.2441 356.809 67.501 356.809 67.501 cv
356.809 67.501 356.897 66.4453 357.49 65.541 cv
358.084 64.6377 358.583 64.3809 358.583 64.3809 cv
cp
f
357.979 62.2334 mo
357.979 62.2334 358.339 63.3984 357.64 64.2939 cv
356.94 65.1904 356.463 65.4863 356.463 65.4863 cv
356.463 65.4863 356.467 64.4268 356.984 63.4785 cv
357.503 62.5293 357.979 62.2334 357.979 62.2334 cv
cp
f
337.622 42.8945 mo
337.859 40.6641 342.698 32.0166 351.038 32.7422 cv
359.377 33.4668 362.459 38.1807 361.733 44.5254 cv
361.009 50.8711 359.377 55.7656 354.845 57.5781 cv
350.313 59.3916 335.81 59.9355 337.622 42.8945 cv
cp
.682353 .917647 .172549 rgb
f
340.088 42.8018 mo
340.264 41.1533 343.842 34.7578 350.01 35.2939 cv
356.177 35.8301 358.455 39.3164 357.919 44.0088 cv
357.383 48.7012 356.177 52.3203 352.825 53.6611 cv
349.473 55.002 338.748 55.4043 340.088 42.8018 cv
cp
.745098 .937255 .196078 rgb
f
343.104 42.8779 mo
343.218 41.8057 345.545 37.6475 349.556 37.9961 cv
353.566 38.3447 355.048 40.6113 354.699 43.6631 cv
354.351 46.7148 353.566 49.0684 351.387 49.9404 cv
349.207 50.8125 342.232 51.0732 343.104 42.8779 cv
cp
.796078 1 .207843 rgb
f
346.715 40.9238 mo
346.715 40.9238 347.918 41.5615 348.073 42.8223 cv
348.228 44.083 348.084 44.6934 348.084 44.6934 cv
348.084 44.6934 347.25 43.8525 346.911 42.6934 cv
346.571 41.5342 346.715 40.9238 346.715 40.9238 cv
cp
.682353 .917647 .172549 rgb
f
348.795 39.1006 mo
348.795 39.1006 349.69 40.127 349.383 41.3594 cv
349.075 42.5918 348.723 43.1104 348.723 43.1104 cv
348.723 43.1104 348.245 42.0273 348.344 40.8232 cv
348.442 39.6191 348.795 39.1006 348.795 39.1006 cv
cp
f
352.27 43.4834 mo
352.27 43.4834 352.434 44.8359 351.487 45.6826 cv
350.541 46.5293 349.957 46.7607 349.957 46.7607 cv
349.957 46.7607 350.171 45.5967 350.929 44.6553 cv
351.687 43.7148 352.27 43.4834 352.27 43.4834 cv
cp
f
367.995 29.3164 mo
367.995 29.3164 368.198 30.9941 367.023 32.0459 cv
365.849 33.0967 365.124 33.3838 365.124 33.3838 cv
365.124 33.3838 365.39 31.9385 366.33 30.7705 cv
367.271 29.6025 367.995 29.3164 367.995 29.3164 cv
cp
.619608 .866667 .156863 rgb
f
336.864 20.7402 mo
336.864 20.7402 337.067 22.418 335.893 23.4697 cv
334.718 24.5205 333.993 24.8076 333.993 24.8076 cv
333.993 24.8076 334.259 23.3623 335.199 22.1943 cv
336.14 21.0264 336.864 20.7402 336.864 20.7402 cv
cp
f
364.374 27.6904 mo
364.374 27.6904 365.623 28.8291 365.418 30.3926 cv
365.214 31.9561 364.853 32.6455 364.853 32.6455 cv
364.853 32.6455 364.11 31.377 364.062 29.8789 cv
364.012 28.3799 364.374 27.6904 364.374 27.6904 cv
cp
f
361.48 34.5625 mo
361.48 34.5625 362.643 34.6035 363.231 35.5137 cv
363.819 36.4248 363.937 36.9473 363.937 36.9473 cv
363.937 36.9473 362.983 36.6123 362.291 35.8486 cv
361.598 35.085 361.48 34.5625 361.48 34.5625 cv
cp
f
185.422 118.665 mo
185.422 118.665 189.521 115.423 195.72 114.439 cv
201.919 113.456 207.677 115.914 209.222 116.968 cv
210.767 118.021 212.046 118.284 212.769 118.776 cv
213.196 119.067 212.242 119.364 209.977 119.118 cv
207.142 118.811 207.528 118.763 205.579 118.871 cv
203.438 118.99 203.042 120.76 198.993 122.122 cv
196.599 122.927 193.966 122.68 194.475 122.305 cv
195.313 121.688 196.193 121.094 196.02 119.706 cv
195.846 118.319 194.466 119.171 190.698 119.917 cv
188.381 120.376 184.591 119.118 185.422 118.665 cv
cp
.129412 .129412 .129412 rgb
f
196.313 82.1504 mo
185.845 81.8916 170.98 76.8574 158.04 65.8701 cv
142.403 52.5947 146.235 29.3232 153.39 19.3555 cv
160.543 9.38867 173.42 -3.90137 204.54 1.08203 cv
235.659 6.06543 248.894 27.6621 247.82 42.6133 cv
246.747 57.5645 223.14 82.8154 196.313 82.1504 cv
cp
.152941 .356863 .113725 rgb
f
193.443 69.1299 mo
184.897 68.9229 172.761 64.915 162.195 56.165 cv
149.428 45.5928 152.557 27.0605 158.398 19.123 cv
164.239 11.1855 174.752 .602539 200.16 4.57129 cv
225.568 8.54004 236.374 25.7383 235.498 37.6445 cv
234.622 49.5508 215.347 69.6582 193.443 69.1299 cv
cp
.219608 .443137 .180392 rgb
f
192.722 52.7822 mo
186.698 52.6328 178.145 49.7363 170.698 43.4141 cv
161.7 35.7744 163.906 22.3828 168.022 16.6475 cv
172.139 10.9121 179.549 3.26465 197.456 6.13281 cv
215.363 9 222.979 21.4277 222.361 30.0313 cv
221.743 38.6338 208.159 53.1641 192.722 52.7822 cv
cp
.301961 .611765 .247059 rgb
f
185.275 118.776 mo
185.189 118.679 187.319 117.699 187.961 114.721 cv
190.447 103.186 192.064 74.668 190.7 72.8486 cv
188.984 70.5605 175.625 67.9639 170.475 58.5225 cv
165.326 49.082 163.868 31.9072 166.872 30.9678 cv
167.684 30.7139 166.314 37.3496 170.581 47.7783 cv
171.732 50.5928 174.979 58.8154 180.167 62.1045 cv
186.065 65.8438 187.259 65.2744 189.745 63.8594 cv
191.069 63.1055 188.067 58.1016 185.752 46.7021 cv
184.155 38.832 184.069 22.7949 186.611 22.3857 cv
187.224 22.2861 186.325 33.542 187.755 33.542 cv
189.186 33.542 199.18 19.2842 200.403 20.3418 cv
200.403 20.3418 193.275 33.1494 190.7 36.2969 cv
188.125 39.4434 189.436 42.6621 191.069 51.3076 cv
192.499 58.876 192.504 61.7354 195.651 61.7354 cv
198.798 61.7354 199.924 56.5996 200.813 47.4619 cv
201.919 36.0859 200.171 33.0918 200.629 32.3984 cv
201.357 31.292 204.714 42.5762 204.151 49.1875 cv
203.13 61.209 200.364 63.6631 201.776 64.4531 cv
202.525 64.8721 209.464 61.4707 212.61 50.8857 cv
215.758 40.3008 210.904 26.7832 211.5 26.3906 cv
212.61 25.6572 216.508 33.2949 217.562 40.1943 cv
218.387 45.5967 217.676 53.667 214.243 59.1025 cv
210.811 64.5381 206.128 66.877 208.081 69.0566 cv
208.756 69.8096 215.516 68.668 220.143 64.3164 cv
225.462 59.3125 226.948 56.1426 227.234 54.4258 cv
227.521 52.71 221.301 42.5117 223.229 40.6943 cv
223.583 40.3604 227.59 50.043 229.307 50.043 cv
231.023 50.043 233.783 39.2988 234.958 39.5498 cv
237.598 40.1152 230.867 60.3398 224.659 66.1553 cv
214.928 75.2715 206.04 77.123 206.04 78.2676 cv
206.04 79.4111 208.607 114.194 212.769 118.776 cv
212.979 119.008 210.26 118.906 207.87 118.302 cv
206.613 117.984 204.33 117.887 203.349 118.516 cv
197.924 121.992 197.633 121.604 195.967 121.726 cv
195.493 121.761 197.874 118.831 195.546 118.46 cv
194.478 118.29 192.912 118.092 190.332 118.934 cv
188.715 119.462 185.927 119.509 185.275 118.776 cv
cp
.376471 .239216 .192157 rgb
f
235.288 39.8037 mo
235.2 39.6729 235.095 39.5791 234.958 39.5498 cv
233.855 39.3145 231.357 48.7607 229.635 49.9248 cv
229.023 50.7578 228.375 51.291 227.973 51.167 cv
227.06 50.8857 225.585 47.0234 224.672 44.5654 cv
224.138 43.1279 223.649 41.7988 223.07 40.8906 cv
221.687 43.1465 227.511 52.7637 227.234 54.4258 cv
226.948 56.1426 225.462 59.3125 220.143 64.3164 cv
218.75 65.626 217.164 66.6396 215.609 67.4043 cv
214.94 67.7578 214.259 68.0469 213.574 68.2793 cv
213.439 68.3271 li
213.343 68.3584 213.246 68.4014 213.148 68.4297 cv
213.058 68.4561 li
212.206 68.7432 211.412 68.9502 210.714 69.082 cv
206.657 70.0244 206.141 69.1553 205.781 67.5996 cv
205.359 65.7734 208.941 63.0352 212.172 58.2598 cv
215.402 53.4844 216.736 47.6553 216.525 42.3232 cv
216.314 36.9902 214.278 32.1357 213.436 30.0293 cv
212.913 28.7217 212.416 27.3887 211.779 26.3633 cv
211.674 26.333 211.579 26.3379 211.5 26.3906 cv
210.904 26.7832 215.758 40.3008 212.61 50.8857 cv
210.674 57.4004 207.304 61.1865 204.822 63.043 cv
204.516 63.3086 204.209 63.5264 203.904 63.6738 cv
203.885 63.6836 li
203.111 64.1592 202.495 64.4043 202.118 64.4629 cv
199.769 65.3516 199.604 64.5645 199.952 62.8242 cv
200.374 60.7168 202.48 51.0264 202.726 45.8301 cv
202.97 40.6328 201.217 33.8213 200.966 32.4775 cv
200.827 32.3135 200.711 32.2734 200.629 32.3984 cv
200.171 33.0918 201.919 36.0859 200.813 47.4619 cv
200.131 54.4766 199.305 59.1211 197.536 60.9063 cv
197.523 60.9307 li
194.708 65.1816 192.122 63.9473 190.121 56.3633 cv
188.12 48.7793 187.277 38.877 187.698 37.1914 cv
188.12 35.5068 195.809 26.6582 197.523 24.2354 cv
198.369 23.04 199.423 21.5371 200.11 20.3105 cv
198.458 20.7588 192.273 29.1436 189.259 32.3271 cv
189.258 32.3271 li
187.506 34.3105 186.223 35.7168 186.013 34.0479 cv
185.802 32.3789 186.223 25.3945 186.611 22.3857 cv
184.069 22.7949 184.155 38.832 185.752 46.7021 cv
187.641 56.0049 189.986 61.0459 190.065 62.9961 cv
190.066 63 li
191.323 67.6865 184.222 67.9502 177.585 63 cv
170.949 58.0488 169.159 48.3574 167.263 42.459 cv
165.98 38.4688 166.383 34.0498 166.519 31.1807 cv
164 33.3496 165.543 49.4795 170.475 58.5225 cv
175.625 67.9639 188.984 70.5605 190.7 72.8486 cv
192.064 74.668 190.447 103.186 187.961 114.721 cv
187.319 117.699 185.189 118.679 185.275 118.776 cv
185.927 119.509 188.715 119.462 190.332 118.934 cv
192.912 118.092 194.478 118.29 195.546 118.46 cv
197.711 118.805 195.807 121.359 195.91 121.688 cv
197.563 120.434 198.953 118.872 199.602 117.179 cv
200.865 113.878 200.374 108.119 200.436 100.816 cv
200.497 93.5127 200.865 84.5938 200.942 79.6777 cv
201.019 74.7627 202.34 73.8496 209.222 71.8828 cv
216.104 69.917 219.686 66.8271 224.18 62.4727 cv
228.675 58.1191 231.272 49.6924 232.958 45.7598 cv
233.897 43.5684 234.835 41.4219 235.288 39.8037 cv
cp
.423529 .282353 .235294 rgb
f
211.68 72.9365 mo
203.042 76.7285 204.025 76.3779 203.675 78.3438 cv
203.323 80.3105 203.604 93.793 204.307 101.167 cv
205.009 108.541 205.22 112.052 207.888 114.791 cv
209.346 116.286 210.834 117.641 212.585 118.871 cv
212.739 118.853 212.81 118.82 212.769 118.776 cv
208.607 114.194 206.04 79.4111 206.04 78.2676 cv
206.04 77.123 214.928 75.2715 224.659 66.1553 cv
229.554 61.5703 234.771 48.0313 235.465 42.2305 cv
234.177 45.5635 230.395 55.2656 228.604 58.9619 cv
226.428 63.4561 220.317 69.1445 211.68 72.9365 cv
cp
.341176 .215686 .176471 rgb
f
192.017 59.3125 mo
192.759 60.4854 193.61 61.3936 194.401 61.5117 cv
192.475 60.7227 192.276 57.6992 191.069 51.3076 cv
189.436 42.6621 188.125 39.4434 190.7 36.2969 cv
191.898 34.832 194.083 31.2744 196.077 27.8896 cv
193.04 31.6816 189.231 36.6035 188.857 37.8945 cv
188.225 40.0713 190.683 57.2061 192.017 59.3125 cv
cp
.298039 .0901961 .0627451 rgb
f
179.728 62.9648 mo
181.277 64.0088 183.624 64.6377 185.518 64.7773 cv
184.26 64.4658 182.625 63.6631 180.167 62.1045 cv
174.979 58.8154 171.732 50.5928 170.581 47.7783 cv
170.476 47.5225 170.39 47.2783 170.291 47.0273 cv
170.383 47.2891 li
173.969 56.8545 176.287 60.6475 179.728 62.9648 cv
cp
f
198.759 32.0342 mo
194.254 23.0908 199.602 11.2988 218.352 13.6777 cv
237.102 16.0576 244.054 28.6084 240.473 36.2881 cv
236.891 43.9688 221.149 46.8154 213.265 43.6738 cv
205.381 40.5313 202.762 39.9814 198.759 32.0342 cv
cp
.345098 .698039 .282353 rgb
f
201.313 29.1494 mo
197.923 22.418 202.074 14.9063 216.188 16.6973 cv
230.3 18.4883 236.075 27.5352 233.38 33.3164 cv
230.684 39.0967 219.41 40.8574 213.476 38.4922 cv
207.542 36.127 204.326 35.1309 201.313 29.1494 cv
cp
.384314 .784314 .317647 rgb
f
143.574 35.6025 mo
138.492 24.1221 164.418 6.20313 180.641 10.2275 cv
200.063 15.0469 187.638 31.7891 170.994 39.7246 cv
156.856 46.4658 149.683 49.4063 143.574 35.6025 cv
cp
.258824 .529412 .215686 rgb
f
145.668 34.2578 mo
141.066 25.7158 162.99 10.0586 175.527 13.1699 cv
190.537 16.8936 180.887 32.1162 168.024 38.25 cv
157.098 43.459 149.473 41.3203 145.668 34.2578 cv
cp
.301961 .611765 .247059 rgb
f
150.761 29.6924 mo
147.974 23.3955 161.83 14.5322 170.727 16.7393 cv
181.378 19.3828 175.926 26.5459 166.798 30.8984 cv
159.044 34.5947 154.112 37.2627 150.761 29.6924 cv
cp
.345098 .698039 .282353 rgb
f
177.059 51.2197 mo
174.166 43.8369 186.757 40.0244 197.254 41.7197 cv
208.871 43.5957 210.135 49.2168 206.975 53.5 cv
204.646 56.6563 181.483 62.5098 177.059 51.2197 cv
cp
.301961 .611765 .247059 rgb
f
179.186 50.1729 mo
177.132 44.9316 187.132 42.2676 194.648 42.9619 cv
202.344 43.6738 201.634 48.6113 199.391 51.6523 cv
197.737 53.8936 182.327 58.1885 179.186 50.1729 cv
cp
.345098 .698039 .282353 rgb
f
181.975 49.0332 mo
180.708 45.8018 186.219 44.1328 190.813 44.875 cv
195.897 45.6963 196.577 49.7773 195.194 51.6523 cv
194.175 53.0332 183.911 53.9736 181.975 49.0332 cv
cp
.384314 .784314 .317647 rgb
f
203.523 24.1094 mo
203.523 24.1094 205.493 24.626 206.15 26.4082 cv
206.807 28.1914 206.807 29.1289 206.807 29.1289 cv
206.807 29.1289 205.306 28.1914 204.414 26.6191 cv
203.523 25.0479 203.523 24.1094 203.523 24.1094 cv
cp
.219608 .443137 .180392 rgb
f
207.333 22.2461 mo
207.333 22.2461 208.804 23.459 208.66 25.2314 cv
208.517 27.0039 208.147 27.8008 208.147 27.8008 cv
208.147 27.8008 207.241 26.4131 207.103 24.7275 cv
206.964 23.043 207.333 22.2461 207.333 22.2461 cv
cp
f
210.415 27.9199 mo
210.415 27.9199 210.422 29.8271 208.967 30.8496 cv
207.513 31.873 206.664 32.0986 206.664 32.0986 cv
206.664 32.0986 207.151 30.5146 208.358 29.3301 cv
209.565 28.1455 210.415 27.9199 210.415 27.9199 cv
cp
f
221.388 19.8525 mo
221.388 19.8525 221.977 22.2227 220.478 23.9385 cv
218.979 25.6533 217.991 26.1924 217.991 26.1924 cv
217.991 26.1924 218.116 24.0732 219.258 22.2324 cv
220.4 20.3916 221.388 19.8525 221.388 19.8525 cv
cp
f
214.678 28.6025 mo
214.678 28.6025 216.922 29.5645 217.385 31.7949 cv
217.847 34.0254 217.68 35.1377 217.68 35.1377 cv
217.68 35.1377 216.066 33.7588 215.288 31.7363 cv
214.511 29.7148 214.678 28.6025 214.678 28.6025 cv
cp
f
221.67 26.7021 mo
221.67 26.7021 222.465 29.0117 221.122 30.8525 cv
219.779 32.6924 218.844 33.3164 218.844 33.3164 cv
218.844 33.3164 218.781 31.1943 219.758 29.2598 cv
220.733 27.3262 221.67 26.7021 221.67 26.7021 cv
cp
f
213.49 19.1572 mo
213.49 19.1572 214.707 20.9453 213.988 22.8301 cv
213.269 24.7158 212.613 25.4668 212.613 25.4668 cv
212.613 25.4668 212.067 23.667 212.451 21.7871 cv
212.836 19.9072 213.49 19.1572 213.49 19.1572 cv
cp
f
223.447 33.7422 mo
223.447 33.7422 223.205 35.2383 221.932 35.8516 cv
220.657 36.4648 219.962 36.5313 219.962 36.5313 cv
219.962 36.5313 220.551 35.3525 221.651 34.5811 cv
222.752 33.8086 223.447 33.7422 223.447 33.7422 cv
cp
f
218.58 18.4014 mo
218.58 18.4014 218.835 19.8955 217.828 20.8887 cv
216.822 21.8809 216.186 22.1699 216.186 22.1699 cv
216.186 22.1699 216.36 20.8633 217.152 19.7764 cv
217.943 18.6895 218.58 18.4014 218.58 18.4014 cv
cp
f
190.771 47.0273 mo
190.771 47.0273 191.026 48.5215 190.02 49.5137 cv
189.013 50.5068 188.376 50.7949 188.376 50.7949 cv
188.376 50.7949 188.552 49.4893 189.343 48.4023 cv
190.135 47.3154 190.771 47.0273 190.771 47.0273 cv
cp
f
186.417 45.5967 mo
186.417 45.5967 187.747 46.3242 187.9 47.7295 cv
188.053 49.1357 187.884 49.8125 187.884 49.8125 cv
187.884 49.8125 186.969 48.8643 186.609 47.5693 cv
186.249 46.2734 186.417 45.5967 186.417 45.5967 cv
cp
f
168.844 64.9004 mo
168.844 64.9004 170.706 64.8672 171.725 66.2734 cv
172.745 67.6797 172.977 68.5059 172.977 68.5059 cv
172.977 68.5059 171.423 68.0518 170.25 66.8887 cv
169.076 65.7266 168.844 64.9004 168.844 64.9004 cv
cp
f
183.07 71.5352 mo
183.07 71.5352 184.349 72.8896 183.995 74.5898 cv
183.641 76.291 183.187 77.0186 183.187 77.0186 cv
183.187 77.0186 182.477 75.5635 182.546 73.9131 cv
182.616 72.2627 183.07 71.5352 183.07 71.5352 cv
cp
f
235.816 46.1689 mo
235.816 46.1689 237.096 47.5234 236.742 49.2236 cv
236.389 50.9248 235.934 51.6523 235.934 51.6523 cv
235.934 51.6523 235.224 50.1982 235.293 48.5479 cv
235.362 46.8975 235.816 46.1689 235.816 46.1689 cv
cp
f
239.039 48.0645 mo
239.039 48.0645 239.529 50.1211 238.217 51.5938 cv
236.905 53.0664 236.046 53.5254 236.046 53.5254 cv
236.046 53.5254 236.172 51.6914 237.176 50.1074 cv
238.18 48.5234 239.039 48.0645 239.039 48.0645 cv
cp
f
152.056 50.1729 mo
152.056 50.1729 154.098 50.7217 154.768 52.5771 cv
155.438 54.4316 155.432 55.4053 155.432 55.4053 cv
155.432 55.4053 153.879 54.4219 152.965 52.7842 cv
152.05 51.1475 152.056 50.1729 152.056 50.1729 cv
cp
f
179.5 73.2891 mo
179.5 73.2891 181.314 73.7129 181.958 75.3262 cv
182.601 76.9395 182.624 77.7969 182.624 77.7969 cv
182.624 77.7969 181.229 76.9756 180.376 75.5605 cv
179.523 74.1465 179.5 73.2891 179.5 73.2891 cv
cp
f
174.494 65.7744 mo
174.494 65.7744 175.783 67.1182 175.443 68.8213 cv
175.104 70.5244 174.655 71.2559 174.655 71.2559 cv
174.655 71.2559 173.933 69.8076 173.989 68.1563 cv
174.045 66.5059 174.494 65.7744 174.494 65.7744 cv
cp
f
168.671 70.3604 mo
168.671 70.3604 169.769 69.2676 171.191 69.5234 cv
172.613 69.7793 173.228 70.1406 173.228 70.1406 cv
173.228 70.1406 172.035 70.7637 170.661 70.7432 cv
169.287 70.7217 168.671 70.3604 168.671 70.3604 cv
cp
f
194.743 9.03223 mo
194.743 9.03223 196.098 9.94824 196.121 11.4736 cv
196.144 13 195.894 13.71 195.894 13.71 cv
195.894 13.71 195.006 12.5996 194.75 11.1709 cv
194.493 9.74316 194.743 9.03223 194.743 9.03223 cv
cp
f
202.835 10.3057 mo
202.835 10.3057 203.723 11.6797 203.146 13.0918 cv
202.57 14.5049 202.062 15.0605 202.062 15.0605 cv
202.062 15.0605 201.68 13.6914 202.003 12.2764 cv
202.326 10.8623 202.835 10.3057 202.835 10.3057 cv
cp
f
188.604 6.6543 mo
188.604 6.6543 189.493 8.02832 188.916 9.44043 cv
188.339 10.8535 187.831 11.4102 187.831 11.4102 cv
187.831 11.4102 187.449 10.04 187.772 8.625 cv
188.096 7.21094 188.604 6.6543 188.604 6.6543 cv
cp
f
184.324 7.72852 mo
184.324 7.72852 185.601 7.93164 186.127 9.0166 cv
186.654 10.1025 186.712 10.6953 186.712 10.6953 cv
186.712 10.6953 185.705 10.1963 185.044 9.25879 cv
184.382 8.32129 184.324 7.72852 184.324 7.72852 cv
cp
f
198.339 10.5537 mo
198.339 10.5537 198.742 12.1387 197.745 13.2939 cv
196.747 14.4482 196.088 14.8125 196.088 14.8125 cv
196.088 14.8125 196.164 13.3936 196.922 12.1563 cv
197.68 10.918 198.339 10.5537 198.339 10.5537 cv
cp
f
193.26 13.3672 mo
193.26 13.3672 194.809 13.8945 195.232 15.3604 cv
195.656 16.8262 195.603 17.5771 195.603 17.5771 cv
195.603 17.5771 194.454 16.7393 193.83 15.4297 cv
193.206 14.1191 193.26 13.3672 193.26 13.3672 cv
cp
f
198.688 16.5273 mo
198.688 16.5273 199.263 18.416 198.125 19.8633 cv
196.987 21.3096 196.212 21.7861 196.212 21.7861 cv
196.212 21.7861 196.225 20.0713 197.069 18.5371 cv
197.914 17.0039 198.688 16.5273 198.688 16.5273 cv
cp
f
192.133 22.2588 mo
192.133 22.2588 192.941 24.0586 191.996 25.6387 cv
191.05 27.2178 190.342 27.7881 190.342 27.7881 cv
190.342 27.7881 190.137 26.085 190.781 24.457 cv
191.425 22.8291 192.133 22.2588 192.133 22.2588 cv
cp
f
198.611 34.2578 mo
198.611 34.2578 199.42 36.0586 198.474 37.6377 cv
197.528 39.2178 196.82 39.7881 196.82 39.7881 cv
196.82 39.7881 196.615 38.085 197.259 36.457 cv
197.903 34.8281 198.611 34.2578 198.611 34.2578 cv
cp
f
194.182 34.4316 mo
194.182 34.4316 195.888 35.3115 196.126 37.0869 cv
196.363 38.8613 196.17 39.7246 196.17 39.7246 cv
196.17 39.7246 194.982 38.5527 194.485 36.9238 cv
193.989 35.2949 194.182 34.4316 194.182 34.4316 cv
cp
f
179 35.6025 mo
179 35.6025 180.706 36.4824 180.944 38.2578 cv
181.181 40.0332 180.988 40.8965 180.988 40.8965 cv
180.988 40.8965 179.8 39.7246 179.303 38.0947 cv
178.807 36.4658 179 35.6025 179 35.6025 cv
cp
f
175.332 37.04 mo
175.332 37.04 176.831 37.0137 177.652 38.1465 cv
178.473 39.2793 178.66 39.9443 178.66 39.9443 cv
178.66 39.9443 177.409 39.5781 176.464 38.6416 cv
175.519 37.7051 175.332 37.04 175.332 37.04 cv
cp
f
196.903 7.06738 mo
196.903 7.06738 197.862 8.06641 197.609 9.33203 cv
197.357 10.5986 197.024 11.1426 197.024 11.1426 cv
197.024 11.1426 196.487 10.0654 196.529 8.83887 cv
196.57 7.61133 196.903 7.06738 196.903 7.06738 cv
cp
f
174.805 41.9551 mo
174.805 41.9551 175.78 40.8154 177.172 40.9521 cv
178.564 41.0898 179.186 41.3906 179.186 41.3906 cv
179.186 41.3906 178.083 42.084 176.754 42.1699 cv
175.427 42.2568 174.805 41.9551 174.805 41.9551 cv
cp
f
159.544 22.4219 mo
159.544 22.4219 161.217 23.3379 161.41 25.1064 cv
161.602 26.875 161.389 27.7275 161.389 27.7275 cv
161.389 27.7275 160.238 26.5342 159.785 24.9043 cv
159.332 23.2744 159.544 22.4219 159.544 22.4219 cv
cp
f
164.261 20.877 mo
164.261 20.877 165.016 22.6279 164.078 24.1406 cv
163.141 25.6523 162.448 26.1924 162.448 26.1924 cv
162.448 26.1924 162.275 24.5439 162.922 22.9805 cv
163.569 21.417 164.261 20.877 164.261 20.877 cv
cp
f
161.769 18.4678 mo
161.769 18.4678 162.851 19.6943 162.49 21.1768 cv
162.129 22.6602 161.708 23.2852 161.708 23.2852 cv
161.708 23.2852 161.128 21.9873 161.238 20.54 cv
161.349 19.0938 161.769 18.4678 161.769 18.4678 cv
cp
f
152.849 27.4502 mo
152.849 27.4502 154.483 27.5088 155.311 28.791 cv
156.139 30.0732 156.303 30.8086 156.303 30.8086 cv
156.303 30.8086 154.962 30.3359 153.988 29.2607 cv
153.013 28.1855 152.849 27.4502 152.849 27.4502 cv
cp
f
155.582 24.3418 mo
155.582 24.3418 156.9 25.3115 156.862 26.8369 cv
156.824 28.3623 156.545 29.0625 156.545 29.0625 cv
156.545 29.0625 155.703 27.917 155.503 26.4795 cv
155.304 25.043 155.582 24.3418 155.582 24.3418 cv
cp
f
159.371 27.8262 mo
159.371 27.8262 159.854 29.3896 158.915 30.5918 cv
157.976 31.7949 157.336 32.1924 157.336 32.1924 cv
157.336 32.1924 157.341 30.7705 158.036 29.4971 cv
158.731 28.2236 159.371 27.8262 159.371 27.8262 cv
cp
f
168.024 22.3154 mo
168.024 22.3154 169.577 21.7988 170.8 22.7119 cv
172.023 23.624 172.434 24.2549 172.434 24.2549 cv
172.434 24.2549 171.013 24.2813 169.724 23.6143 cv
168.436 22.9463 168.024 22.3154 168.024 22.3154 cv
cp
f
167 25.2266 mo
167 25.2266 167.679 26.7148 166.903 28.0293 cv
166.127 29.3428 165.543 29.8184 165.543 29.8184 cv
165.543 29.8184 165.365 28.4082 165.891 27.0557 cv
166.417 25.7031 167 25.2266 167 25.2266 cv
cp
f
169.787 18.2012 mo
169.787 18.2012 171.344 18.7012 171.793 20.1592 cv
172.242 21.6172 172.201 22.3701 172.201 22.3701 cv
172.201 22.3701 171.038 21.5518 170.392 20.2529 cv
169.746 18.9531 169.787 18.2012 169.787 18.2012 cv
cp
f
193.684 65.6328 mo
193.684 65.6328 197.144 70.1982 196.933 76.5879 cv
196.722 82.9785 196.077 90.3525 196.077 90.3525 cv
196.077 90.3525 195.539 80.3262 195.498 75.543 cv
195.458 70.7598 193.684 65.6328 193.684 65.6328 cv
cp
.376471 .239216 .192157 rgb
f
199.391 61.8672 mo
199.391 61.8672 196.321 66.6777 196.943 69.1396 cv
197.564 71.6025 197.737 77.3955 197.737 77.3955 cv
197.737 77.3955 198.217 71.8477 198.357 69.3203 cv
198.498 66.792 199.391 61.8672 199.391 61.8672 cv
cp
f
190.523 60.8574 mo
190.523 60.8574 191.876 65.4932 192.79 67.915 cv
193.719 70.3818 196.077 72.1641 196.077 72.1641 cv
195.719 73.2891 li
195.719 73.2891 192.93 71.2568 191.736 68.5146 cv
190.542 65.7734 190.523 60.8574 190.523 60.8574 cv
cp
f
203.367 66.1602 mo
203.367 66.1602 200.058 69.8115 199.688 74.1084 cv
199.5 76.2783 199.023 83.9268 199.023 83.9268 cv
199.023 83.9268 200.795 72.6934 201.778 70.7432 cv
202.762 68.793 203.367 66.1602 203.367 66.1602 cv
cp
f
184.057 67.666 mo
184.057 67.666 188.072 67.9072 189.588 68.8066 cv
191.104 69.7061 194.688 73.7324 194.969 76.3252 cv
195.25 78.917 194.071 81.5918 194.071 81.5918 cv
194.071 81.5918 194.656 78.9043 193.702 75.9561 cv
193.081 74.0352 191.576 72.0244 189.624 70.5068 cv
187.377 68.7598 184.057 67.666 184.057 67.666 cv
cp
.513726 .368627 .32549 rgb
f
193.3 83.6807 mo
193.3 83.6807 194.896 89.6504 194.966 93.2314 cv
195.037 96.8135 193.756 103.344 194.432 106.224 cv
195.107 109.103 194.264 115.634 191.597 117.881 cv
190.598 118.723 188.225 118.513 188.225 118.513 cv
188.225 118.513 190.615 118.092 191.597 115.984 cv
192.579 113.878 193.67 108.049 193.3 105.942 cv
192.93 103.836 194.194 94.7061 194.053 92.1777 cv
193.913 89.6504 193.3 83.6807 193.3 83.6807 cv
cp
.462745 .317647 .270588 rgb
f
197.426 83.1895 mo
197.426 83.1895 197.144 89.3691 196.371 93.5127 cv
195.599 97.6563 195.72 101.108 195.038 104.245 cv
194.705 105.773 194.124 106.398 194.124 106.398 cv
193.702 107.698 li
193.702 109.523 li
193.702 109.523 196.181 106.013 196.943 102.501 cv
197.705 98.9902 196.989 95.9004 197.523 93.0215 cv
198.057 90.1416 197.426 83.1895 197.426 83.1895 cv
cp
f
198.724 75.7803 mo
198.724 75.7803 198.196 80.3105 198.407 83.1895 cv
198.618 86.0684 198.431 93.0215 198.56 94.7764 cv
198.688 96.5322 198.56 104.116 198.56 104.116 cv
198.56 104.116 199.25 97.3047 199.32 93.3018 cv
199.391 89.2988 200.434 85.5068 199.313 82.1631 cv
198.822 80.7031 198.724 75.7803 198.724 75.7803 cv
cp
.376471 .239216 .192157 rgb
f
197.737 103.063 mo
197.737 103.063 195.771 109.454 195.72 111.771 cv
195.668 114.089 194.969 116.968 194.969 116.968 cv
194.969 116.968 197.552 112.895 197.523 110.437 cv
197.494 107.979 197.737 103.063 197.737 103.063 cv
cp
f
192.649 89.1582 mo
192.649 89.1582 193.6 94.1445 193.3 95.9707 cv
193 97.7959 191.947 102.642 192.087 105.311 cv
192.228 107.979 191.104 111.385 191.104 111.385 cv
191.104 111.385 190.191 104.644 191.104 100.271 cv
192.017 95.9004 192.649 89.1582 192.649 89.1582 cv
cp
.513726 .368627 .32549 rgb
f
192.416 75.9561 mo
192.416 75.9561 194.037 79.1162 194.432 81.083 cv
194.826 83.0488 194.969 85.5068 194.969 85.5068 cv
194.969 85.5068 193.913 82.6182 193.07 80.5508 cv
192.228 78.4844 192.416 75.9561 192.416 75.9561 cv
cp
f
202.199 73.2891 mo
202.199 73.2891 202.972 71.3789 204.798 70.999 cv
206.624 70.6191 214.664 68.7139 214.664 68.7139 cv
214.664 68.7139 208.107 70.8799 206.211 71.5352 cv
204.315 72.1904 202.612 72.4912 202.199 73.2891 cv
cp
.462745 .317647 .270588 rgb
f
207.291 61.6299 mo
207.291 61.6299 205.315 63.9736 204.552 65.6328 cv
203.788 67.292 203.973 69.4775 203.394 70.7158 cv
203.061 71.4268 202.344 72.9951 202.344 72.9951 cv
202.344 72.9951 204.369 71.7168 204.817 69.6621 cv
205.265 67.6084 206.343 62.8945 207.291 61.6299 cv
cp
f
200.102 57.1797 mo
200.102 57.1797 199.253 59.0469 198.231 60.6299 cv
197.486 61.7852 196.684 62.6504 196.204 63.6582 cv
195.012 66.1602 196.077 68.082 196.077 68.082 cv
196.077 68.082 196.378 64.7979 197.523 63.5 cv
199.707 61.0244 200.102 57.1797 200.102 57.1797 cv
cp
.513726 .368627 .32549 rgb
f
22.2866 115.828 mo
22.2866 115.828 27.8672 111.808 37.4492 112.083 cv
41.2196 112.191 43.9632 111.686 46.3173 111.18 cv
49.9462 110.401 52.6497 109.621 56.7622 111.091 cv
63.5424 113.514 71.7588 115.607 72.144 115.828 cv
72.5298 116.048 68.3442 116.764 67.188 116.654 cv
66.0312 116.544 65.4805 117.149 65.3706 118.691 cv
65.3115 119.52 65.5356 120.729 65.2602 121.114 cv
64.9849 121.5 61.5703 118.951 59.8632 117.905 cv
58.1563 116.859 56.9209 116.922 55.7832 117.905 cv
54.6455 118.889 51.0518 123.207 50.6665 123.207 cv
50.2813 123.207 51.4375 119.322 50.8867 117.905 cv
50.336 116.489 48.4614 115.659 46.0405 117.37 cv
43.8003 118.953 40.0444 121.036 37.6147 121.629 cv
35.1924 122.219 33.9068 122.18 33.8516 121.886 cv
33.7964 121.592 35.6269 120.139 37.0088 118.691 cv
38.3911 117.245 37.064 116.003 34.9444 116.27 cv
32.04 116.634 30.4004 116.984 27.977 117.095 cv
25.5542 117.205 21.0425 116.572 22.2866 115.828 cv
.129412 .129412 .129412 rgb
f
.601563 61.6074 mo
-1.77539 57.9775 1.11035 5.75684 42.7061 1.58398 cv
91.5293 -3.3125 107.924 52.9268 104.955 55.5605 cv
100.627 59.3984 60.7695 59.2988 37.8599 61.0615 cv
14.9502 62.8232 2.11279 63.916 .601563 61.6074 cv
cp
.0745098 .356863 .0627451 rgb
f
13.3296 51.8809 mo
11.4722 49.0449 9.67529 12.8477 36.0913 6.99023 cv
78.3228 -2.375 92.7334 46.0869 90.4136 48.1445 cv
87.0327 51.1436 55.8901 51.0654 37.9907 52.4424 cv
20.0908 53.8193 14.5107 53.6846 13.3296 51.8809 cv
cp
.156863 .4 .0392157 rgb
f
16.7627 45.8672 mo
15.4067 43.7959 24.6499 14.5527 48.3828 12.1719 cv
76.2393 9.37793 77.9966 40.9141 76.3022 42.417 cv
73.833 44.6064 51.0918 44.5498 38.0205 45.5547 cv
24.9497 46.5605 17.625 47.1836 16.7627 45.8672 cv
cp
.2 .501961 .0509804 rgb
f
67.4082 113.404 mo
66.9487 112.805 64.9092 109.467 64.4893 107.347 cv
64.3658 106.164 63.3516 98.9795 62.8067 93.8935 cv
61.4853 81.5576 66.4966 75.1592 71.7832 67.67 cv
77.0703 60.1797 86.6094 52.8154 83.5991 50.5137 cv
81.7266 49.0821 80.5699 51.2851 72.6396 60.5361 cv
69.6919 63.9755 66.2066 66.4404 63.8286 66.1543 cv
61.3057 65.8496 56.8022 63.0869 59.4478 59.2988 cv
62.3237 55.1807 72.2242 37.711 67.3779 35.5078 cv
62.5318 33.3056 63.5298 43.7519 59.4478 50.0468 cv
57.8848 52.457 57.5401 55.3574 54.9619 56.1299 cv
54.2724 56.3369 52.9502 56.2099 52.0981 55.5605 cv
44.5327 49.791 49.3184 38.7792 45.6001 39.2597 cv
43.6172 39.5156 43.9653 47.1181 46.0405 52.0009 cv
48.2983 57.3125 52.206 57.8857 51.4375 60.4815 cv
49.3994 67.3652 41.7026 68.124 39.1816 68.1104 cv
33.8696 68.081 36.0977 45.6416 32.1323 45.6416 cv
28.167 45.6416 36.293 70.4492 29.6846 67.8057 cv
23.0762 65.1621 17.789 52.4824 15.2558 53.377 cv
11.1016 54.8447 28.7832 71.456 29.9297 73.8379 cv
32.3276 78.8203 31.7656 90.4092 31.6831 100.723 cv
31.6812 100.959 31.623 106.71 30.584 109.587 cv
29.523 112.523 22.2866 115.828 22.2866 115.828 cv
21.5888 116.764 27.2432 116.746 29.5191 116.599 cv
31.7954 116.452 36.3956 114.959 37.8804 115.986 cv
40.0376 117.481 35.0454 121.023 35.3569 121.335 cv
36.0728 122.051 41.7451 118.802 44.6636 117.149 cv
46.0708 116.353 48.5547 114.168 51.2173 116.323 cv
53.5303 118.196 50.6816 121.629 51.4375 121.629 cv
52.1533 121.629 55.8614 116.048 58.4316 116.489 cv
61.0014 116.93 64.5444 120.582 64.7647 120.509 cv
64.9849 120.436 63.3511 115.975 66.3618 116.048 cv
69.3721 116.121 72.6172 116.176 72.144 115.828 cv
71.523 115.371 68.3628 114.653 67.4082 113.404 cv
.466667 .239216 .168627 rgb
f
52.9794 105.548 mo
50.5562 100.261 54.8149 92.9922 55.7695 86.1631 cv
56.7242 79.334 61.791 72.5791 66.4169 68.834 cv
71.043 65.0889 79.854 54.7354 81.7632 52.4824 cv
82.4458 51.6777 83.0679 51.0146 83.4868 50.4405 cv
81.6782 49.1835 80.4087 51.4727 72.6396 60.5361 cv
71.3145 62.083 69.8808 63.4287 68.4878 64.42 cv
68.4825 64.4248 li
64.3252 68.3134 60.9097 69.2012 58.1196 66.7041 cv
55.3291 64.208 55.2558 62.8125 56.357 59.3613 cv
57.4585 55.9102 62.1582 50.1094 64.1406 45.1171 cv
66.0122 40.4023 67.228 36.9345 67.2348 35.4521 cv
62.5552 33.5264 63.4878 43.8164 59.4478 50.0468 cv
58.4717 51.5517 57.9707 53.249 57.1036 54.4991 cv
55.9604 56.6552 55.4761 57.0859 53.6402 57.4521 cv
51.8047 57.8194 50.336 55.9102 47.9863 52.166 cv
45.6367 48.4209 46.0771 43.5742 46.2973 40.3496 cv
46.3169 40.0635 46.3262 39.7256 46.3262 39.3594 cv
46.1284 39.2627 45.8931 39.2217 45.6001 39.2597 cv
43.6172 39.5156 43.9653 47.1181 46.0405 52.0009 cv
48.2983 57.3125 52.206 57.8857 51.4375 60.4815 cv
50.8858 62.3447 49.9126 63.7471 48.747 64.8193 cv
48.7275 64.8545 li
46.0176 69.2275 37.4864 71.7715 35.6504 68.1729 cv
34.4155 65.7529 33.374 54.4423 32.8603 49.375 cv
32.6963 47.7597 32.4644 46.5498 32.1826 45.6504 cv
32.1323 45.6416 li
29.2447 45.6416 32.7657 58.792 32.3413 64.9219 cv
32.3418 64.9424 li
32.3443 67.5225 31.832 69.4951 30.3637 69.7881 cv
28.895 70.082 26.2514 67.3652 21.9898 62.2569 cv
18.7808 58.4092 16.2945 55.5635 14.7217 53.8281 cv
13.2661 56.8828 28.8554 71.6055 29.9297 73.8379 cv
32.3276 78.8203 31.7656 90.4092 31.6831 100.723 cv
31.6812 100.959 31.623 106.71 30.584 109.587 cv
29.523 112.523 22.2866 115.828 22.2866 115.828 cv
21.5888 116.764 27.2432 116.746 29.5191 116.599 cv
31.7954 116.452 36.3956 114.959 37.8804 115.986 cv
40.0376 117.481 35.0454 121.023 35.3569 121.335 cv
36.0728 122.051 41.7451 118.802 44.6636 117.149 cv
46.0708 116.353 48.5547 114.168 51.2173 116.323 cv
53.5303 118.196 50.6816 121.629 51.4375 121.629 cv
51.5772 121.577 li
52.5547 119.707 53.5318 117.484 54.0811 115.975 cv
54.9619 113.552 55.4028 110.835 52.9794 105.548 cv
.588235 .333333 .247059 rgb
f
59.0742 57.3789 mo
57.6787 60.4629 56.0635 62.7393 59.0742 64.9424 cv
60.8545 66.2451 62.1064 66.4023 63.4033 66.0801 cv
60.8394 65.5459 56.9448 62.8828 59.4478 59.2988 cv
62.0698 55.5439 70.5269 40.6943 68.3252 36.4336 cv
67.7939 39.0703 66.9219 42.9404 66.0498 44.8232 cv
64.6543 47.834 60.4692 54.2949 59.0742 57.3789 cv
cp
.388235 .215686 .156863 rgb
f
61.2769 79.4688 mo
59.6616 84.8418 57.6055 92.918 58.2661 98.3516 cv
58.9272 103.786 58.3945 109.439 62.3784 112.744 cv
64.2627 114.308 68.2588 115.344 71.9468 116.003 cv
72.1631 115.961 72.249 115.905 72.144 115.828 cv
71.5229 115.371 68.3628 114.653 67.4082 113.404 cv
66.9487 112.805 64.9092 109.467 64.4893 107.347 cv
64.3657 106.164 63.3516 98.9795 62.8066 93.8936 cv
61.4854 81.5576 66.4966 75.1592 71.7832 67.6699 cv
76.7056 60.6963 85.3091 53.834 84.043 51.0625 cv
82.1187 53.6533 78.3848 58.6064 75.9624 61.3447 cv
72.585 65.1621 62.8921 74.0967 61.2769 79.4688 cv
cp
.388235 .192157 .12549 rgb
f
40.3267 41.4688 mo
40.3701 37.5039 46.022 13.1787 75.228 19.1982 cv
98.6289 24.0205 97.2153 50.3945 96.1553 51.7129 cv
93.395 55.1475 40.2739 46.2539 40.3267 41.4688 cv
cp
.270588 .54902 0 rgb
f
46.9014 38.7471 mo
46.9302 36.1465 50.9048 18.5996 70.0645 22.5479 cv
85.4155 25.7119 83.4902 40.1855 82.7944 41.0508 cv
80.9834 43.3037 46.8667 41.8857 46.9014 38.7471 cv
cp
.317647 .65098 0 rgb
f
8.20264 55.9268 mo
5.17773 54.1094 7.44434 26.4482 29.9019 24.6436 cv
48.7905 23.125 59.3286 45.2324 56.2246 47.9961 cv
53.5317 50.3945 10.6675 57.4072 8.20264 55.9268 cv
cp
.337255 .596078 .0784314 rgb
f
11.3218 51.7793 mo
9.2124 50.5117 12.4004 28.9824 28.0596 27.7236 cv
41.23 26.665 48.5781 42.0801 46.4141 44.0068 cv
44.5361 45.6797 13.0405 52.8115 11.3218 51.7793 cv
cp
.388235 .705882 .0705882 rgb
f
18.1792 41.6787 mo
16.8008 40.8506 18.3208 31.3076 28.5537 30.4854 cv
37.1606 29.7939 41.9624 39.8672 40.5483 41.126 cv
39.3213 42.2188 19.3022 42.3535 18.1792 41.6787 cv
cp
.478431 .8 .160784 rgb
f
35.6974 121.436 mo
35.5422 121.436 35.4262 121.404 35.3569 121.335 cv
35.3569 121.335 li
35.4262 121.404 35.5422 121.436 35.6974 121.436 cv
37.1454 121.436 42.0276 118.642 44.6636 117.149 cv
45.606 116.616 47.032 115.46 48.6706 115.402 cv
48.6704 115.403 48.6701 115.405 48.6699 115.407 cv
47.0318 115.467 45.6059 116.616 44.6636 117.149 cv
42.0276 118.642 37.1454 121.437 35.6974 121.436 cv
22.2867 115.828 mo
22.395 115.777 li
22.3952 115.777 22.3955 115.777 22.3956 115.777 cv
22.3263 115.81 22.2884 115.827 22.2867 115.828 cv
.294118 .184314 .14902 rgb
f
35.6974 121.436 mo
35.5422 121.436 35.4262 121.404 35.3569 121.335 cv
35.3569 121.318 li
36.6763 120.895 37.9609 120.272 38.8813 119.353 cv
41.7451 116.489 45.3428 103.492 45.9301 95.6347 cv
46.518 87.7784 43.8745 80.2148 43.8745 80.2148 cv
43.8745 80.2148 44.8291 83.373 44.3887 90.3486 cv
43.9721 96.9405 43.0186 101.334 40.8154 108.448 cv
40.462 109.745 li
40.1979 110.844 38.5723 116.007 37.9442 116.007 cv
37.9216 116.007 37.9003 116 37.8804 115.986 cv
37.8804 115.986 li
37.5049 115.727 36.9305 115.628 36.2446 115.628 cv
34.218 115.628 31.2198 116.489 29.5191 116.599 cv
28.8501 116.642 27.8895 116.674 26.8839 116.674 cv
24.6664 116.674 22.2309 116.518 22.2274 115.981 cv
22.2271 115.933 22.2462 115.882 22.2866 115.828 cv
22.2867 115.828 li
22.2884 115.827 22.3263 115.81 22.3956 115.777 cv
22.8127 115.811 23.2181 115.827 23.6193 115.827 cv
25.939 115.827 28.1095 115.27 31.4649 114.139 cv
40.874 110.968 42.6259 89.1738 42.7729 85.208 cv
42.9199 81.2432 38.8813 79.04 35.7973 74.3409 cv
32.7134 69.6416 33.7413 64.9424 33.7413 64.9424 cv
33.7413 64.9424 33.6679 68.5401 35.9443 70.9638 cv
38.2202 73.3867 40.3496 74.1943 41.8916 76.0303 cv
42.7108 77.0051 43.4751 77.8559 44.6063 77.8558 cv
45.6045 77.8558 46.8883 77.1933 48.747 75.3692 cv
52.5839 71.6032 53.4398 63.2989 53.5575 63.2989 cv
53.5614 63.2989 53.5645 63.3081 53.5669 63.3271 cv
53.6402 63.914 54.9976 71.1836 54.8887 74.0478 cv
54.7798 76.9111 51.6577 81.0966 49.0566 90.5684 cv
46.4551 100.041 49.0141 110.687 48.747 114.58 cv
48.7262 114.88 48.7001 115.147 48.6706 115.402 cv
47.032 115.46 45.606 116.616 44.6636 117.149 cv
42.0276 118.642 37.1454 121.436 35.6974 121.436 cv
.529412 .286274 .207843 rgb
f
38.1436 117.905 mo
38.1684 117.861 li
38.1528 117.893 li
38.1436 117.905 li
.294118 .184314 .14902 rgb
f
53.1265 69.8105 mo
53.1265 69.8105 50.5923 76.3975 49.3994 77.8652 cv
48.2065 79.334 47.4722 81.7568 47.3257 84.1807 cv
47.1787 86.6035 47.3257 90.6426 47.3257 90.6426 cv
47.3257 90.6426 48.1333 81.8311 50.9233 78.7471 cv
52.4409 77.0693 52.9795 70.3457 53.1265 69.8105 cv
cp
.466667 .239216 .168627 rgb
f
53.6401 59.2148 mo
53.6401 59.2148 51.8667 66.8184 50.9971 68.834 cv
48.7471 74.0479 45.1963 76.3232 45.1963 76.3232 cv
45.1963 76.3232 43.2871 74.708 41.5981 73.7539 cv
39.9092 72.7988 36.8989 70.8896 36.8989 70.8896 cv
36.8989 70.8896 40.7168 71.4043 42.1123 72.5791 cv
43.5073 73.7539 45.0127 74.3408 45.0127 74.3408 cv
45.0127 74.3408 47.2603 72.7988 49.3994 68.1055 cv
50.4507 65.7988 53.6401 59.2148 53.6401 59.2148 cv
cp
f
48.7471 66.2236 mo
48.7471 66.2236 44.5352 69.4951 44.2417 70.7432 cv
43.9478 71.9912 44.6084 72.9463 44.6084 72.9463 cv
44.6084 72.9463 45.2695 70.8643 46.4565 69.4268 cv
47.293 68.4131 48.7471 66.2236 48.7471 66.2236 cv
cp
.709804 .415686 .317647 rgb
f
32.1826 70.3027 mo
32.1826 70.3027 36.0645 78.2432 38.8813 80.2266 cv
41.6982 82.209 41.3042 87.5586 41.0107 89.4668 cv
40.7168 91.376 39.7622 97.8379 39.7622 97.8379 cv
39.7622 97.8379 41.0039 85.7227 38.1436 82.1982 cv
35.2832 78.6729 32.1553 73.6563 32.1826 70.3027 cv
cp
.678431 .388235 .294118 rgb
f
40.0435 83.9102 mo
40.0435 83.9102 39.3687 85.1719 38.561 88.916 cv
37.7534 92.6611 36.8989 95.3418 37.3394 99.0127 cv
37.7798 102.685 37.2656 106.503 34.8428 109.366 cv
32.4194 112.229 26.5454 114.506 26.5454 114.506 cv
26.5454 114.506 32.126 111.275 33.521 108.338 cv
34.916 105.401 35.6504 101.069 35.5771 97.5439 cv
35.5034 94.0195 38.561 82.3447 38.561 82.3447 cv
40.0435 83.9102 li
cp
f
31.6118 73.9004 mo
31.6118 73.9004 36.1328 81.3164 36.0908 83.5332 cv
36.0435 86.0771 34.8062 89.6875 34.604 91.8906 cv
34.4023 94.0928 33.521 103.933 33.521 103.933 cv
33.521 103.933 33.374 89.0264 33.9614 84.5479 cv
34.5488 80.0684 31.6118 73.9004 31.6118 73.9004 cv
cp
.776471 .470588 .372549 rgb
f
54.895 79.4072 mo
54.895 79.4072 53.6348 84.7256 54.2959 87.8154 cv
54.957 90.9043 56.3569 98.793 56.3569 98.793 cv
54.0811 101.436 li
54.0811 101.436 53.3467 92.918 53.1265 88.5127 cv
52.9063 84.1074 54.895 79.4072 54.895 79.4072 cv
cp
.466667 .239216 .168627 rgb
f
56.9658 75.0439 mo
56.9658 75.0439 57.7827 70.6406 57.7354 68.1055 cv
57.6992 66.1729 55.9902 63.8096 55.9902 63.8096 cv
57.8638 64.9844 li
57.8638 64.9844 59.9551 66.4531 59.5146 68.6924 cv
59.0742 70.9316 56.9658 75.0439 56.9658 75.0439 cv
cp
f
64.9482 68.1055 mo
64.9482 68.1055 60.3833 70.6699 59.5757 71.7715 cv
58.7681 72.8721 57.8682 74.708 57.3696 76.0303 cv
56.8711 77.3516 55.3291 82.3447 55.3291 82.3447 cv
55.3291 82.3447 58.4829 76.9854 59.2944 75.4424 cv
60.7993 72.5791 64.9482 68.1055 64.9482 68.1055 cv
cp
f
51.5771 88.916 mo
51.5771 88.916 52.8877 92.5605 52.2085 95.4512 cv
51.8394 97.0215 51.2026 101.069 51.5771 103.198 cv
51.9517 105.328 53.7139 110.137 53.7139 110.137 cv
53.7139 110.137 48.4331 104.887 49.7549 99.5273 cv
51.0767 94.167 51.5771 88.916 51.5771 88.916 cv
cp
f
57.3696 89.3203 mo
56.7241 91.1563 54.0811 93.2119 54.0811 99.0498 cv
54.0811 102.214 56.0635 105.328 56.4307 107.017 cv
56.7979 108.705 56.7622 111.569 56.7622 111.569 cv
56.7622 111.569 58.6333 107.311 56.3569 100.665 cv
54.8594 96.293 57.3696 89.3203 57.3696 89.3203 cv
cp
.388235 .192157 .12549 rgb
f
79.9702 43.9043 mo
79.9702 43.9043 82.8228 44.9219 83.5034 47.0645 cv
84.1846 49.207 84.0269 50.2578 84.0269 50.2578 cv
84.0269 50.2578 81.9448 48.8721 80.8789 46.9131 cv
79.813 44.9541 79.9702 43.9043 79.9702 43.9043 cv
cp
.0941176 .415686 .0705882 rgb
f
86.1572 40.1143 mo
86.1572 40.1143 87.6069 42.7744 86.6875 44.8262 cv
85.7681 46.877 84.9507 47.5566 84.9507 47.5566 cv
84.9507 47.5566 84.3208 45.1357 84.8306 42.9648 cv
85.3403 40.793 86.1572 40.1143 86.1572 40.1143 cv
cp
f
91.3726 45.9316 mo
91.3726 45.9316 90.7847 48.9023 88.7651 49.8906 cv
86.7456 50.8799 85.6836 50.8779 85.6836 50.8779 cv
85.6836 50.8779 86.7485 48.6152 88.5293 47.2725 cv
90.3101 45.9307 91.3726 45.9316 91.3726 45.9316 cv
cp
f
89.7798 38.4453 mo
89.7798 38.4453 91.0029 40.6084 90.2749 42.3037 cv
89.5469 43.998 88.8853 44.5654 88.8853 44.5654 cv
88.8853 44.5654 88.3379 42.5879 88.728 40.8008 cv
89.1182 39.0127 89.7798 38.4453 89.7798 38.4453 cv
cp
f
84.4067 25.2412 mo
84.4067 25.2412 85.6299 27.4043 84.9019 29.0996 cv
84.1738 30.7949 83.5122 31.3613 83.5122 31.3613 cv
83.5122 31.3613 82.9644 29.3838 83.3545 27.5967 cv
83.7451 25.8086 84.4067 25.2412 84.4067 25.2412 cv
cp
f
87.8052 29.6436 mo
87.8052 29.6436 87.7729 32.1279 86.2905 33.2266 cv
84.8081 34.3242 83.9512 34.4805 83.9512 34.4805 cv
83.9512 34.4805 84.4736 32.4961 85.7109 31.1484 cv
86.9478 29.8008 87.8052 29.6436 87.8052 29.6436 cv
cp
f
67.0093 29.3994 mo
67.0093 29.3994 66.9771 31.8838 65.4946 32.9814 cv
64.0122 34.0801 63.1548 34.2363 63.1548 34.2363 cv
63.1548 34.2363 63.6777 32.252 64.9146 30.9043 cv
66.1519 29.5566 67.0093 29.3994 67.0093 29.3994 cv
cp
.388235 .705882 .0705882 rgb
f
56.7549 32.2627 mo
56.7549 32.2627 59.3149 33.8174 59.5474 36.0273 cv
59.7798 38.2383 59.418 39.2246 59.418 39.2246 cv
59.418 39.2246 57.6777 37.4678 57.0356 35.3584 cv
56.3936 33.249 56.7549 32.2627 56.7549 32.2627 cv
cp
f
69.3267 29.2842 mo
69.3267 29.2842 71.8862 30.8389 72.1187 33.0498 cv
72.3516 35.2598 71.9897 36.2461 71.9897 36.2461 cv
71.9897 36.2461 70.2495 34.4893 69.6074 32.3799 cv
68.9648 30.2705 69.3267 29.2842 69.3267 29.2842 cv
cp
f
74.5688 27.5439 mo
74.5688 27.5439 75.8555 30.1963 74.8667 32.1484 cv
73.8784 34.0996 73.0527 34.7217 73.0527 34.7217 cv
73.0527 34.7217 72.5522 32.3398 73.1479 30.2529 cv
73.7437 28.166 74.5688 27.5439 74.5688 27.5439 cv
cp
f
70.4517 24.6563 mo
70.4517 24.6563 72.3623 26.04 72.4043 27.79 cv
72.4458 29.541 72.0991 30.292 72.0991 30.292 cv
72.0991 30.292 70.8447 28.8018 70.4746 27.1045 cv
70.1045 25.4072 70.4517 24.6563 70.4517 24.6563 cv
cp
f
66.7603 34.8291 mo
66.7603 34.8291 68.978 36.4346 69.0269 38.4668 cv
69.0752 40.499 68.6729 41.3701 68.6729 41.3701 cv
68.6729 41.3701 67.2163 39.6406 66.7871 37.6709 cv
66.3579 35.7012 66.7603 34.8291 66.7603 34.8291 cv
cp
f
80.3828 35.0986 mo
80.3828 35.0986 79.9385 37.8008 78.1426 38.752 cv
76.3467 39.7041 75.3867 39.7334 75.3867 39.7334 cv
75.3867 39.7334 76.2832 37.6582 77.853 36.3936 cv
79.4233 35.1289 80.3828 35.0986 80.3828 35.0986 cv
cp
f
51.2471 30.2061 mo
51.2471 30.2061 53.3398 31.0811 53.7642 32.71 cv
54.1885 34.3389 54.0293 35.1182 54.0293 35.1182 cv
54.0293 35.1182 52.5269 34 51.8071 32.4932 cv
51.0874 30.9854 51.2471 30.2061 51.2471 30.2061 cv
cp
f
54.7217 27.0059 mo
54.7217 27.0059 56.2324 27.6367 56.5381 28.8125 cv
56.8447 29.9883 56.7295 30.5508 56.7295 30.5508 cv
56.7295 30.5508 55.6455 29.7432 55.1265 28.6563 cv
54.6069 27.5684 54.7217 27.0059 54.7217 27.0059 cv
cp
f
62.1563 23.2588 mo
62.1563 23.2588 62.8374 24.7471 62.2642 25.8184 cv
61.6909 26.8896 61.2246 27.2246 61.2246 27.2246 cv
61.2246 27.2246 60.9766 25.8965 61.333 24.7451 cv
61.6899 23.5938 62.1563 23.2588 62.1563 23.2588 cv
cp
f
26.6694 33.7227 mo
26.6694 33.7227 28.3472 35.1777 28.2417 36.8223 cv
28.1367 38.4678 27.7495 39.1436 27.7495 39.1436 cv
27.7495 39.1436 26.6963 37.6426 26.4893 36.0205 cv
26.2827 34.3984 26.6694 33.7227 26.6694 33.7227 cv
cp
.403922 .705882 .101961 rgb
f
19.4883 36.542 mo
19.4883 36.542 21.6978 36.7637 22.5601 38.1689 cv
23.4224 39.5732 23.4956 40.3486 23.4956 40.3486 cv
23.4956 40.3486 21.7695 39.7295 20.6655 38.5234 cv
19.5615 37.3174 19.4883 36.542 19.4883 36.542 cv
cp
f
38.6172 37.1543 mo
38.6172 37.1543 38.3789 39.3623 36.9678 40.2139 cv
35.5566 41.0654 34.7808 41.1328 34.7808 41.1328 cv
34.7808 41.1328 35.4126 39.4111 36.627 38.3164 cv
37.8413 37.2217 38.6172 37.1543 38.6172 37.1543 cv
cp
f
34.7515 36.1992 mo
34.7515 36.1992 35.4771 37.9209 34.7861 39.123 cv
34.0952 40.3252 33.5518 40.6914 33.5518 40.6914 cv
33.5518 40.6914 33.3149 39.167 33.7617 37.8662 cv
34.2085 36.5654 34.7515 36.1992 34.7515 36.1992 cv
cp
f
14.8242 45.9434 mo
14.8242 45.9434 16.6816 46.1426 17.3989 47.3301 cv
18.1157 48.5166 18.1729 49.1689 18.1729 49.1689 cv
18.1729 49.1689 16.7246 48.6377 15.8032 47.6172 cv
14.8813 46.5957 14.8242 45.9434 14.8242 45.9434 cv
cp
.337255 .596078 .0784314 rgb
f
18.1567 43.6191 mo
18.1567 43.6191 19.312 45.0869 18.9639 46.4287 cv
18.6157 47.7715 18.1885 48.2676 18.1885 48.2676 cv
18.1885 48.2676 17.5566 46.8604 17.6431 45.4883 cv
17.73 44.1152 18.1567 43.6191 18.1567 43.6191 cv
cp
f
25.0601 43.3418 mo
25.0601 43.3418 26.335 44.9629 25.9507 46.4453 cv
25.5664 47.9268 25.0947 48.4756 25.0947 48.4756 cv
25.0947 48.4756 24.397 46.9219 24.4927 45.4063 cv
24.5884 43.8906 25.0601 43.3418 25.0601 43.3418 cv
cp
f
29.04 44.6279 mo
29.04 44.6279 31.0151 44.0322 32.2539 44.9316 cv
33.4932 45.8311 33.8315 46.4697 33.8315 46.4697 cv
33.8315 46.4697 32.1304 46.5518 30.7544 45.9092 cv
29.3784 45.2666 29.04 44.6279 29.04 44.6279 cv
cp
f
38.0493 42.3877 mo
38.0493 42.3877 38.2598 44.4395 37.1421 45.4863 cv
36.0244 46.5322 35.333 46.7432 35.333 46.7432 cv
35.333 46.7432 35.5742 45.0576 36.4658 43.8281 cv
37.3574 42.5986 38.0493 42.3877 38.0493 42.3877 cv
cp
f
47.4644 17.0547 mo
47.4644 17.0547 47.6748 19.1064 46.5576 20.1533 cv
45.4399 21.1992 44.7485 21.4111 44.7485 21.4111 cv
44.7485 21.4111 44.9897 19.7246 45.8813 18.4961 cv
46.7729 17.2666 47.4644 17.0547 47.4644 17.0547 cv
cp
.0941176 .415686 .0705882 rgb
f
40.0669 16.9336 mo
40.0669 16.9336 41.9233 17.832 42.2275 19.332 cv
42.5313 20.833 42.3477 21.5322 42.3477 21.5322 cv
42.3477 21.5322 41.0396 20.4414 40.4614 19.0371 cv
39.8833 17.6328 40.0669 16.9336 40.0669 16.9336 cv
cp
f
42.8389 14.4922 mo
42.8389 14.4922 44.1851 16.0537 43.8677 17.5518 cv
43.5498 19.0488 43.1035 19.6182 43.1035 19.6182 cv
43.1035 19.6182 42.3369 18.0977 42.3647 16.5791 cv
42.3921 15.0605 42.8389 14.4922 42.8389 14.4922 cv
cp
f
52.2368 14.6836 mo
52.2368 14.6836 54.1289 15.5039 54.4946 16.9902 cv
54.8604 18.4766 54.7061 19.1836 54.7061 19.1836 cv
54.7061 19.1836 53.354 18.1484 52.7183 16.7695 cv
52.0825 15.3896 52.2368 14.6836 52.2368 14.6836 cv
cp
f
34.7891 18.9824 mo
34.7891 18.9824 36.2275 20.46 36.0015 21.9736 cv
35.7754 23.4883 35.3643 24.083 35.3643 24.083 cv
35.3643 24.083 34.5068 22.6113 34.4419 21.0938 cv
34.3774 19.5771 34.7891 18.9824 34.7891 18.9824 cv
cp
f
25.5815 16.6328 mo
25.5815 16.6328 27.02 18.1104 26.7939 19.625 cv
26.5679 21.1387 26.1567 21.7344 26.1567 21.7344 cv
26.1567 21.7344 25.2993 20.2627 25.2349 18.7451 cv
25.1704 17.2285 25.5815 16.6328 25.5815 16.6328 cv
cp
.0745098 .356863 .0627451 rgb
f
30.0059 14.3232 mo
30.0059 14.3232 30.4326 16.3418 29.4321 17.5 cv
28.4321 18.6592 27.7666 18.9424 27.7666 18.9424 cv
27.7666 18.9424 27.8281 17.2402 28.5845 15.9238 cv
29.3403 14.6064 30.0059 14.3232 30.0059 14.3232 cv
cp
f
22.1265 19.1816 mo
22.1265 19.1816 24.0322 19.9707 24.4224 21.4512 cv
24.8125 22.9316 24.6699 23.6406 24.6699 23.6406 cv
24.6699 23.6406 23.3013 22.627 22.6426 21.2588 cv
21.9839 19.8906 22.1265 19.1816 22.1265 19.1816 cv
cp
f
23.5684 14.9707 mo
23.5684 14.9707 24.5688 16.3145 24.2246 17.5098 cv
23.8804 18.7041 23.4854 19.1396 23.4854 19.1396 cv
23.4854 19.1396 22.9526 17.8633 23.063 16.6348 cv
23.1738 15.4053 23.5684 14.9707 23.5684 14.9707 cv
cp
f
33.2031 10.2139 mo
33.2031 10.2139 34.7676 10.8135 35.1157 12.0078 cv
35.4644 13.2012 35.3638 13.7803 35.3638 13.7803 cv
35.3638 13.7803 34.2305 12.9863 33.6665 11.8896 cv
33.1025 10.793 33.2031 10.2139 33.2031 10.2139 cv
cp
f
37.8389 10.8438 mo
37.8389 10.8438 38.1362 12.4932 37.2954 13.4092 cv
36.4551 14.3262 35.9077 14.54 35.9077 14.54 cv
35.9077 14.54 35.999 13.1592 36.6455 12.1084 cv
37.2915 11.0576 37.8389 10.8438 37.8389 10.8438 cv
cp
f
62.7578 9.625 mo
62.7578 9.625 62.3794 11.2578 61.2451 11.7676 cv
60.1108 12.2773 59.5239 12.2578 59.5239 12.2578 cv
59.5239 12.2578 60.1533 11.0254 61.1621 10.3154 cv
62.1704 9.60547 62.7578 9.625 62.7578 9.625 cv
cp
f
67.6553 13.0469 mo
67.6553 13.0469 69.1138 13.8721 69.2822 15.1035 cv
69.4507 16.3359 69.2656 16.8936 69.2656 16.8936 cv
69.2656 16.8936 68.2617 15.9414 67.8657 14.7734 cv
67.4702 13.6045 67.6553 13.0469 67.6553 13.0469 cv
cp
f
28.707 11.9326 mo
28.707 11.9326 29.0039 13.5811 28.1631 14.498 cv
27.3228 15.4141 26.7754 15.6279 26.7754 15.6279 cv
26.7754 15.6279 26.8667 14.248 27.5132 13.1973 cv
28.1597 12.1465 28.707 11.9326 28.707 11.9326 cv
cp
f
54.4966 7.9209 mo
54.4966 7.9209 56.1577 8.1377 56.7764 9.2168 cv
57.395 10.2959 57.4326 10.8818 57.4326 10.8818 cv
57.4326 10.8818 56.145 10.376 55.3398 9.44141 cv
54.5342 8.50684 54.4966 7.9209 54.4966 7.9209 cv
cp
f
39.0596 7.86133 mo
39.0596 7.86133 40.7104 8.14648 41.2837 9.25098 cv
41.8569 10.3545 41.8701 10.9414 41.8701 10.9414 cv
41.8701 10.9414 40.6045 10.3828 39.8389 9.41602 cv
39.0728 8.44824 39.0596 7.86133 39.0596 7.86133 cv
cp
f
41.8027 23.3506 mo
41.8027 23.3506 43.8486 23.0918 44.9214 24.1836 cv
45.9941 25.2754 46.2222 25.9619 46.2222 25.9619 cv
46.2222 25.9619 44.5308 25.7607 43.2808 24.8994 cv
42.0303 24.0371 41.8027 23.3506 41.8027 23.3506 cv
cp
.0941176 .415686 .0705882 rgb
f
84.7832 54.332 mo
84.7832 54.332 86.8291 54.0732 87.9023 55.165 cv
88.9751 56.2568 89.2026 56.9434 89.2026 56.9434 cv
89.2026 56.9434 87.5112 56.7422 86.2612 55.8809 cv
85.0107 55.0186 84.7832 54.332 84.7832 54.332 cv
cp
.054902 .27451 .0470588 rgb
f
98.0591 49.6553 mo
98.0591 49.6553 100.014 50.3125 100.504 51.7627 cv
100.995 53.2129 100.901 53.9297 100.901 53.9297 cv
100.901 53.9297 99.4658 53.0127 98.7153 51.6924 cv
97.9648 50.3721 98.0591 49.6553 98.0591 49.6553 cv
cp
f
99.9927 45.0547 mo
99.9927 45.0547 101.427 46.5371 101.195 48.0498 cv
100.964 49.5635 100.551 50.1572 100.551 50.1572 cv
100.551 50.1572 99.6987 48.6826 99.6392 47.165 cv
99.5796 45.6484 99.9927 45.0547 99.9927 45.0547 cv
cp
f
76.3232 12.8789 mo
76.3232 12.8789 77.7573 14.3613 77.5259 15.875 cv
77.2949 17.3887 76.8813 17.9824 76.8813 17.9824 cv
76.8813 17.9824 76.0293 16.5078 75.9697 14.9902 cv
75.9102 13.4727 76.3232 12.8789 76.3232 12.8789 cv
cp
f
62.7383 6.56934 mo
62.7383 6.56934 64.7842 6.30957 65.8574 7.40137 cv
66.9307 8.49316 67.1582 9.17969 67.1582 9.17969 cv
67.1582 9.17969 65.4668 8.97852 64.2163 8.11719 cv
62.9658 7.25586 62.7383 6.56934 62.7383 6.56934 cv
cp
f
70.2769 51.7539 mo
70.2769 51.7539 71.7109 53.2363 71.4795 54.75 cv
71.248 56.2627 70.835 56.8564 70.835 56.8564 cv
70.835 56.8564 69.9824 55.3828 69.9233 53.8652 cv
69.8638 52.3477 70.2769 51.7539 70.2769 51.7539 cv
cp
f
74.4199 52.7461 mo
74.4199 52.7461 74.7988 54.7734 73.7715 55.9082 cv
72.7441 57.0439 72.0723 57.3115 72.0723 57.3115 cv
72.0723 57.3115 72.1738 55.6113 72.9609 54.3125 cv
73.748 53.0137 74.4199 52.7461 74.4199 52.7461 cv
cp
f
80.2329 14.5146 mo
80.2329 14.5146 80.6118 16.542 79.5845 17.6768 cv
78.5566 18.8125 77.8848 19.0801 77.8848 19.0801 cv
77.8848 19.0801 77.9868 17.3799 78.7734 16.0811 cv
79.5605 14.7822 80.2329 14.5146 80.2329 14.5146 cv
cp
f
43.5034 55.2148 mo
43.5034 55.2148 43.8823 57.2422 42.855 58.377 cv
41.8276 59.5117 41.1558 59.7793 41.1558 59.7793 cv
41.1558 59.7793 41.2573 58.0801 42.0444 56.7813 cv
42.8315 55.4824 43.5034 55.2148 43.5034 55.2148 cv
cp
f
30.1802 56.0508 mo
30.1802 56.0508 30.5591 58.0781 29.5317 59.2139 cv
28.5039 60.3486 27.832 60.6162 27.832 60.6162 cv
27.832 60.6162 27.9341 58.916 28.7207 57.6172 cv
29.5078 56.3184 30.1802 56.0508 30.1802 56.0508 cv
cp
f
25.7959 55.3164 mo
25.7959 55.3164 27.0981 56.915 26.7388 58.4033 cv
26.3794 59.8916 25.9175 60.4482 25.9175 60.4482 cv
25.9175 60.4482 25.1934 58.9063 25.2637 57.3896 cv
25.3335 55.8721 25.7959 55.3164 25.7959 55.3164 cv
cp
f
12.3428 56.6836 mo
12.3428 56.6836 13.645 58.2832 13.2856 59.7715 cv
12.9263 61.2588 12.4644 61.8154 12.4644 61.8154 cv
12.4644 61.8154 11.7407 60.2734 11.8105 58.7568 cv
11.8809 57.2402 12.3428 56.6836 12.3428 56.6836 cv
cp
f
10.1436 28.9121 mo
10.1436 28.9121 11.4458 30.5117 11.0864 32 cv
10.7275 33.4883 10.2651 34.0449 10.2651 34.0449 cv
10.2651 34.0449 9.5415 32.5029 9.61133 30.9863 cv
9.68164 29.4688 10.1436 28.9121 10.1436 28.9121 cv
cp
f
5.73975 60.1943 mo
5.73975 60.1943 7.61377 59.333 8.96484 60.0518 cv
10.3159 60.7715 10.7397 61.3584 10.7397 61.3584 cv
10.7397 61.3584 9.06592 61.6738 7.61475 61.2275 cv
6.16309 60.7813 5.73975 60.1943 5.73975 60.1943 cv
cp
f
4.1084 55.0215 mo
4.1084 55.0215 6.12012 55.4756 6.75586 56.8691 cv
7.3916 58.2617 7.37109 58.9844 7.37109 58.9844 cv
7.37109 58.9844 5.8501 58.2178 4.96924 56.9814 cv
4.08789 55.7451 4.1084 55.0215 4.1084 55.0215 cv
cp
f
20.1899 45.5488 mo
20.1899 45.5488 21.1079 46.7158 20.8311 47.7832 cv
20.5542 48.8496 20.2148 49.2451 20.2148 49.2451 cv
20.2148 49.2451 19.7124 48.126 19.7813 47.0352 cv
19.8501 45.9434 20.1899 45.5488 20.1899 45.5488 cv
cp
.337255 .596078 .0784314 rgb
f
32.2681 35.0117 mo
32.2681 35.0117 32.0415 36.6328 30.9824 37.2275 cv
29.9229 37.8232 29.3496 37.8545 29.3496 37.8545 cv
29.3496 37.8545 29.855 36.6006 30.7749 35.8223 cv
31.6948 35.0439 32.2681 35.0117 32.2681 35.0117 cv
cp
.403922 .705882 .101961 rgb
f
29.0601 30.749 mo
29.0601 30.749 30.2368 31.8867 30.0942 33.0928 cv
29.9512 34.2998 29.6396 34.7813 29.6396 34.7813 cv
29.6396 34.7813 28.9238 33.6348 28.8359 32.4336 cv
28.748 31.2314 29.0601 30.749 29.0601 30.749 cv
cp
f
63.8521 35.6992 mo
63.8521 35.6992 64.561 37.9424 63.5547 39.3691 cv
62.5488 40.7969 61.8247 41.1924 61.8247 41.1924 cv
61.8247 41.1924 61.7051 39.2529 62.4165 37.6738 cv
63.1279 36.0947 63.8521 35.6992 63.8521 35.6992 cv
cp
.388235 .705882 .0705882 rgb
f
59.4683 26.624 mo
59.4683 26.624 61.3809 28.2109 61.3032 30.0537 cv
61.2256 31.8975 60.8091 32.6621 60.8091 32.6621 cv
60.8091 32.6621 59.5938 31.0088 59.3228 29.1992 cv
59.0518 27.3896 59.4683 26.624 59.4683 26.624 cv
cp
f
65.3472 25 mo
65.3472 25 65.6733 27.4639 64.3647 28.7637 cv
63.0562 30.0645 62.231 30.3428 62.231 30.3428 cv
62.231 30.3428 62.4614 28.3037 63.4917 26.792 cv
64.5215 25.2793 65.3472 25 65.3472 25 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Aksana) ()
%%Title: (1612.i216.023.S.m003.c8.elements set.eps)
%%CreationDate: 12/16/2016 5:45 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3XY'pGi)`^9;=d"'@hmdu.>lMP?hQY5s5C8hbpd3V281fq5\G%TV$BG^b1,.HeKYAad<Yfd2Q7EO4+F)pP:jq=fW);gfg?
%iI(b8+%57Ps",kk)5he-"=U?"JqB(h=HR,(^m-T,.3(MbAjo_>#Erc!e'OS-c8&%=]:CYAVUaPm-%9Q&hkB`H^M(>3]j<Yto#9ou
%W<U\e1?([TW9\0HC1t%O$8\K?Iio8o[G`Ru!'cZjq'"4;VS$g$0K83b9_`]g4uagpP(*QmVtuV)[Oo`^biW1B6":dhG+I5h)Z9[t
%g[MK;DZG7Y-2!/HWS;Mg?QTV=g-Hg(Z0FDg@8!(P-,Dhtq3Q+#V;GCOf?jIT`8Z8pYh,N:1ZnjPcuF*:,`]]<!/^4P,5fYF&$W5A
%^m4tg,Z:k>2d1@KegUha0eE/foWQ(a?!uRk!=Xfo=Q10bWl4L;R8mgja<3ICn6o=;_#'YQs"sA_2LKk_<n8jXTeXa9)ufou";0h@
%36e@l\o+&r%3$]c4&RL\%aD:c#>G#UVs>8[mJs!B:C!Ve=\lU<;JOcEaGLG!_K:8hl85g#0-(3lFTsjDl-4g*:*pn=,fReq,-m$b
%31hBE?!aKoQB_\Wf^07ma+q:_b2%Q/90!R(A'9*PRN!CRWQ)3'V!_DU\M'nS1CF)5+;.]Zr`?`347`XBD-Lq%.Dg*9M8K@VB>TFL
%*'2V$-d2e#ToEF>+RDhLK=^m>r7_0;IY076/I*ZOn8MpT"%Eqcro8JuoJbkT=7<qc]9_,aAXXA*O8fAmA[A?4cLm?;>/8drn$r-$
%?\5ul;+G!0dRqjkI.+n)25:oaTL6NDdXCahGa<`2^FT)gS**(=_//a*TWP3UT6f=0%<UB@d@+Y(Kk@aJFIoOK:!N6k+*r?JNBcA<
%%7o(=^#.tP>7dJD&;`M;?q,lq#@QJf%u+iR*F$jfF(`,S=MCVsJCm?)%UVK[l3=2%^18*M=&dIZFqsAOhCQ-_PGDPUBL!NmFIE0Z
%.%5:Rh<8u@f[BZpITPc-[ZEO-$3H*W;>9nce1C\0(!)'s!iQmX,k;S*<=b,6Oog+9l[!6>%YF.qC^U,HK-r7WQ*4q6n>@ldi';eD
%"A\V^*T[m'U"^Fn54W".37>W-],[HYIb2BIH;f%)".-n94Rm9Pd-B?B^KaQb6@[VFBhN7*DTAWih_fN@moJ7\ItICm#JP$^@&Ve^
%7Gi[qY/(blg[*R1#BuiUD/dBBeQjufJc;ggj/)u$bjF<uoQLbi-Q`u9^l3bP#(.&s::!ZhQ/9FEOCL-?02<\J1+^\XcPr;QIIrHX
%(/1dh>2Y0jV,,qPP%M%1hZgiSG?)+WbM<H\puiO7^!Qc.:VS_;4pbnpC1Tc5Ii31kjndknJ,QR*hE1`rA+-OlIsL\'?\\523@@UO
%<Qn($mQ.9bQ83jYMke:nd[.t,kIs^I[VH[79&6rS<U)JGFoBhfg;%t9TD$+],`Hb.KjHZIlW3Ve8^eT^8Q@H=B"agd;#odWIVrlQ
%oU2ZrU^'#"!;LP[4&9OOK0EFAX(mm=ofqU5hEZ!AlRM3O&ZUm2EVQHg@'?2iVK'16PU[V1.+%a(_RhMt^GNQ%"XP[&RUt\)jR1+G
%$B8?^*Q-J*r%]3C//MfBftq?S9FjD^q\:2Nc158u.2;W_,/l>0a8GaNg8Nb.AmFeQp2.USbJW\/=k:^XUd;:Zc2.+L:D$slmmats
%5DF\ZQ;R#$H9:=p"2L:8BqmAYW_kERHBUU5^@b1Kmf/)mfY7uApbBQ>b[Sr.Sqg&agE-Ln;lb*^W5":s?$ugV$&K:GJdFDUCK$3d
%<B$ML[L6o_J<N=?%5NFF^uOnJ7cB[A'Riad"d@Gs#M,8+`i)5RSLbkm^hj@';HUpo&$^G]W]dR.UM#fs@"gj]mUeRu2UUqp`D0]W
%QLp5P6(e"8)SOEDL=!u>=F.SXG@MH$J<N<Tq\YZ3Vf>tI+f07TJ:kWN1R)<;r"uQ1f%/<9rmCi+FCR4!i$X4`e'-PN6uO.lfHtRI
%_Wuqr6dRHFc!)$hmpY^j`RbJ>)3'3(^X%Za2A&FM/_q@$r<P80=j*9TX/,44XNM&BXq7$A5&X28!"#uc$T4gC!gPt5K_:$E@Vq9s
%\PSXM1^aqAI6<)RUgER[]Mre6ORZ5ZksE3ZjeaJl'>.;I@VHD,f8iV#m3Qg`OdU;Hk<_^P0UZuZ7IbCY0:29N3A6^<6,Lh,]Nbrp
%+5nU/EitLlR9VA_rIA_0*>2;BcU"EAfDj@dFK;p\FOg&O,lRT@rmF5Qd'h+hrD1>a?f`KS*!DlJ?H%6R/Pl$m;n,Cg!P;O5h);WP
%r,(et4)T3bDIkaBYrk=9kQV8NY,ONLhrINqVVZWePtG8ihpI/rf(EO)gIu@-*MZ-[buZ(oYlC`;S[T%'R9t(q[6Y%8;DREE%mdg;
%<O@p\059hc)?TY,_S8D>O2N)`hU7lr/Dmal$]+te4*Ae?rS95uHIE=,Y90/LK'r/%R*E(AI1!ag,;Yd-KLCQ7+Tg,a%C;!D1o<AW
%L8<Z@)ZR<4j.D1K(cg&Yg0&VgTs`c:NP)$d=XS*Sae7g\Fb-N!)0"t6V`lC$SSJ;Uc'heYGs8^[0l7]AKj1Lh<BM+/"p.M=/66h%
%\nVnc>]0?+(7mlQYg^i%h@0tm%%+"3n:j/ESQrK0]@tVK2os4-Dlam9\UDYBNrP"3e)jk!;sF7>nkG:@LV!/S,:-tXg2X<05Ed2(
%FV`gdTC7Z4=DsPP>M)VsQ]L>3RqXNk\midG(H)4KLGfdB=cZdurf<!!aIg2-M%.'VjDAUBUZ7*H?,4SEB0Ts/<nY9h\pmgok(5<D
%ZR5!-aM->Vr3gk!Zs$JB);Kq0R_goBB:1L#GYP1-qFTiNh4.a@N7\)(p@&1X_n%l72ruruk[M5:G4^+_V_ijhK$Wp=fH5>lhN_VG
%]rnsR(hZ:h?0k%P_6a(m396XtJ+mdZe8!R931_#&T\urc+bKjYp3=H-cR$(5Wp/D+nhXOK$aH-<fBEL-cWI6i/8D[sHqIAGAlGnr
%of@@=T:<6e=-$#^^Jbq!KV-<Rock.D2G'\"WbWn$?f-+,[:[kK1c4FA`R<^=A30\@W;9hKA;<?tN%k(k-A^sh::3N\H6;7CVD^M"
%C'#1[r[o-[?gdf_OdL%`k)'u(XrVE*>0c2W+"dmDZ_R1GOSS.q;^sE/ku>`^N8<hcW_\YK/lZQcV;C-#"G%)')hFUqP2][hcJW/t
%RsSp!e>1Hi)bjUZZ-0eUeP#\;H5HAK5pqAN<rYhijao^)q/";rBd5(f`$0:>kS3\;=!$%GRhR>Ho&eO7bsJDZBlr4b>;9Y%#(S(T
%QDKe8ecf[IZ@T3aGCrs-FCJk-7>>Tha`#G'NWL_sfl5tQ$.qX%$a",">UdYGn!_''\<nkDGWSd",!daXUn&oOOI;C)Ksq_,Rd.5^
%,\u[fr?pu#EH=k-$uSN(hAJ;BHVrS^euZBQ);gA3,.*l&]dU%:CAR\!r!_caPP1`\6,qZ;ipB21^[O/<?Bcn^F["H.nh^$7\?^oh
%n"Y?[?5,?>bXt8dl[)K6nRC4[j/;<6.K-'U-uP-7's7M]<LR(G;r`b%T<K5tjQ12bT''jDQcFs9]5_>()"CgC1!(=2W;?s4R>3&u
%:Z^Q).n$`-^YDfdB'#n^T6?q#n%SI-U5&>^\'0)?m5&o[o'DeQ&pSTEZYQ.<RgH]mZCo/Ef=Z'>Ra%:]6L%]2c`2E=Wd2FL(T_m_
%c*M.L`MsBM#X(jhI='[=idq=5G"HkS('$KTqRd`gSf5-^JYtu/)@afIaS8.>)u(i0Vloa_%DY^g,5]^!=t"%]Xk.W:mFT5Yc9+jk
%/6dG<I.K>tXBj[l1s:3aBYOH)c(Su[/R>]HY&66;J=RBh*uU9q^QaIqF%s^age-%5iOq&iUZ1*%j5!>fh+I:r]9S-DYn<#dYp0+f
%pu)/XI"oB\n:U3(*"/0>#4e0$?`#D3qH5I$r'*_o-aQ%heVhF[AeVp@FT.3Qph+*iAa3'U]+hJ`2eR&(n/E.(-?J1aCp_DEUoqb/
%\*VVZZtGRZ"GnaS1MI"t'`2W`XiCi*"+_d7G.PK*NUa#CcuutY_cq?qiP82I+5Y_321u&r3?14#),IqAr1*/FHJbZ(L0\Z[[[W(a
%Apr`Y\pX$<36><.M"i66]p!p%8O%.lf3A:R/=&Zh^D",%E8"jU>Q=BIJ%bM^n#[klqX6Cc]_,WMrV*chO15880bKb7UpoJJV3S/3
%0*HQ9^>><^\*!SP5h&4>C/c[R[[o1B&B$E]aOmO@-7*KCoQo?klXLXp``(ClJ5?P*i,jP/kQ;LA,MZIW]ZZf2LS-"127P@%*NK8#
%P$>;J_5H)^9tR<GeGBJ2-.`uZ's_/"`iG1q[-lqj@Jt^3RJ68YY>")Dah0C^%kj-o4=0Q/l$>,e;5,*4hdnp<OZs;]Y1jO]01S]/
%CVI?^mFBN0ETN4=C8P<mD_C?M"0`G[\;CZa[""$(a+!@QHpa@QKq*+M->AQ.6l)PpM=+)0dR5>GKPrXqp0`i.E^dqt5"p+hU#"-i
%&;+*"mGu(T8tCT[lL,M,G-21WY90/LJhHsnGIF-B1r"LX/%g+\(U*>f'jePiMcY/n$85`Ej[2gtAJSHoEN1^gro+Z!VDn\N$88##
%]M'qQqDnG#VP\m.G7pL8Xs!\M,IO/D8PFPdji?18n_6]+PI+$?AJ7&q,VPX+K>Y''2W<emL2"D=_@7TarNZb()ptP?/,lobGl63`
%-L->Vdu66Om@JBh@Y6T+cI'7\Bf_dE:Ul8GPA/Ut4%T*hfCOuck)jiie'GUVknAI;DI;sP?^d4Hrb(XJb#c!Vq3Ui=R\+aQho2]r
%hPpFP#mk5C34k(b7@%5lWK[BW9!mC3n<P.5_Vsrt=-'>i?=p%^enrn@9/!n6ag7l9`rsH_@LhlBmf(F@@+mU3)j_%HLFHPa2@CB@
%.kll'9B]_Pg"!eg#B!H=Nof(>;q9]@KB`J4$Cq_Y\j4;1/2b7?arM+4K%^ON[/[NpL3M>A&$'22?6*O1EgiE"@jjR7No:0IYDt?F
%RI70@]N</Cl58!i)6](ZeM1[3Nq)#KctptW2Pm%;T2dGEA8Ci_dr;YNS3HZj4aPp["JsO*n)g#H&h[o(ZZE=0MnQIA:?*0:nP<5!
%V[%c#KbP2DEEc49C[5\-J*H1AP+,-^"Fa7Y29idNfVQ&leO/F.KI[m^=*ts=Sn?OLl"8hbBZQIlSG5N?DX>F1h_X>!1\;GHhDI[8
%`OgD>o?>G74A=DH/"LM*9ib^uH*CDUb_@'L9>Fd:*l"W:nX40FITPL+d'8J!3r$Zs/dhTJgJ;'Ce^L+4s3=85-<[AIg`\>S;!OpR
%nWPkY\O'n?2LN&$B$.T0\O"'dlnoeV$2m-MiN9HXs.RSurD?ZTCWd$?ck!.q]@`0#K;Eh4X2Y+n>5TZ+;_OJajT-]rbIKES?8gtX
%F'^cfATLe3$@1<pQd'r.2Wl9]r9;ni&)86"_t#f(pI*5553Dtt0:h^_3A6rpdQ&tOo?t1s$qU:fl's87AgX&VYs0A)F,,F8dS35(
%G@?s%-VJO@5CRoBpXA!=i$(td/nC>sP3VT<rJ\AnDW^DQnF"?hmZj0UHR1"pgs7]]hfD*'A;\cW#it2"f/JS0X]15RBTq,t8r!:[
%_c>NsD?$WJWDYfsPEJ"oDjI"54`ZD*XJeu7"`G`qk\Kq29RW&PXaEjT1];=^?2`0u6(;-OR.sgmD78>gkMl1GkP^hUZUs$:m3YIC
%I:?(UpK,nq1&&9N@dq`kAoSBud0D"PTBeFPj\)&C0Q%/B;HUK^8^d$/'s4:D7;Eaq947c7)Qqu,4#;?-r>UE>GemU)EV5E"LMnfg
%_ZR+V1Qf<XF/&VC1che*2g^XM_M>Xm$/EYo]>CJA6"5MK]*6lqh`29X"L=&'T?1d7VoLl*A2)Pr_5CTt4>YB9S,;ulR&Bq$R8)L;
%P4\U5.F'-KPPml^q"bRU..Vtah\[&Q1"!I+,k'sd9F"!ND1hDW]^4.g$pUnHs4`/KYLreRf!o\[[C=`*#FU-.P7fN-34L\O[0^"j
%(BJ19/XR\$f]hP9>8Q''iP85!#PWAel1^'"D6L*S)0WE]]6`k]9_l`?@HTK-bnSTIN`0c@VVO8DE@fT,*8U*mg7=uX5"rS0r+)6R
%oa]E`h=Z0Uo^h92lPjKAK'^0eE*@mchd[@5LEF9R(,IBO5O]/TTCl7T&$JY%WGB^6G;55(cRd0_]ShUn_kMkih7:%m@4#eMlXQH7
%a*m6\I#KZQkXH2sJ?rYHVqu.T_UImr[\V/iAlgpn_tS7i]$81>MN3/N'd(3j7,0&1B]ed)#e>c`VZ)a;cqh.tj7cQA-A'P5s3Z,E
%8S\86?S_-dp<:<UaX=s5WRmdb\%rQ@&l@Qp^[5e$+0eWt"2(%Jh-o-PLit-*ks7eL3))AJ=u>gOohY-D-u5.ah+AX;"R@/Y`aN(%
%]&E'N<$s\uMtII0n@@<Eit1j9X\$+Q/=k(^)>Qij(7'B-n#))sXs[hF(,P[I)mf<-2i!J/#ELt`/?RU.\9X:T'[$?O%ie8ke`1^j
%g=1nK5I0cEV/ET$Zrd)@`uVJI/QT'%)9u=Fe_=R/Ha[&UVAXdP,tNs!%*Lc/RcWDLO@Yjs9b0a+1C(UT4,-'sHX)%URY/BQn\:jM
%Q_..>D_]G\j&OWH&<qgEq,`c-6YQkFR\YCV"B24="BtAohYV_lR&<]cgjbMd+Ap[JVN6>)*I?X-S95'KD>[mh>:\5fs-T;'i`b(b
%%1Qm:2?!K/3:`npCcT:H,;oU:@bR`+agB3:RJ]YX*RYA_7(W<ha8["65(%[2[_I2@j#cnhgbHP6+7S;>rWn"?Z%!Gp+,F'-TWas*
%^u-Ur^@e".fjjQ0fC`bO"'W?u"6j52"jRPa"&nZ4nb12a7jDG#b8nKL$\dPp^I]]4fDgSG!#df@\hA$Rel.(`c/URm0nfn\pW,b+
%V]RQ(56iQ\-M=iSlJQ4:O57;&NNofR?=H@LfQtQg1Uc1MCl\TPbfMER")5Y8YDB1[*s>X((_Jqc$mR1Q,4dQ;@Z/12]Ze7u;,SZ7
%p0DDmfI(3foo/V2j7HKLc*<kfp5HFm[(jq#o*QuRBTRL/Q:)3IE&*2#BV[Xk&D8c[4DX=eCDYQjo;o?4XZ^IuIFai%791,<%^Rq/
%6>2H@<Y8Gf=DNU,3>I%.'o#f;P_6)M+;":K[:cUI=DPm^et0;CXS)<jCJb^D*b/uJ&U=QiZH2RKUnZOsIj?Rpn;>'p(qsdmSI_=>
%p5J^c7[s.PfUgLaN:qH6D1N?H1rt9eag-RA^d>)8Zrp-:3E"HEA4BP=I.3*'B='l]g7hZfp5HFm[(k('X+JF9,et0p%ZRnFT\1[R
%CkX0bZa(jt@m5,qgU#QTgMD`:Cpmu_4e(ihZ=c\'r_IMXV(7"P%(<Y?kS\3_@"2gN%2P@Jfb4LR'M)bh+iS8`@7<a1,np&D*qR4S
%g/DaodFXQ+51<uKH-^5P<njt7hmb1@Plq8m2TKkY1#JMBWesJL?W&Vk*qR3(fUfp&B<VQc@!`+41Y?$$4_&O*hmV7%B=0n'm9+;0
%RQW_Vp"uoabFZQD%(9fQ4bGmZ,5'hOf\U<\cX;)(gG@J<,Z=YZK<9G(gG@KR_=e<2m"j0;_<J;W>5#C7He-oWet0:@+d)UsLY&hU
%k0Z!;T#(CqK?^I&^l\0P/0iS1kb>qU]DNL@<QGbBH4lBCCA?_XGFWE39s2bVVT<:p-YPW+m?qeZR/5#5f$D1sdl,rB5NCF5cXq[i
%q&)VeaPD97`:46r5GJQ@g1m^@5\/,I>sshjJ\:kF+ua%Zf%RI]DQL6iGfI)@T!e9L+u:NEs6ZP:GN#Q7Z9=EMSL3*<"3jUtf[;T.
%4F0L<4bN,>CsQM8O@]>*%CRephT6Y]@!`+THOR@W(A+T4[o67W<b0V48*q0uce*^0*Y7_9?_5[EbspHg6$l)U1YU`#[(VfTGt.Zi
%)f;bgm29ceBR>m8lq,dS_<KE<gUe0<1YSGJp5J_38_25(l*Ek641FDkD9lmBjcLFFXIk-oViA-/E7$JqT$d6UmFd])T7bUjNOF%[
%d50LJdIrOmlq,dS_<KE<gY4mN)/[]5HU`AU,jXXOoP()fm2keV[V)s1UHNseolG*K[*eSRg?9DkcY.YpHhJ`NkMYuHU[9'dpPcOn
%Zot0IH]n&CE,og&DkLD%eEsk6URa=^Xa8l<;_`A>LaE(!WB)?R.J&E^Y(RK(?:J'3<*9h&<YUs3kaRZ9?KOY<luli,M/IYQ"k@f7
%qil'*?/a"Y_V.A%/]KR26`O:L=Z2[lRl#uSoPe>!Eu$lG1nR)XV`h1I)9n[Pf54`iaQ89^)hh^2NpP8)(mWs1.7gs59,1E\&Y,g)
%DGHmX[V]_LiO^3UbiM&[d,?)Gpg:0\Nd-,5WaY5LTDooD2'SRK%@ungM(PA?r-nnM+)J1jj8>!spSlTY]haYS6N-GhUR"8InlqH`
%=hnlFCgN<sJp^8jZ,<gTrA">Q;)IUkec46<LX&@nh\s>!FOD^_)LBk-C,XFPnR9,cJ5VA6#IKaQ>TRL<bd.5fcOjOBmmats!$TUq
%/Ygt'oeoZ7!013Jp4(f@2iTQm=/m23ZDBK#.#;Ol5cW\epkSgKV)pmHQC@2r5;fJ^!Rh)>#>fmep.qgIklKfTm5G$7@!<SMB/]/9
%Y;8tSU<tLog8l5c!D2moI7.c.Jm<rdCK#d8U]GC.I0e63=fU^t=%IL#^JcQ[4X&JP$/porL/tDAXu+$*G:1]6cPqRt5M_e4KUiSr
%7m'G8[V[q"_#4.3&`%,9(_*2M"[h<V;ZAEB"su0DoD)OhgogQ4"nFeYQFpK^8jC@To84.r+;+.GTB]VY*OPi%b');Mh]9e;Yhm%6
%Kk3sL5!lHQ)c'I8-Dh#/'aShp=M]CU,Q.OaVm96Q<CgN-YTcBuq[m/L>iG?k9(6<%[D4`k.@N._)Hja_+'Spp[][u(rQs$s'uX;<
%c&PfPj&h82Ni3#Lh,MUnU"``g_Q@aDN;B_*1LG<?-E^ls!1Ga$>uf^_RmjH.Wjb%^2COp`1Xl:_?J"jj_/,YQ$pFOK.@SktImu.7
%r:Q<jo0$mAd`U[#+&qhM>.Z\mNU<$GO2>URUT5n-_`5Rd[u@Q?-oapIZYoH8'$L&Z*S^4WC2I1aN.:KIDIXQMolWjhX#2'V2*888
%aYGr[pL0&i=k@KG=2_[(0]t=#l>()ch=@t57]0"]Os>R9+IZjX:!G0b@,bdBk1freD/%7<9*<9crIT;4Aa$=QLWBdlnn)f(%VF=4
%%Js]#4n8I^f]lH?,Z3XA[mA]`3ID)o3/8#qqf?-k?K$7(h-sk\C]:<@o6kYa6`eL7H<[lXe9qN!DqgU.)n&d(lA#9'Q&ZLH?3q9c
%ND@Z`#+!th'DP5sZ$c_>+BIjn#Yt:oDc_908-HbQWe:(g#%W;kFoRTaNnjasr88`!ki)GcJm#5OeBsk0?d<JI'kYHel/;V/?T4Fb
%cN[:++kAX"2HfilO6KabJC^0ti</2lg*;K4=?89,)P;+.,eYk3s/FWII<MmU*qE\Q'$0i8Y^L"5;4P/PGAY``S'C9l4j=2BA^-B=
%7g?C.^j)d4K8)t^<[Kg048=.'1K#4(X%Z-(U,h%E[reo4^C.XN5`BLDDgT9=^C?.!FpL"A8ms'j$oj&H/<fMOlWm@ILE6GFpsjXV
%mOQcu;_92,Tg)sB:b?W'>-g%\CBgC[eVt@.,1\1A#$lV.J_D2.dd!j&q58,<E9X%o(9;tY]i>41Bg)-5bHu)]Coe*2eiqIXUgG3K
%ll53TeRDqD]Oh3/Qt')NaY$;+%e[-TBae\0?#[k!E'A4kn#?>k/t`_A-&A6-oGtmnM+E[6,\Ot;kNSJs,d>=L%d)Zu_'-$L?`OD8
%JA=tpZ[PY0+!9VB&FAp8f1&GE.[U/<@1`8[b0W=XP(j$f9UfJ#2i'hP>Z/W,EKiTP?nfqaqbll=RRD5@2QfK[PM/4&fDFgMqQj<5
%\%p-RPjgLjYubm(ZrS8+YG5LmRaESdU9tNi/25UT>K80r++Ss``aJ%re;V7e?2S?>krpn"gN)(2&piFdAssI`2dhY1,4s71r4&.=
%2EL)3d-$IXB%sJDbHroXgE)p*pP[r>gd#iY%W&3$!,#DP\t;Elr*ce9\DDu\a4")4Eo>dl(P/)r]=puS_gJZ_1C?3GW)<aVXM,!$
%<:XJZ0I+46Bf&(6_KBgf?0F4/V4b9M%@'=a$+&(Wd+5up'M]*1b5:\81=5\N+D,#3b.cjg?d]!'DnR<4pj@/(MS:.,1ePTnTn]N?
%:1n18dagX;X,b'1&d/8*nsBs36s4FI:X-^TM0i%oMbXH9h*).@=Y]3Q)aLN22!ftJqTr+LoA_^NFXu5a$<5&tPftJYh8Y-B4Zj:_
%k<"Q3_oY!U<]Ou"#/j5gKR=05!j8qG>6"6<#%PK*V]&JtGWkOppjEHjJ@b''/Ft2j)e*j$f@u(2Isuo^]@<jII_B6p-r?nrITMg9
%aG)6c0]@K`941k-CUkRC"8Eo=Xf"W?X>_m3IFg(r=M)%6m4A>c@+9W9.)n?Q+RumKpJiWcM.6u8_LfnM\8&qtNLsqto<s^18s\0,
%#R3X="8r'eE7VfGYn+moCpU'CmIqIM7g$unTVHK-D%GY!&b)Ho)=Nh%]V/K9p;fp45kepN!dJZ2j7K:u[);#%#M+q;[B,8=I+S!6
%>e<r$kp/KR>AZX7?T&`?MmUAj"!bPSR,/<3od:3tmJ!;.EeiGIrIGA#+Ln$*#JJYjlqcpj38Vp]@(WF)UohC%/VMPhbdX&q^HOg#
%p,<%"O0ee7\&-&%J:@$2"O+/X<N!bo5bDA6^&dH-a5NcB4+O[`o`6I#]_=q8P*IqqP.gs2[S$!k*!4N:O8T3Ugi6DA(jYV'#R$<h
%[L8-^^abmekriIK5YbeGI\$DOK%6=7?4$WPYRaZg;I_D<$FETQj1\2:+gJ$mKt&i6<eAnQBPoNd)](sF&>iW#o0(bN4jf]uWU]<1
%YcA:Kg=6]i@N&j=;hU2O_,(X#_H[VfO0ss7h07S!dO^N4CAT%:JH3,?/Reqa_@>$Y#;Vfua1>%T-K'Na(pRGVc5D,topfo"oH*'i
%+e@2WFtKhT_6$LKQCZ1p]<ubW<#-uI0oJ4alM[oEksJt.MU&+)UQ;r'mF.p/O3/6u,gC#Rl>7KaA#C^9?2eB'2';8L*b<LQ_UQYk
%>$CMt?%0.E9okh+^g2mJpuSnJotsP\2Hk5d2H$ge`6)[(YYD!cU*0`2B$7&o^>[f3^01(Ke"6h;MmBDo/f+qINEZE%SU8*(9D[6"
%7[M3$Hm4bO`$>o*9MT7P$9Q:$2liDa>K[WGEc%FU3Y'-(eo%7on^R4"Vu:C^jb0=]gC)H_?:p[DLn=!O*st(Kg"YW+W7<?=knJ??
%/@'j]cS4bIF7O%)=boQ8_^j-Z[8oBC52b"#QtRc2\%5E5G5Q(C,TGPRoR+O.g+F\hiT6t=@qEhb0VFq005ek_]6<c@/hUCaem](E
%gBRN/e^\MN^6;;!$Q&?rqXOduPH6J8`Nd*.aD+.-5In=a'b]Ks[mqHlgUN/Zf$\ciNHVh:RTs(`U]\6j$4K;cQ%"*?mNa<,(NR/0
%X^>sFi`/';Q*8jaMEEL;95O;J]",.p5s'Zi[hJL3pEk8kH:__k)1OcE4>4YDU%p%+`2-N&^bG%p@'u4KM'mjB<Hs=9`YSBHebIPG
%j(^EUI$ROkSX&U6rV:3(<75OVa]M8;Z;iqBbH,KbALor])#*phG^XRE3Fo8KG%0/&dL.61N(3NA4:EH'cL7L4Anef\\oeimQQ*D<
%L+KO;.t#PjA_>Pe#2AILPh^2L"6JTT?,#6bnqN9/f7;!0iDq).VT8"CY!I';at?-sREbPce=%lH+dus(7[i5#'B]8Yk'?c7K.G7)
%Oaad/Mh'6aZnd\Y\WJM?P9uH-4'i:e+\+fDb?9S5Rm0TLCR[t2s6@"G_asR?4m@ZN^bAH%/gHH2X4ul5kL8Q^l@?`!el%R92suRH
%J-947X4uC.2(lH2[,lCOZ*bGu59J\pDY@ZNr>iqtmP"VUhsX:uY!3(JY]Yh"\j4t;Im!NlaIUi84+_Q+4dTW3jR[,lZ@;;+d^8+i
%\5YRPg"]4aCrZn5Or_^tPR_1,N^j\;a`ghXn5/pAFnrPrku!9EmuXp5fD<00ortjUA_NE;XQ3;k6;m#K$a+Bn7kQ3VY\+e"ot[`%
%a+__8FO[UrB>V[I`=Cji+rZaM**cWNNLT53-oHcW+!c9$<0XrG'ataYh<G-kaZ:ARp;IL9A!\o`8)$qhN(+0J>cb/JG@"3hKUW(>
%mrJHVnmbl)D;%Y8LlIRtF/nNi^eu\MW(Nu>W?S[ZP12(!NR;fOOkrb[7=+%9m`$=A=X%pVTuT!ilp3V!H'U>.$;dlTq3T)em.`bn
%QqgWS'o"k"QIC\2j,-se0mqW5f;5U-Icllbh7AX8($;tp-3;$"4S7[pDJ`7+Ytd4)f^MRGj2-1,hbglrHs3k#>B<55?&]+[,;b6f
%+J;=DD*oME1N\i@K(GDD5$ehLA#TJiI2YKs4'^Uq^Y\F>qK**'NJCjWZR`Z]6b*fP5OKoNNNGI7G#2>uP@B55o-nulaCsh&EcMK(
%Cp#OmgE&deWAX:'9.rjUQb`BVROZioQF\:P7B((P9J>3QB>IVd/]UWPXd)2^'5\7RiNaSu<`d/CK<'A5L)I5Z?%@]D6!cTIA7#]1
%O:,2o8lfEEpHpRl1nB($qPs`20YgC'<(ed&r7Vkd"K2cTSq4p`^od$nWO5',$OD#u!@iQ/Ye%Lon`8;(IP'8I(rf,bOn0eg+aJ%2
%(J8VC`$"l@@.UbRV!s)Uk[M3=c\.Ef2gn,[PoX@'Ln5F7jkS_O.9jGLMt'I>KbP>.\50?@M/3kjD1eXj>DunDfO<A5M4Iu-2@MD>
%&-X@spbe'I1-qKW?_r.942G:5aQ'rG'%dtt?,\]hBitij:Uu8H<XM,Nd6]'?[Np30`=_C6h[pk5#9<.Vg7/(bmth;N_<L%%SB)re
%)sA\>-\IdaS8h_'TE;Pj88nH880=U+_F]e-Q$hs3%D0gp'9kTn_-[Km4+1jA@%85`AFh6jdN_)MOL-sjjrcR1%W9&)?e<L=i<0QF
%_@68Pd];7c6%k>7Qm,`;YPqVO<H%*WrZkm=@>8Z\'>/PB675Jkp$e]Np:iYO2HDqFa9D]YH[,5FAQ3[jCu1u>(<)PP:mWA1IB4%U
%GT:!Z<#15QO`>.>diMXMLATU@Skc$[/GXF!e1P\9$90.e6`f,3$SMNM@`69b9VaVd>gJ@*;0B*7'3^QJh3*+m'(6/:TfS&2d^%L#
%p,HhYOR)/pkCeue`$*iHDZhi=;b:DMa5dnF5n@%"3Y,<-S3QV*,?/0tfP0I3!!:Gueqj?^(![>YkpXa+@$ochh$5'\(m"qGQHmV3
%B)9=rX@+:,cG,f/^YJ/O[a;lVN%kkmN2BI)E%')#2pe3%]^k>Qo#@\kclC!#AV^YF2fGQtEo]9NNq'N2I?GlbUU3YA#8fobpDGt+
%>,qqNK:NfeE1$EQ*]n6$cXM/]dn$TQf)rq*f$dK=Z.7)Z:4rN;N/j"1.D3TZ'Cd'!Cn.H)0glsO;_^<P`cWC*OX$^/e!PNpJ"#0%
%<Z];(&/4g+19lIi'9&WU\Xb>'G2('KjhugT.1WNY2V^qW_XFB<n)kE2jQNHVfUFFah<>0db"4\0DWG[XUe\TKBJ@_QF#WQ#95g\"
%0[*q5e/)(PN[EbPZ/]rsq;NQ+4A5"&8n7At6JiLnaKkambGSnbB,Big9hpA2YM]#b6@j<+qcSc2[*gHECaYiA_&YSR$,?EE!Sm3c
%U:PZ9=?![t2B7/TPA2LGWIa\se,=)#D;$*SEdNHC0If;J<JE&iI7Ha3B(B!JZ*[6E]rq[O]fIJ]rUaJW2].p^>13upJ5UYMrV3V!
%-?lZS$=rNQNo>/8_pNp/r5%-M*6+,J<-R9@P@WckFVh-&3lqQK.B87NSOJm<;BpA"\Q!oK^Z>%ch9(++ea,D=MeYWDMSSB._YT69
%Qa6MYP?\g+\S<*EKn.J!@dN/(J"BC>bM=9:12ed"Eii9a1"h1gX.MtE(+6WX)Y,4P^%H<FDXTbOFQMg@$u?=o`+t./&GYE<IHB;#
%Wm#n(`bkPK5P,9ebXT-?B@*Or+i1AZFV.:Sa,L#R6TY=ud@_,]_C)BGkLrRQKRt2'**g`SMHTT_GCCOTn!9Ss2d7%64nG_-%tk6n
%JI\TQi)Ri/B[_.)m1/*^H3,E/L:Pp/O$Yr$cshp\aOtTYTW#keosmViPC&<)cEo)=@AD,DDkfEgB.qc@eYArNXJaUtB&tVT@=+Z$
%Xr7iEk#.37Td&RpR`o_KCaiL$o_aJZ4>7FJj!PQ)F>-dWUm'dq\%7!1\+7+'(Y+%eI^9,k*7$fJ#t^7<gX:Nu)*TX-U)QVK[@Y\o
%89=$-_Pnl6#_lM9VNG,uN't9'?.RW.qY_Y%[-c(T2nA%;du,di4[0a$*,hTV)[])qK_TPB^BS_N[Ss4W;J!Xtoq`0&8m7U3;5,!G
%01MbC=+#mC>c%b<U@t(RphCE,d-/G-f<1o4deSDXG<hPrV"8a9G^(6#lE0(tM(th%X>#]P>k4P,37f6Z5-JT,i;%O3;@cIm/m0VK
%Ys=g_1ClQ%0cIYqQ#cQU8/1/b1S5Fu?sV;C\\3H6*\1crW/k]Wp%10F;(JGc@_'t\]+*e,W;tO'<ff6B;%N=q>O*CjfbFcsDU6`A
%Om;f,W8.)>"$$8?O1stFo_oBBY>.b?[[tA&hYEVh#&M:=Xg%:-8dA$I3:\"mb\"A6+$GsKP<K>mlOB]m6;tL^[Ps5MU61ba^.-D!
%,J4%R=ZJ3<hLm'q)s),1jYb,%.*8F>bNX[4eRF6.`l@>e]Y\W'01L'DpnUZP2J?o5aV%b4fIC1`JFXrrA#G%EbA.-HD^ULG_fg,H
%]r4LadcGB+-uluM$QGqF^QCI7dS2Jq3mGWt$dO4?rVLk)3"tF"*SB8kWdD3hgBir^7YX4a%]%1^6EH>tR_KNsNE/">6'AM$mtujP
%fNUd';>+lcK+!SJ.--ksiqde53%UtK;[Q/*q=MT&;B@Ms]hR<IgEfb+Hqi$p4&q6C"CRUV_c?[_<[]NpLI>`%e*AsY'X\q6aAS5W
%rHe?qPjHYm'<sWT*MXLR%]5G*"gM-@V"7T%YuDknX/Aann/-'DRW7Ia&G->Kk#0#lF03dsgE99BSF=t%S(fN"-ApEEbgMkBoQY6+
%hN&%GF(]i(\&,F$>b1Y.W0]dEQ4-^8*'nn61'\OjMON`NpTZsj#`JUCA.[@-^Q/h)nK4T[=#i?cE5e+J7bp*b.OWCKF_tg2"6L@!
%UOQNql<@b5P0M%I32!Rj[1@#$=-(SgA4>=X-]9LpU7-M;2UepWF,naH7t_(8!#GbsNY:Zeab,5jFW//;-i$S"`E!')NS*K#Q`Co'
%E!1l;Be(4YN_>9^0q$GSMm#fO4Vn7dgmt0J%4;ZAF'.WEdA5$p:@9SPAaBY0I']46YH5!jkFUX".L-m15Cu)e-j0G=.tJg;5imTF
%hd-5=/rhLA3HU(Q".;VPXkk,DVj"[/I!W%DJ=X6tT;$`2>3IK5'-4oeIb[@-!b68"4qWGIpS+.NE,b_/#dq$t7HRg)9(B*MD8$c!
%!qETrTO#2tS&136MeTA#'./56LT]JT-D-9=_+J-P+7/QI)&)=gQruRY),.0h;ct=C]qk.'"mFM(Do`7enr$.Uq;'f]`SETZKVm<<
%!4K5u3tQu,!f9^o;C@<pV<D>CHsGJI&Dh8<btP;Df-H04KLNs=U33bR):@!_\[.;Dm@OjI3`rH8iR3jr\UL.M>1*U\H)k1A#7bq-
%5u&)U4h7-(+6p+YYuRJ(,q$r#`>`m@o0<9jh.s^re?eU^a=nG.VC"f.NcVIQkDXcT?plN5Bc(^VA+9asYqDjp%i<d*UOqNc9e:B4
%%a3Q$nN?7E)N&:4QVp7n0D#9M@Hlc(V*/GQif2Kb!MA23["4TTkNEQ2D%,b5)!Pm&!FOfC%]8dsN8.W_JT*_me8s'VQp+`tQg(>A
%990IO32Am&O:S/T"JcW+^mp-Xp%\-"/t1"K:[I.k+HXV9e-oW.MUf*=M3q37;T@T7H68JTa2GC=EP\ajiEGhaPeOQXaiX_\bYj'6
%1sYt=S&sIPDN:Ya(E3Wa8qi8"qdLrOGgA6DdeM\Qr:Q^JD<^QkDh&a%.C$tDDST=Y#*P7Jf">N8fN[TqH?aj_(up)4#rp@>OZ2]0
%o=1O%3m&C*f]42H&@@h/]POV7`PHjofkoKR%flaFN-6(U#;>8'#Q&]u8U^2ZY0Sqn&NgEY[OWr6,e**f7e(`FmGmuC$JF%f?M_LP
%$`0WAH=;%e:EoYp(n5F"O99DA%94,[E,Bgn=t/7(MM9\Onk!(A7P%]gLir)dcZ)mIjfg%"fR^XVE%*S?^"Id)a)]SY`aQJh%Ta;i
%l%N,5PGNq59<K,t-$b\Ml)Eu@-IjV\&s,6>IQib*8rG-ln/PJ'G)6Bt7*AlZKu^n"FKuQ)bF9jjL+J+Cl"98n4DH#VY=1?::=q>M
%jV&KCI&Bg/D[)o$dHU:6/hR@W\BcL%hFKg>QqdmZ0^hil+l?GheBC*KgFpCs?t,++N\><_;epSs5<R+HqB]E60CZuj"qkeMAS")/
%][T_CmC)b4Y9$l.`*i;gkRHhO)!"X3\%nMhddrWEZF9o:d1.#[K9nQc;m3">SHNbnW_M_/='c,s4^1Q4Z2r%L:JTN)qu-pYL][fu
%Z-rG@,t:!bH8-pgN-*nY7S-6+>sC31(%Z=.'Um#W^)bB==0S]0f^4>rpT]A:T[FVWgetAH.WsnAQ/b$AT^lmqOn?QFq8Og@]oEFK
%F2X=SGP%8IWhu,&%:'j?FK^=_Zl:f.g?Z7[j>_Et>g3d2IJ6IP`kHVFfI+L3Z@)eZnR6`hG;6e_kiGO#6!Z$pPP_EPio&1+HQcB=
%Y*I,;KF;\<Bl;-H+nm'4OP:bTOl+:.aF1!#.jX0\a@sd=Lp)T@Ql4B%rRoS)pcpACNSL)Dj^tC*-L[Po333MKld>BCDdYVHAPbd)
%'6#"M;H)hVh/'.,eLBil;U6Y'hft:kTrVr]jU]>^X3IrYTKZX`0\JTO@io=sLAtj'ok&?CoTE`#6;?J17=Sd#Kp88c#KabaE>Qg#
%M_+o.[ei,rLUZ=jaXo"qO(2eeoaX!h@9UCK*6fJ41D9FIk*"taJn6bKEN?/KfUVZ2B8-na]\\"iL$d`tiYj^=\4u_2=e+bQK+f<8
%UULW"E"4A9XERI:%*dgSi,hJ^:t==3:U>/8?.FAK@8:06\+.Vu[dUE"hXn4`5EQCYdt`;XP39F3_CaD(Xc5R=[s3)":^R$Eg8&6R
%ZV@&2lM-_!n[7ZOW7gh-AHRE*e"E6qiRRHfP<S.K&<Sgl%,C0A#q5Uc'0@].5(fB<epMV"55,F<HdQ$!\l#2'CpZ:#.S_tP9Tl`<
%rQaWJc?MUj%a<Y.oI"1VI@XsZn+[C-+e,D587q(rA/VK[N^%WRP1J@\KjHl#oY4XMS6j<I1i"^OHcOZBb_"W_&Ka%A2%GqI.KpOR
%?d1>I;BV3C2O_5ncKr>4hKNRn[l#jF<k$tk-X/cY!QLTrd>M2t7ZaL<ULt(`o&NIUWV6lAp2#V-AmdlS;cM<]>)V6-A*C+74rW&'
%U"M7q<Qf4B8WZ8bH0D;WkF<rK`9%-ZO<;%akp,2I\NT)''mP@Gh)TLo0W[LZ5)'q;=</o\]gH"6O$rVNSt&eU"-LAGraf9@^57$N
%V-(hpMjg3eId,GIKf8D+,geh4G$m/MXt\\>ZsW8EqS)%r+q9Lq>d*`F&e0-i2f-IBJrmmeR52"uW#34c0Q51fmA2RJc]a>9egn<2
%;!Q(WkS$IlH3V!*W=_;:0`GCWi@!I;&bR<bqtL\p+M:?*PgFVbm&cJcUZ'[Ur`(+]@:R,^JjCYM)7$:b]%QLM7j$Qad='#[KuC/*
%me,dq4+`)t&)3kCqj`ZU34<fS>R(?l^hDr#ZM1/(==FH-Jpl77j?#f#T%UJHOaaH<#7fk@EtHbckXSC('h6Ks^E!PV[42SiLZaBl
%BN-fm02t#m@T,)JD&;mG;&O9^hO*65(S8=0;:+'(:kK*Bf93j>2of-7RO*b+7V0l!I3!fagZO5Irm?S>2[DG1K\e]Pr/'1shDK*o
%#4YX3FBg(K+9dkR!Yi'1M-e%ZHG]$.,B'i54g3lj]s*iYFFN`C>5pi5jn7R-[<Kroq>L:l8'UGA+8f3pgO+&?GYa<p[7+j]T!'-Z
%BDKW2heudSrZu"A1qIZH[8eH"Gl*PBI+>3ZK"sVNr8[MV+-V0Rb4;([+5!4'j_QZ@3rZ&W%h.L]U=MnjKb"P,IP&M!];I];=?M.!
%k*4\H<8XN.>,ics(d5W\$,VJZAb%_O=N^!jf*M0jkEX*uIQaRDL$R.kIP$\c1$+(,_2#fGG.nhmEmGKq'\pR/=HhNG%`d/Yb6gS\
%SaJ,]Nd1?+G(bpS&k9L;NaKn-`FSa#e:nJWQMd1Hkgg,j4i=IseDp6q!'b/dLFU<SC=+54.5i["9bJCnJ97N+\+Pf(/[_UX@Y'q?
%D^IQN0V@0(iT'6t>cdGC?;.9V.icntE0i%,Ctt,+biD'F^F)u*o]/SH%61R1S+g!pA;3>0Opa2fbi:^1qThB!XT^6OW]\b_?L@:d
%*ll#$UQL7C'o.Jn[;4JUnEYZ0e<upr>-C,O7XQ30pArh+K6q:8)-u12%:mlV"8n<Bm8$h265)T*mjS,$;4-1!?X9;D:<P^ln^REJ
%5\:]95J>jU-F[bpW?q.VAN,&g4iV7VjgF<qPn>+"W.)4r-u[c0!"$e@2;Gq8e4FSU1WPZ#:r;g[HQ0#b_^p`#1??tb2LQk@$_>^1
%s/aiG&,`K_[O$-U=Sj&_WKF)6^)fj`ghqmeYt[u!=42)oR^%<<=V^#;%=9ugT>O3s]m#tr12EH5_:<o:q"_Q@&#gp8GS"k_/6YR0
%I(V'a(5L08WctBiF!pi=G1MW649"M[4N1<DA#pE^o8(A'c23f&`X`Th7iCW3oH,:$s7kc0CreiU?>B8ub'VH`J+>o+iO';Is3A?<
%1S&S((0nD>o*:=/?i2Dnl3\,Hb$>!eZo;rZhr`Ag;doZf/jf6]BKQ!bi(kL1ErV;PDWu&V5JNLHnh4s_7K9(j>.h4bN'!*ub8\[.
%5Hn)$nHW!<e%]o7$2[e"k2QBJoD<TYkVi,#%i7T!s8%qaj_#LB'0k6;F[&*/0DP@gRH,0N2Y[0ugAJWkAfiS=&j>=SC0K9]Dk-Xl
%rK0tag#V$o\rcmFg\]%jSb&s2J$d>#qVrMF8Uo`3rkY41Z53B&ge6/3\(J:bB9$3fre"#pk0Ie#&,r>peY#.9,\?m$`L,W1B+>+F
%)0:)c5OU_\q(L"#PlLSg$eOS>\!La5s8JgCl[LIAC]<>hC#342Cb>E4jmB.aC212l[`%P.)]Mj3Ie,P3l[L?h]_LkODK!gmd5l@?
%Xn^l1;LEq-/l95DRp/VR0QWr]io;#"W(#inp94S8b_aXbqfBp-EaUN*dCc%)?Ih$tU=Rl<>bZP5T1e&`#]lEG9RSO?]6?A]>Wrka
%:?s:P\MO,q0R(K$8%5c"gtY9Rs"IMj^sJ?;L7:!ETS(73lY`kj;fKQuc<`\uk3)<d_YfS$;k4F;`JaOg?J:l]q($#_>iJiJQ%mk]
%hgCA^k+ej#fCR+ZrT!^e4HlA_?IZFGF13O6I,T?$1k.A)>b8]/>BBC>::'*UVgN"RR6,YJ@HO&WM<]J8.JC,&GJ$jW=C+W_/Zdgt
%<Yq.E_=N9B5AMgK[gt,"gBT>166aN(0C856d)+c,Kt)*5f%sT?#]K&^god:4(:9(sRt]#D6$8mpf^:;tm+q0*5LR@M*/dIV8(kl3
%cLU?HH_`M8,s/QH\9YHg]bkB3q8M1T8TjRm?n8aSQc%4iX#^&tn\/=V=Y)cVdc0l9@rAPO.5dFhAPH91Y*DeK_Fom>Os&(>Q8WdM
%bu3&IiUZfmY&o,sFEgr(/es]'[[+'lG)K!3@gG_'\p1R29O<C=3hbKNnl#?/ZlING0:.Ca]C9k%,]^L:5;7fQb]1A0S@dV6=hZQk
%Xl]FTol.Gc?*,_<ZC-JZ],'3gCUh$jjU["pl=E4YV2`:AZXO/;l,[Go&8YmMd*+-HDJup\TY01)#3p1t$J=m$\_qL50*Tr@X1=mn
%c#*c1mb?^YmRsi+b_9ioi8oFI,5>jJ%t_fE!J^uqe.lt71&8,d&mi/;?]jc>0.T,26>^:p?dMkLQ:u/Wb1,l]MKS<0V.SN=XOu[Q
%c"\s-FLTCAk/1qEDm$U=Ht4_-7r-6ClG__Y[AqKZ(K[4>Q11e:G:LKaCOq9:p_oLE*3F(4baZ">4)M&>QeM%H=*HZRXn9]4ef)N]
%7;/i,W.dQrgT)KC,8:O)Na=>)#PErl3Yu`1d,XN4@Ajr*XbJl4f1^EHIWH?lQAY?S[+`B*_?]7TMsu"8F!7V*SF)$rqp#!6gciK`
%*]cG9Xt/UZEBV_&]3deZYkdtXZi0cD&4^a=-$N^,!eJuN_k53*QlT$s1])?5SiM9m?80>3?=]KY0Y<\Yi"@Wb*X10KXaI@qAi/Y3
%4YpZ0/[>\HD=6N2\]#@0`c55+X5(.OWcJE%q^_)T-+qEdot8M^AET<T?o$X#,pE')-cF%]4t"DFq)`^Bb!0O2'OgFh(q0_XlZQ`;
%f\2RVK`.t%3T5!i_%u[DKso@j(Y[k`D8d:@$[GM&9dCLnZh<@O=:.2Gilg&5/?Q"lG9hljglp1Vot46`bs+b<HCun(W)lX_b,lf.
%C9UB,Ms]@C>fu6a>YQhTk).qHUU)sC^/-`^p0,U)+tb:qgQ<`"3/Bc!o>a^'jn+1q)IGODW@+\1VY[5EJEAAOCE"eDe]Gg#HHm&`
%CM.kO9!>Z]N5AU.L5@H$eBNf2fM+l!alR]AOM&b+aqsru&R/`t2OV@n\/A"')k4BQ.C6!&\&$=Ub4XdqB]gkM[CoHJDB3HAdal>3
%_SK8g?f\]JFq:\AX^ps>qrhE6Zi+ikLa'(Z10R=4ThqJlZ[HB?m2WU@\K*98QJA`KRMoHrhHc2^A:?P-%kRRPj[Q?eoAAHU@_?ko
%`)>]tVqAu;74%Z?XB"<(S$hFhHI?NG%pFo,^Q7j/a'2SY'pes=7k8s2`auUmH/%1O</S<Nab@o53@Q$l[?LL.iGeAUU)H\5*Y7kA
%oqcLM'j"FfWO#fY/7kn>Y0tK0cg>gb]rIrjo\*HZG\jj5r>WST>qr/1mq./A36^gH@d.k+AMn/g1$V&60:B.]H^E:4p0M7*rfgP9
%*,K7s_;KCsm&$#g4KH*FI^$^1m;M=^X8D]ZokqNjY&>BbNc3VV>M&W4#EV6N?p"l[)c3W:m+)8o8*mPWjk*26H@GI5(hEU.LYG9\
%EEG1V\ARKS`.,-D5?3bR;X3E.6C^8$C2D`RO2Hb;aDpdBiJqj=3bubhWS2BQX(q7:bg(&QpL)n5-iU_Mk<qn2F!o"C?kJ,RWN8_.
%e%g9i3SiYdjjS9^IHRtWFLIfKf9aeR]BcB6r;CW><Ue>jXqm8=c=S6/&NDC*fp1RM9'La&/:MZEEH[n6St&r;8F9ZphdXnBX4rEm
%Q)3"%751;L@$ll);s!B*>$7B-YU\D,953k_q=8bf&@m1g*L<j/*uF"=jP<u/lL'C*Y5Oed\_a8sGHM<h)s28f(!PO=Q1iAF!WR7k
%;nao&hZgP^rnGAcEIE1<Ci/)*n%s=.lRm4b;7ntPa_1(d6=%;A1hlsgfRI2;2rp71L[`u"l6-gKjbM8qFnII;A3,d.-<ki0^TgGc
%6Df".m6o8R[-MBXYB;V2P@ET0QReYocZ;NjV0H0ANbgg*;TcK%S!&&YdE9nkdrY>\`)u-@q+X[%p)-`RD-b3TH6RB5iV-YNQ/deG
%:8M!JnkVBgB:b.T9+Oh+[ct!d-d>1>\)'*Jen^R_#e.X+EH8L-@l07P(mmK[\PhQMJ%OEZDEVR>C?e^1>WYa$jBDGkV:@M'-VF?;
%_s35lbJn]M\s[Inm^_t=F#fmG2cIodD6pUpCmf'ZfJ`Kup^=E3gtljebjg'2Q[a6rRB-=8)!484g_O6L1>88[kJOkG%H!^\%kI3g
%41JBiLKB"5A[V]a^]RZWE6S3G!d,[VcBaA<oQ+^*'')DQZ`C:4?608blVH1'gMf_WqeODee@jc2-#K;c'cF>e4n)M-OVa]Dii?&K
%5+OnB?H5Z='BhN$=m)'_XH2tpWXmuJ$\'lp&KA'q5Q2HqK>)/c<!$Np4mq];B:5Q6_\[RmRo^\`5"^+_!J&LB=.J=K*q8!qj<_U.
%J,SoP%f*=*en\7sH'u>3>#76MDHoJ(3:a@j:1;9%X=O\KQk0.^?FtNu1,"CtOGaYtZ!g\!ARC(sE?['_7R`S2+4#Td<g'^V%*O7D
%qKP3Ja?406_jmgt^(NOVL..\2TMajE>?:A&n0$&?(?gWU"J6gp]6d!#+p&<>.*0cMb0ia#?[O#;@8;tV$PSh/J[VM9o:Q)3_fO2E
%Z[t^QA6FHg5(uG94.r7Fd"2A;hpB6XoJhjnaMYXndO9f<L0&d9+')NIUb.H(P^j6'=V,8).KDcm6%ob($>G]T!"A>6f7e3r6D5Z)
%j[b<FW"auOa@*:-P\CdSLn]WLjCj?J!'_U)$KuI<K"qp)`t3j&@[I`6>neE[U.RULL$'1]R)4W(Sd18W%)^KU3!jn]k?(1[K/?+Y
%TGgiJ=TURM%&8ub.kl+.,>Ed*3AVCMaa$nsbOD_lIhi5u=U(I?HK/+)JJJEFUe8!QQ/r;k=Ur(&H.jaQN8S2C:t.*?,69#k?3n`3
%_GZQiVT_\A6)GV<J67=7b:@!uil/(m!:s>'-G]-'SV3.V&uMla+:4EC.hBQ#%='8OTEpfIrce(%iWbc(_[@+'%BM/#j0946O&L,`
%*a_E]<F6m4]=]9J__F2?>/-q'pl`'=lI"V/=#C:k3:fREJk*SU9oBNhe0fM1CDsVUn5Z$r-(D)R'gDS-]u!Fk^TL`/oY8a)GhS^3
%/O$i3'gJg*/3(nOg%=ftbY]rZk6Uus"T_s4cNEQ'NjqHE_\W"qEC?X0ImB&CU$<50iIT[PJ1<%c-UC0b!BL:cLd$o1?7%o[5p.A'
%"JS6($+(ImObb%i:?GOX"[=4K5V(nM&O]IsIglhgUCagKi$X75&ZD`k@a%-I+?Z=H1,&/s1E"u)!(s@!A3d@(15[4N.L+PB8WJou
%pCB'(,[40`]En?9HiUR<W+hBmN^t;LU4NKa-P],A8YCtSLUmYVb!7$*/%UsoT:$\>"+2?0QahQ!lMMPBa=AIL`X/%"(O6&6Iut\b
%8$+ao5cmFL'k@_&"[PTE&cc8FJmPZUX9]"<=sWl5*qQ)/>MOGd<hJ[(W5os/nYAfkJ=h'`oa)VJ/D@EEAju2"$$]2J1IPdTg^"/)
%%/h<dOe+g5=BY/#^aN'u#P$%SU-OB_3&I-d9Lfi66AfG88IGlf$8Nd!qk8ID%eD/#iIH`V8=U-.&_eT'Q&7sKGQC"AXce8D+lIa_
%9dS1h&t@QM&E*"4b\gB]LO&_LFS2\^`P"'7j=JOKMnGm2IY#+:-3$)WIufac6=7iK@`bU4TV/0'&A&O>k<r>S$V;>:WaP&aqSVW`
%&t$Wd'Mks0Z7)Do!)!L<;a=Y)<91:i5pG<KTbpT.ScbCrTED^Faq3^/dR3qiPCZ17$ABegR$WULK\p<?;1-/o<@3hEr!&ZiO\m5^
%]L"qR!Fd6A+q_9-d0Kru-F)T:!09TU:n<[b$lK7+NYRmX3T.a*-mg:6LLUW"c!M_R4S_udK>[X;\T+Oh(CC)1'S@K-$s"&shLuK5
%UFZV1*$e[K<?RL@5(SKB%l1-eL7JlW19**!0n=?W/#^t]&/3M8N<5INVi_"@MA53/h%VR1_2'"#.QH48\L:4Ka]$pp"D;t65d:_F
%dMA.632E=B:k"!j'7^tqTL=d@_g;Z3&577Z+KN;7f+\,(c%Nml62&AjDWsmTF8gU`*_S07r$@5_-bi,,Hqj%\W:lgAI[XpP6HW+K
%3>+rbJ=n']/h$4V?%_:<O@Q%Ek.4.1kQd>L"U1C:ZGR!mj&?YMJktI4:EV`4/7?b$)o;k'hZ,".X?uu=!Hc@B05,uS;Pjq,'Yk<=
%a99Tkc$:2>\gV#SWD\5,C.*Y%n<P&6Zd>,=a=:41"HM+l82l)-W^updXCdt.&`NhRPT!rlMumFfJDgPslimS;.[EPS>FZm89-O^"
%6<(d>'3(WaLS,`i+HQ_F1iQM"N!:EjQXmo=jX#aGpmP/bU*uT$1`J,1R4!5h0aFPe5oN%43,0X_*c*8+,Jaqa-mFF7KHYN2(OPik
%X#5D/1ih4fi2TCTmD3%6_9rF\G):ml)>bT]4AlM0,=$ao9HVGL..[M"FBF:<-F(a6#b+@]6_5$='ct4]Q'=UG<[#F%/87BQLp\*i
%PaiL3)j)6ag]LDECkTo<To$8cd_[CL+2/rHDbO0Onq/cKN?a>l?fq_2J%j2CI/;$6JUmHpSG>lnlh=A2A=s3(d$HF5#!+\6UJh6p
%o0i^-BMh48%SS1qMuf1\<[GIJV,]LVm://A=t*!Hi%^;r>*f>L+\H,ajM!psnUP5MV;Q5Z=f%f)"+O^8<0S5c[ZJ!,m2++C_C:m8
%#i$.4ig-67<dC;GG#+oW$[O!!^-_>$Q%`',"6Vk6bbY&MKZ5r5IYlQ.k#[BK.e#lIs/(+@oI?b;AB9PRogg(B4#d<C[1LjgU)8SM
%+!er8`!lElkeS)X7-o]U/cS.BTd%+Q[@>U%1u2b(;L0-nTYQF?8'9Cj4X;BZ!/HE6P@[1%aLm^-YRD`W+:sSY!<hI*/8!72"BT;]
%@,7@7#aUTd2i[l'Pb?0$FAf'!n=3)Xr$obHe0&YeEJ9+L[.1Hc8<+fY&?0%E:'(PL"K5]1E'8_(FatUVU-eVY9N4t]#/U9NiDLp6
%15Hc^6ME65J9@0"3*Zd*kBL1G+9Wm(+qQnn,$DW',_IP=5`(Y&r"G1!W5gTP`05F=%>0r>!Al%E'#d?Ac0t`jUIpR*LTjg%i[mp$
%i@B!Sm.Z>JYDSL,_L[h[I3ND?8Zr+`'ElsCJXk'n,<_06037#C91)hB,ds5sHa**dhLlZdA3bd9Hl.IQ^lUiU8W/8@)Y>+&Xf4XF
%bc/:P7%,6-X3(f6lA\c@e1/W!HH$6IDfkC,`LOAd<R>`FjNF9X.mmYYG-VPM2/t!epe(Z!:OZ=)_4#gMkXeA:CLU*![P%qNW?H^b
%oUYZh0+._tnf@X9oE9FWfieI!O<B]?M?b;IU8Mms+8d>'9#K$ij(sjOD?C$'&Y,X/.oDs5M@-ZKA5"c>5X#oU9Uq<ROdK84]-9ht
%C8bO>R!/(]r!<pG6D2I7+X,B7&IZeo$@n5d=;]IEM'FPUKu;'?UE-()79p\n2cZ-Bp@,*7eK0t[DBK^Re5\TSjqTnX0F[DkC'>04
%.j.]h;bg__:,!T"R&W\PUWC;7'bVb\<0nFmdX@m$Tbd%-=N]Wt%83r,$Bi2^fGfD*TSPTULXo)a(=b.-`b^uQ!C`T$.)AMt@>j4a
%WYf9\!XktYY54=;!mi2R/)+J0Ga>F=@tgFsp5?.W,Gu]O&8"qJY)Ti,;G+ag$$$X+Ub]$8,mY,V*<`gVK!S`K_7h?@?0MQgX74W%
%.^\aP9qj&WK]b%%"d0P!9SCTf?S\mr&Bh>g!_Cg6igcF8*(,KM>;(1Z@UL(:R!Q>1Ni$,,"E5.KWN!pWdtqdh5!;7DPb`s[Ef5ZY
%?l_U1]-E'e+V[9O#c(<$q55)P922fZ0OPU+DEt<_\03?YOAt3T%pB<+0uPDiOZCQSOt484MJj4j:g''>&o\1eDAHdn1mV)(c2aN?
%$K_rX0<[nd2>\Y<7oe`/$,m[:Y0Pt^%%/LP(9l3>Wq[h-`8c^Vj@$&rGK=HEBm@[S1e>[>?NJsbku;A.#>DH*8rW*ZPX4bkl:I2H
%IWEZ+C+<=0lW/iV^rf0UAIq(WCVC/30S6PmWE`pP09X8)#WYV'Omq9=M'>eaO*a`SB6&J4%k\Co?Z;?d.!EGRd%TX\<3b1%&rnE.
%BQnN=$.lo,:6AO.RY9]>Qmtpu4)Tm&Pq!n5Vii#)k0-HU8Q;9nk[_:8fr"=tM;Kd,B*4834:<ltJ@PmeE_P&J5]:n=H5O&ZR".96
%L]fp6C1Dc7k86u/!Dp$*_%'/%'.4'q?EG\cWY6Xs&5ep9NtM%IW1+.M*!SSp(5U#N+s>Tggtr3u':ajaSM^0XeL<K\'J=`rB*EAc
%:907VTPtHT/Q5(#"H6>H'm[Bn#lPr7WAAU17H!-L?6\1_'Pa867A7>*<-48&j7@eJW7c\22(-bAM#2MtUbd#57DqIM(*:7XVU5N9
%0:;'7bb5Aq1LF&:F:8]'dZ>"K$&=WK1ssU!4W&MEU72>n*GJ)NED27?7YmKa>a3(8YV60>8=CYtc]1a#,`NL_@:1oZ^SotO)7ktV
%d%(q3Bot%>@)\'0$5)X?-cfR71#SkSO?h+VfJg+1oi`o\<Ho7[,?*$!qG0_4TSn=V:XR3:&QFlm]1WAk`kX!hFFb?6Ln#X[;:UN-
%Jp`]b&NN3a%Rd0^Rjms"W]5)rQJPTrP"$tii1^o_7d@e5A=i?pU2/\E6j$%:<sc"VX4_tQD>m87:#rp('J&X85R<:JUQXm$_E4ra
%9o3-XNMTNle0<Qi+B$a?aH9RpLu=iH,q+NU^L5UKa\d"O#/q4,9L5Jn,7HMf-=\G2&YS/c'p*H\NYe\n!->-tAd7%e5f6Q+pn9u&
%2"Ect'U3.`;?nctfA/9V8dlTa$0r`FJrl3")%\!SALZnOA2)%\j)I1)&S^$%^sUjK7tV,Z8OSkY,8b.enPW/4-"g'_>=@?4S5a^'
%Kc"R+0Y:^-g-700iD(cUf7^Kik]_jW=behe+N-pG"3$?:[l+gg_IL.P2%RH)]Y<__7,2?Hj8j9d"kRQ/FIS9*3K6-+mSQ;.OWD+J
%OCt4f(dZM;F%d-"Q@K6-Ud:Z4+%0pap2XV7%+*:?Kp1-k2)2V]\6!2]_b"l8i#FGCVs5ZY%,J#q(1*du;IEZ:94XAdW$0-U=!frp
%#X7-<BojE;<LreE,"W5I:_nkCo,*gGn\F5qKqu(<KOl!QK4kNG?((a3Z#jV-Q="29m,?e$oPlY>)!Z334G2u7+m=(i-aACq<[Jt.
%_&JmgaqZ33jq,&NphH\`C[E"pabk3&dA@4\"]PN*WJ%OPnq6XBm,fZ8/gH;(oLdCA%F7oN5l)jiP^pfS"7Qsj4d#.Bi^LHCp[rdg
%)k>).CP2%X\cKH0]T=TSZb_jc+W0un\C@KS3*!g>(Gn^Bi[i>p\9jSG4rBrVW1CsDG];=!R^so0r9a0En"LM*E'kIaiL31HBIhmZ
%@AF+YE#)[!@MVXi@3H;7$m!dG/sl]T%gdb/p3)77'*g4+]hMt35R0sq<8o6Dq&+C[]H6TiAWFZl4jGAp&jT<I"A*P^I3L:._t5r-
%1h#b^pWc-a7(jnLbVQVVLNk?*P[2/n$IG&12rB/!(0%MSY=JKj+UB7qQ?S7KN9cbY?F"Z;@"W,.a3n,s)JUr1\Aqt7S4Y"<*DCj*
%C0%m:2,Tmo8QtJC^h0;ZEQ#'?<WR;(Y=JLk%fORn`Sgt8)7MTQi0U?')B5JLj_91)GpGa."7'd/5QO\PMkIB3_D0Y*GJs.iRR,QH
%8f,qaUj5'Jnp8*.XSRoDRl#U$EH4J.CT.91.]PJ80B_4b9=Kp2iZS],]2;P'MkptSn1lS2MY*Qqj<VJs7)AL%(K"lp.,k_>Q$6[u
%0X]t-0],t?`LN-(I,2+kY6KC3I"T2l"\=2/@D3V>=DA,/,u/J#/=761[](,6.F%r,Rd=KIYMf5sDMoXc'/4*!(tNCH>B<VA(_WR!
%Qs/JMT[<eT)'>PVk/Y"g;E$lE?c(6:OTc@dTU(JB-kaIKMU3r<@B.1+k6Q@EkCYUS[2&aP'\Sm<c]cfKaFN0,&<FCiUL1=^h&pPi
%4o'b62m1T(1R/*@ZEE]0O.;XO*;_?E[%<%Z9Mq<LM%n5iE9rlh(nN^liShKeS'EPU.sB+p4KaZ:6i`oXV,G4ik&H\TXHH3@4reGp
%jA]<\,?7kfGIGniZZ>M>(;tGQfG?Y@7CS:e"(nI7#FpVG*JZOerYjeckSI+r^#lfqD&0WS9U18[2#(QX,9*G<elhO1!Z#Be+c5Vs
%'PS^/X*XE*-QYW!\uh,IK*%#s8]_<4fdr,[SLlLu#+L:IN5M$iINE-Hm#+ulR[E"K=ICIl">7@V`,81@G6\fB'"D7uV&P^',gJk^
%/GTQlGMPejA>dp%3pSg8h*d%!gaoSoYr$*?4l.GPALuE.q($]RP;6L_I+H4>.jCME3-p`@2i'D$,f+Kf1*_q#+]@^$X/uFM3^?0^
%M2O&-.$8o#fgL^eT?/]D4DWa.%ZO\`?Oo)h*8i^&`05QPD0YQ.LsMNo?qek%:A?+hZrW3"CZkgIDH">N4?S!<d'B?;_e;^XBZV%a
%5Oc%9"-)+OI!>W-YXR=N00*0cKR8/SO#RGk)2gGY/mlMdlneJVmf+Y+j-RsF,C=@E;`b.o%,iJN.4D0sj;a,pXTu@l-#h.i)4#Kt
%PQl?CctuI$Y5n%PK-IH5r1[D$AC4P$,<Kp#^JQ:i1RY7n_>]Xq%<Na4)Bg[WH/6QkIXQ^>7[4,]2^\o6R8q@K3hRJX+lpHH\J9l@
%Rj%E6aM.AQ=6.`!p]!I)n'Y^tP,3rY%J5/.U]>,EEkELf8>87\UGO^`L+Wn0@&F.F7\p;1;!,N:I#lqCA=cL2mq-1<Y/(n'SMtfe
%NnEl(Yo_g!f%e@D@I.dNgN#s1!^h?Uk"W%Ai/u0hmR!XkPa2AMPsU@a]j.<=Lk'']cCq<Ql..REHu8h/kukhdYdnZ!bXb'lnt/_1
%n(i11m!Zg-/O^7;mIH3GX?0=2=FZO@[ha\8J\oNc9eg8cSEL0%;Y5*dNJHI5c).Xk!2b`N4r]4n,EN5a"AO_ihsYt2""ADfE,)ON
%Osflf.(<S$c3VhN-:hUe`Y$3W]FKH\MOZ<jGqq/TYVtqnU=Mg5VMI:j,&"a&8cJA6bM-QAgK-=k7XT?Zi9BQs"ZY3$gBAGMlPnuW
%jSD6$oin8G4m!>>/,EOc;*f!cMUa=VB0"8!<M`<*4X_[q2*rVT7Q03cWo_-75AT@BJ@Nk"/q)PKU[;<MaD1k1Ja`mF%i(?fLDFGc
%3(Q7BRmDda=>JgF_TS(-Tj_EGn1\uQ"8`9T%oFF.-*WBm>n6q/1Or,h%]q?nTRWW8.@Pp?Y"]'e%$8B;RHmf1>ujWW#mAVEp)srN
%)?LL[a%`.oeCSb7#Ts8Of?h!LRa1T'_WQ9oA5>/%C;.1urq+gc)aa?S^OJm)mH;op=E<ut[TJSsg_f?=05Z\m8m$$#Tg%H[R!BU\
%:8E`ST%K=S=*D;c"Sf*7m6D$M+i^>`-;n:qZj<eW^tLV(\sU%D&I<uV*/]9M!%_,qMF;*jA8.ie'HC,(TFL6/=Sr">2^$bSnDA1"
%N6Mg?bX;%p<\Wssm_K(^1(4h*UL7e2^@gk<LMnL9f>YM5n2*KE'2LO%HgQ%5aG/NQ^/?kL^8t7("E@6f"p,?,VYd06r_bhPTC#K3
%_WWa&SGAoBP=,smO!ZJ(S-EZ8FE!XB&rNfb..*hJb37Cdf7#856u0bLN8W0*R%&sAn:["/r>@BaI+$DkIG1AI?(Z@(I<k*4nB7$q
%:<HIZ04jB9Uu9$NMOkLWF=tXD63`'HSIcB!4CJ=pGn*KrCsH-3MK4-n3UN[=VIQD)\HFcj2`2^KObaT"Y@(1_"_"Zu?EgS#C:IEf
%>kDfbC"pf:Lj7S!os40Ck(X`GX=XM(H=oHQ0`saGk$3nGk6t2^L(-0K*YTWI+1Bmo?BHaGdl@aN.HN]B_Z7%0j;2FJ+uph0%CbY+
%R9<W8q[Ge2#p0YS.Qa*"Zn"shTZP9Mol9&&3570(/OAlJ0;8@8DSfPh^7Q[&Y3m_"-=5J+-@`\<X"\2<pQ]@glH[8qfD!iXBlW`.
%s6^,^=!tWH=fkD3FeZRH[UY_Brt*!\2!$RKf".1lCH%9[7^3gCRYrV4W#_Dr%@Ks?D#u[PU1G^5Q%S^CD'iYrfB%gI=#4E`:nsTk
%\aDo3cGW>,noO?B`epW=E*0:N5b_t@IFat@m!2e"]A_7)s)^&aQ5P)10fS)B3obj)H*2OdBW7>P^q[V(l?&AkrTZS/#NtAI&K/^@
%]n3.8mhRpEY3m+`$<MDp%pg7EU5-](emq5K0*P1UaKP^OYDr_d'Pij`=a'#oocIgIAQNVt]n&'k!L/K(910+*1=<to>4l-pE5Gn[
%XR`'<(I>)hR$RJp!2R68=H;NhNao3J9S32IKfT'SLc6L#R/;YuYqG!5#sY0uT]QcGKDe<K$9PT&5L?Z%_u*Z#]5'(-+?hC4jc&g#
%Jr\b&paigPTsM-."W=bmX.@_-/Bes>nMuju"*[MI/4_!G3N(imqQ-8-frO'<JU@3'KPsSsrdC*ffgJDRIFhFij8,@hP1fV9e#!&Y
%B>WLsq\\d6IGmd0cj*f:e,'b*\!]XL<[jJb-ZnZl&\R:A+R&DgH/20DG4IV/hW.@'/dLY%8QZ'IM.UU"9'ehb^I/@rLX39*8-f)j
%]P]f:n\p<6c9=CZ2f7GF1P\'[46I)<rP$sKrU;uApJ0JO^PhCk+(2DDX:4$"RF&35@rN=#`\`CNFPit"dV#P]lcSKVarlfh?U@DO
%,YS9pHW8-^*K$kT:-TT,d\2GDeo=hCkH;d0n2SF3LnVQqEWm7n)d<_+a7rf>1Xi%YUq'al.-in'M**Ca4J!7GW#O-K#7k<(Q*:@M
%jNiDG96lhgq#MkVrXASEq8]Q7lK9\WHu/raBWrj4AnL*oraV>Mh9E<3WQiOY)cK$DUbtP\Oq^c2n50C5Sn&1pWI08jA52\nMi8>Q
%fh'6V]%`j_H-ST[)T^ITQ]63/!rdG6#6Z7jC/C$*khTaK/[Ag;aH_gD!DCT%2+tJrJ+tG4k&Ej9-n[f^LUXZrc%?m12s$jiT<imi
%^0^1C^Y^)aM_jjXgHNFVP91;^nn5?_'n9lb\#(QH(&9Wkb!?lg^l*.]GW$s5>]H+7WK'fmLSDHMP"Xp[H0G"c>[;!7YP,"1YX;4<
%VVmL<^r1FXl3E9d&C;;slRG\.i6+f_]BMp$^g^/r7d6r_EXFFr`=Uk8EBT7oP,Md/84ZbQ/[,#!;nn"fkT]M"?SJoH[r.`LD+`kt
%Kk,pKNML=!84_Ou$\.gpEg[u45D&6$n-SK.BEM#Bo&6D%J)'s.M-,n_9mrtRn4(..1t]N*6'8)7b\3s7LV]0+*;<4SK#co!okYh[
%BW;@ofU_[2ZgOC)O4Vp%mIU#;eHu"POW&?X!2;a41(_pLMpAE-a:oA'(Jf>Ta!Tflhr?50Bf8qO@>28n68'8`J/]U5X!MhWOo+P[
%q&XS65$#6(!oWX=]o;b""D3s./j5GOflR`Ult4\N,$p(9FhoU9GTH$V=;NX/A9'^F;,HTTL2M16H'IYg+@UTh7k8ABct0mAFPoTM
%H<+3F3n+Cmjf:UfW):h)DG_at,MTQNnds,`,Tih6M5i0F7D[L?baUm,+V\PuNbPR$Y*a$?+K!_a`O1A(^Z]MThk8P9AB5_+A=I9<
%6J2EL\:c&5]*1:_'0gK]**6e\fS`Xa,&TYjUoo^L3&bcfN%])#$!+B<O+Eeo=]D"N<)7lWi&@DlK`O&jS;[LH7Q]69ib3\.)n1It
%+jeXKm5>Z*?Ks75:&rTR9dc#J)14QgbIAF"qs"5_,=C*iYo7jZ;pJ^i9encg/C(uj$FjX91\&kD5`fV_*pD-[1IoIgNt1^4i&Ul,
%rbP)pCP_8',-7Da5XuUhE.ZGWC(8:Z$^R*kUZ9^?5YNQV,?D6/+(J55QLOt@6U@EGF;[%]nY';L$_m%AD3%?^q&b8,$NH^prGD\;
%<SQ%UiT>SiA!4P,4N3I+1[`2/&3V3IVgR-,#!L:0"G7DU[FQr3bNdOY1l"tdo;LN5-"Z5e(=>)DD?VrBcV,0V/Q:l`a?t7nle?dc
%I^&+pWraV@;P\!'Cbj*rZa%T4%1mPI?'Z?dV-h2R!RG0BVK3X(-!kOS'T:6\cVrdD4$q%h#2YF.V]A'hB0!2:TN$Hb)_H*;Agjft
%":rCtCYe6eML(gf(7VL$(W"mn-B**C/kt"\\bacj,QCL4BV#I<"\u"R)Qq(C;dD2EkGH=PPAU73dZMLuE-%2-A>8&5eE[@&c4#'q
%H/cY;Si?Wl)Ff5YCFM:s3'kcIibP#gE8>:#_rDm>rXS>/NY(&fLRq6US$,L$bLg*f/lo$b1h#:uT>,<Y^9p2_XDHZ(D%<M6c&K8o
%E`NQ3R(0W8WOG09Su&Toi@&ME2oT_lY:C0&\[jU(d4'UhM0^24r_rXtTe"eEAV,=c+G\E1,HC2)+Q%KTITO4ma,+9cn"2(1=hcjt
%.YW+U]&%.*^)O-l9RgOEC$eGQ_B_k/PYHiPEYVDC&S<"qd!I`]gr0*e`2\JrAH&WleD$q3-TDoKKc3&kToNlL72-"B0,*;&PTbte
%*R7CAS\_T'37=G)44!&Ic.?Qd2$kq\)5"Q"CO`]cMAi<9)NVt.pWpKd2euDooE1q@X^*ZE_5jRrM$(bG9tm?CM67RkQhH!&3J.`*
%CREp(W6u#W;GaL@$/<?Y(jY*K?.r:1,dMn>l/16kmo"5uFM`:S?CN]6H>1g+;-]U!G:pK&?7I?QO)F#19B\RGZ1VO;GLG9>r+VUs
%WYiO,J]P38,0ruN$"D[M4F)$XO=E1nn#'/Xk+u?LARc*KO*NBR?IjJk#B0U1F4=N@*9b^&PYS-7c.=;$qsE+%Z.CLip:dEPIDpoT
%r;6/fJ+q:^YQ*X4q+lM9hnT*Ps6&E42uNRQr."]Qs+O0lL]/Bm)uk90<D;F?64':q's2u]5Q9o^q)@?kIe_)f#QEW[a8bXqs5fmQ
%LCaF@LO\pIs#6"Rrn@t`r>O?Ra7.^Rj7Nqd=8Lh5J,RFfb%#R<Z=X-*(lh]q.AC"g8=9Jr:qDaq\1nZVocK5b.t%,aemJIOCAY1V
%@efF755_Va>PR][rb;>krsWIb=*Bb3ST@aR/GdX1MZW&mV^e7lXSDN-5D20nTDBu,l")PF.X_iONj(Ze5HGpq3`^g@1MW1sB%mdd
%nJ4Ls<UO8u;/MX*ed,^2V\nfH%1SIPb)_=0@g18'p!M!\<W_clh%%IOnVX+D8BJ>:MpT3TTDop&`th8a(K./;:GZ1gF/&3RlVieS
%cdsN`(YIj6L.qET'E33/_!d`\Rh2M;a,d#C,Wt"3$e.V$f%Le4)Q7Gkdg_G(=>d\\0-6i]!d50>=%PfM&!ZB6_;bN?./0E?s,SU\
%G<;O5DZ:Dc+sk5-1T5iB()WTDO*,+nR1,]6cIO+^jM/4s1H0^o"1E:S,UF/;\gWo?\PcXBh-'3F/EeT*Fg8@5I$9LU,[q_tBfMh'
%)(AuD>dq.J+4=N#8!E4R$o$#DXc\22S2TlH>;HmZ@^\SSRp9W?c/T(@_I9$5Wk;'X_e*K-P=bb#@?]TV-(mp:32Vg&P800IG&Q\E
%VUkk0V>s[F[n0"CcuSp';*k+T7q)?&9F&^S@4eIS^tm9N93j:K$js/*:"iCn*DLgG7k%Zs-pSH(RV&QB;eEkR?#G]lYqerFUp8OK
%Wj#\3C:5oH2*`p(QI1:FXYF%/0HDR&T`8Js"HO_n5@kYB?ssL^=+s;?,G;V6AiS";32KiY>+:5>9eg.#hWmV,H,pO/F26o;0M.nn
%G""4V0YHr,Y*t;,A(;D'M'YioTPZ>uK96;m^W_3BSeK@i+St.sm^ig!7c[G$S0`<D,+]BX9Y4JM"H?7_e%@03A&<crrWKP87).P4
%`.Wp`V5n>FJZoY@p6EOAEi;corjdsniWt]$_1^kg`s35.-C8B5'oOE$`id+U)O![R$%`5$ODD"m'N&!bX!r0p`<k4c8Y.g#htLOd
%Vn2jF1R7$kKS@9ar\2H4IEYcJZoQ_:cRe7kB"IA>^.\Ba[06VB^lhd/"SOR*[=*_G^37`lXu1mYKOYB0"eC54`8DR[J).NdOK*hu
%1hIPaM_62)"2&ZrfV>65!D=2^`gJ5;PF6'HoiqWlaQaFqIP1KOmUXu&`;n-nK=\&3ld&#KM$uJ4F=.^k;0&8Lf>eVPlg<1pST;O\
%-N:-.#;\;_e&FTqfNmp@c'_Q^^QU.'@,A/P+HCT=Mi#[*<;NHu>fmZm9[Ghb2@72.%SmAmf^$gN6*]/t3kd/fnPOu'9B"f3*Q^-j
%4E6uN*^a"*6jNJ%it25s5kXkGjU9iFf2>d!lGu5B?p^<?R];#Nid$r#o].JP,:MS!,HG.9#sm[-!cT%8m]oD)!<ke_.<Bua<0aN.
%pe!;+-=n38d%n;gKP1?^@?[^[,"Rncf8\@PMq4.APZdg'm/$hGD^KIRo7jD;/Y\O#81c_ZmP@c-KK;EC#0bG0IF\Qj\1n="ok=*f
%fEk/1Wb=&NHlZ7l"n5&IcKSOTL6rl"4mVZW1e6.;Q;hrE[d#t17.3jNV@JU^?bmNZEsSBa%U2sCV'(:&G5r)B1rWu!=dp]@,2>GX
%JD1eDhiZinDm4a5jK^:"-Lg7G.GLDI@4\M_8u=j3ZZ6dlEuooC:m@omCJ'2^TO/5,!*H.i[u@954RZ-ojn6*rmD4&U4m*P`&OO/<
%o`dG93,`]7P:!XFN`p&&-J^>Z*+>3EfC]4)/c1F(]D*::'k=]B/t&0,]`BKBC^l^DY"kO7P&7VhgK@u:?_#;ZiD?kO;PQf[lX0I"
%WlEI93X#a(RW`,\\W5EJ]St:p7:ChA>D(6kPa-;\XRf:*hGGC18F&qb>\3di'fG'Il[#]`WXDND(7t:JY)k5:+Y&(YFS'R;@a'XU
%M>Ne-+&D:V8_@;a2FMnjoY>T7Wk)I^W9,lpHA3b'l:e!a\/T3"o;9S5)Y.Q*8_"pV&[:J:j.:C:,)q>RUuH/a[>?CRMo#Y_RTeP?
%l[Nn#DlSH6KFBP8nEWOYXt/sU;ei/T&OO.s-<@L!gl$)%[7Z694sa`Gf6+0i!<KU:,760@)K+1E/.PqL\h<a@`tp[9]b,(tbGh3Y
%R2#dI'M;#L>':+B760cZnFt'@!#j&;'J(Or>sEt>"nrs[YFo^J(L_6/rFp`N=jT+GNC_!i7n2]O$R>)_lsqc$5$UQ$(&*QP>9\jF
%LDqKM]>>p&#kWQ)EN%SJ%%1(N-g0iSDS7A!&i!_JB."AfpAf3JCVb:h`:9$f$=!05d5pCh:.Z`ME%Ga_Ai4B2Z0Z$L2:XW\83sAd
%GGiT^X(3<^Bep<XZahVq_Z#.p7fja[XR:]-"ghjPctg"qR#k`fQ^EF=0bL>="cWh2UmEj?b:]9[K=V0)B7gQ1I<*_sZ\1T9]<!G"
%M5=]l`lZ.hlm4Ha$#HjrYmSafg5LZR:nk4FS$u$JX?nlme.'9oI@TCX4gl4cX6\W^KNV/^`jO5'hIMa@bahIH(okcX_qJq]\Pa>d
%*>0&"UJisL(/:rULLP4UJ?@?GoLhn$)rS%kN5Q49:&Ju03EZlg4U%UmbPMNNod2LI%.mcJR_,>VhUf8UiQf^h!.ZnM+)GhIK#6\r
%?QMUPi"PBlh@IHPmdOA$kt@s!#GI9:qTTf&9U(7JUI*S6l).ue:b/S%DGX7?XJ)'PpL97ZVT@Yj/s/J'@YP[ia*&>79.3e,`^Xs5
%8dHMVVoQ2n;iM+KK&OV?^7VFZ+qrMKkB'VN`b_+]LLF+P0ik`K">iafjC5=iL/&FkVYBB:)">5#jOM6#6p4JJ"l%]T3L?eS:p&BW
%Lcleic#'h@2XF0G6#9p+JA/4,VAl%mh-]gQ72\TLg#ZPbdNn&@V#m-#3MihZ\?`8To"@okRR[,WU@4JP6s0X:"NQ4g,KboHjfhen
%p($4'W%oLVDUTlBe=aN(@[+9qYUr^6'hX"W[5V(fr@F:*Mb:NF&I`E+_"Hlm5TtUe.O=h@]YU]D_t>>-4&du>O5l"tD&u22njPdu
%=)AV-[kuHFEBK.Rk$fl$7kI=3\C'/V,9njA`X=ngaljpBROIZ%/Hf'6'mnT$-m1=SfAIu,agXi+V3[;4hl-3ujWoHaXft@rVJZZj
%iT%R!n\_=M,?UhEap)O%9g\dTp5$C#ptJOP$@imY)A?p/&WuWJbK4oO+h;8)@Z+#\Qec:[kft^&J=+6N\UN1b5f0Z+X8<]=_+CIZ
%Yfi,:NgZ=$]JS/;>s`T)1/S?Q%RA[M<Lo(3rM`DfSdbK,?n-c$+ZN2f^'WMNEsJdKM%l=Dpb;!;1E)o3SJm<i@]bH#=HGtK!QeX>
%BO>:<o"OoJIf2.gIlm&rDuV4LNE:9(A3m</DD2d0B*EIY16Ss9`*<e\),reS!^b#iVH[&+9W4r)1[FPYr1:1pCU55g6MGFubr#84
%`AS*sT-K8L;LBG;M%)^c9Og7ZG&/PPXV=hQP^s,X&%!`*Q<pbo'#JSkd%?"=([=H+>ET%Q8!^CRW$Vu`%9"C--P,=^SSSX+nLWN-
%]LCiZ@@lBO$se&PIa+iPpS-cBH%q[3EVtD4%CcC8+?`Qk5gtI1k'[9)E=glL(smJEg68-.[P81T"F_6FiV0jKrr'?nrk!,&#O%uc
%'ou6]2)&ID/lR$L3kGl;8Na)\`3V[W-gE"P_K?n]GJi+1SPF?L\[-0qKPh_f$Q88\J<:*OMa<2WaZT&s+VGc[3MFg0ZH<4#hhX\4
%0o4faTY)b9#-:1H'XN,[6R9HB7M23g`'h#F+6)R?6OBMR9%9(<cudl.jLV>g_#Q8UI%X%l%0#"/'J(.B(l(@,J?jqdgW4n&3f9H5
%eII`tiE>r[@rnPAM'TWq/2H]=^lQQ.PKsXtn3YON`2^tYMc(?8r'\.pQ*TQp(.`'"9B"'!`R^RGchQf^`g5\ss!Wc9AZ_,RCZOlI
%!>XF'r35Ye]/S8MO:#3oHW"LNa3%"h58;@!DY=P144_HH%")`keri<p[8cdhjT]>0+A4eU]'U"2#%93VI#+R;['^HjOfs,F&f&'V
%<p6bESSMMSHo'eLBCPNTa,85-WhU$Ibk#-OSJH,mMX!VU4c5^>'p2qP@99?>9gr3:Q6F*R$,Kuf;B"j&?[WaREl.@1Qm=i>ji*$3
%5!:G?hm4UJXC(=.B49e/K$\uen2FV]jGI'+kO2nA85g2PgH#hSiCAf.+,K2*3KuJ<)U?0M)^,P7Z5'89K(EB9NIh9fX&F$d%b;4f
%$9IO48]fl67,,,7CpRM6C]\Rg:M)K0%TY[n:*lq,[2]k#j(m,V9U_uUhf/@Bc$;VnV1Ft9.3A)>&/TuL\G_Pgc$n^89g\+W#p.^)
%=VV)03WsmR^XhQ]H?0l95d"%8/1#lrWrO&<Z8YGH$ikuRd4,I,p02k.$Rub(es$5i!m*h*WG&E%6m(&Rn5Vi7XR5@XkD\FeNek3+
%<oD?S_G&(fQS&rr+m>+^_83S"\W9EOD2*-cNCD=&lYeFT@</F29f8O$W]M*"AgV[K-.!r1\":>9A/eFPkjaY-at"d&/T-p4nABo1
%!9]OtD%m*=qfG0n!rd_:;q7;sPsl^`pJomLB!fqTEE+IT:qP2>lMNVdbL/">K-cSJ?X1toi*R\!fZbQQU5V77>m]'nl\L<b7bi0I
%&At=lZgdU[Z!d#O>t1<^pHjg!kXhb:Y:[\Y\5Sp8P0P4jImIAT@CO\`nUt\"Lg:JpM3$iR0HiHeRhUT:@nY+XL_$i6^OF0lh\H]]
%bt.7/Q&-Q/K9Ud[B%PnV>R`AL.o_H/@E?s=I3K1,FM81W].nK2(>u<`lFg,IW8<e#g;)9mkVsOghpI!BgFXEG$1+a-MWkP`e\^i.
%CXr(L^5QFFe>M=VqI-(C0/7GafSd:PJRAZ:h@[I-%MEptNZHAj3?<`P+l$6oW"<W0,]&WE&e/%Iml$PTP]N/Xm&fch&b_fZ^Mi!_
%'I%ZIUbehLMUa&!0G3ouOL9L2T/-Vh?Dhk+2nFcBZ=&AZT-+H_^8dqeXg^$^#?G4A3uog5`r)%=Pc3ho-%68=!7pDaFUN:0OV<cT
%(`MoN?^7FWM-C*::mD:1-70jipa\.@13JZLHbKtX2q<nEm;"Hp<03RLI,<&n6AlkHJ>f2W2Fh!TM-uR>[B1":0Xj(;bNISl6s(j^
%Lf.6\HOYbc\Pd/HpBfU_h:57>VY"DbpYD*%Kka0AGnb-InA"Ski%gPW;SA+fO+7u<qLQ_POn?NUhp5I,_f%@)%]?$L\t0=%\Jl-r
%$:AsPi43mmpc*rJ"upOXDc`h!Bh`-1j/%E%*:CHe+!M<R+CcJ\!B;:IGXHP$D30PCC*'Ue%7Wt[81oHKB(\=ta[<d?nf<PK+P..k
%F/dNBH,+Ad;jX*h:&'X&(4i.*"E&RfIMs.d$!ptT;g?]_hk:A11fjWgc6U=[WcekSm!2kaXQ2F2S3cVS.8Ce'991it64fn#`O4\i
%-m"O5Nlf0ar-!*XrNJiRCoN*#84]?&-4MN\6d+.\,`]WHZ\?LSo"&3HJdri"CSaXD\X2eTPLCQ27VX"dHM"3^![)nIFlF@4eS*rk
%5]B'*qta>heqBe.2.o^X!jm&Fl-q<)7^BW;^f\!\6e*P+45J$lb2)Hcn#0CmAZc64jM^!chga=abSI/E*"bt''r`$`SZ:_#<id[;
%<5l&N;!:K[*Y0_(pLFsS6S$Jth9fV_m*T>X$TqY_(%Eo:]'T%E?&Ub,)qVd,h^o-pV#ep\GLGkq4@Q)9X,E*(9?69PHkCIl;<iqn
%a[4;"quC4Z]>?mKknq],BbhQF<(2LN+_,7bEl(DW>BIT9`g5?eN=@rt))KJUn6,%;4o;(t1X%2:BkUspY2ItWH=8Y@dNVpG+]QcA
%K:DYp&9o(K(Bd`5qV@>FiG?\sEKt2$jm.BM!FU.#,Omdg+H3&oTpe2Xg6uui.Rtg`CWsWG_oTY0hHCFQqQe`I['\aOl/k[:]8N9e
%JK?^iK7u]1@-#R`W9XBIRZB_7&L/-@$uo?:lJ,HV2g'uYG\-)%HgGt"JYdq;@ZGFh;4lBB7sEXJ"Qp0kDcM1ulQ7K[88T1#,__.Q
%nn;;9;0+8?(aC%\_4KomC[@kS]a%B#NopQ'Zo-WenEd9/gn6&u9sVXO3&Aqk_V]bX(8icsS\.NhU9u>=1Ag&KdER!lX)?hdi3f?<
%("/G;KhL1'S*$Y0-(?%4c.U>U@]CCYB=E8"&2*9]?J\.ae*%%--1:N'7pgDN2o1/+,JH3`KZ!K[F%:PU;!uXM!q8gfHZAIECq2]j
%3d<qnFE[uYZ.l1#15'VCMA%lm%4qDED1]@'Q/i3aC-pik4.[0YO^BIbBCJL8)O'jD$D0")AD7N\2o(34DJpU6'DKV[*^KUR^rL!F
%`)<aW['AHV5PWTr3jm0TclbQmaDfsJAUbu02Xp%*r&0RsqSA[Yo1&2/S?h3.T"Jj-nhUlReICHZ"bm=u>uq':]"B6uSQa9h/tKQ"
%fm)jr[C3T_/(?-&eG2`#9iAahFtBDfC;S?OPnepP=O(Tcr<"MaRSJqB^>B6oc[>4ObdK6tAX,\a?Uq[5L_FK3VdeRA9=$.DJfXqd
%ZVcA!E)E=feN-S-6/"JeB&oA1,mM@[%`8<jn4lk9#=_>9N+pZmJWYIs&lqZikVB:)$)-+?Tk-EG8m7]dQYEON_._a=h6kZ=MLsja
%*aREgW9o"NeQ2H%'R^6J&B$'1[NOe#?rc"a(GHu:j"VCH#q/"SY#4+l7-d*dDZcP+-NCd?`c.)*#<n)<Kr&^"*^j1X;J9ZZ4($UP
%;-8WIMK:RAOu@egE=^If+\IAHLcJXh4len7_V7(BE$Gk[OD/9q669&]J@l0M[3/N=AAE["4h*?FAXNE++N3"A0'#UMNN6ZC'to?-
%'YHomJ\r5*,2HP_J>X:lE(E#^2eIViEQPU*4md>NiJ22P2Zk's!:[.t!6.P)5!kIR1#$XLV?KKs)HjcbMBFs)#NK#d78!%'QP2g0
%M%'ir$]Bq2fJY-NOH+msR8nILP)^32$);SQ\lT"k_trE@a-ledb'o!GChX=JpI/rM2,EBQA6,@R/1GO`1Ur,&U"M,d_pdb#6u0EE
%31^C2L-6JMlBpA$J4.9Nhs'LWrZJ)&@"eU>fPZ<g;5bTc*:Pf#;`#t@+RKN:jg)h?o&Gt`cdfLJJbUG%S2DDMMl2m'.gpC'Ej+%Q
%eq]73*:o^_-*UJnLU]3j&"GGPfN2VVTc[us6>-Yh*(<<:W/<]h$mp%6]Un+A[9%+S5G'LJhG$s=FlHPJL;R#\.NL!h>`D"bPf\Y2
%ptoAE#-DZZHZn<tJWjaaMF03j6EQ?FfttqEr2cS7F50VdSd7jndj-URG)WUElUV*=l;f*W&P1PDma,6q-?H:%$+!!Plc/S9eZ#oN
%>[5t0++dKg-L&%$IeZ#O(O#[(Y%N=Rl(1Z!"s`MS.;0s^c1c/O+^F*]Gbkm>MECJ5(Od$r%dHQ?7r02<$0!W6+K-UH;?U'>gSBX!
%14<%/FpQi,%<A2Qm_t;EWn*9KedIduYdS&j%#<)=c-XT]F:["Uh@>kZ4AOXU+@Lh-:6ci_Ots"8<hpjN23!F<GauV)H!/t-^+JTo
%!r!FP^d>I-rj44J8o!f=^m`hdDM0O#3]*"4GmK1mb$eOM"V^T\bt:[JO'4"dG79.VD,AktAL*nBilW!8H@Af.K#%HkOC2-8Eit*@
%B1p;\$C%n*HV&UnSQ:Tg/0%Pa0"6Xn#K[^(Nl.QHWtBiDDV:3JX&&SPk=@e<%!^/s%,I\XOg0/@Ge6?s"q'6<[<e+(^mJNao$MQX
%Z<[bPQih7H=BKRan,-q_c[q[*XK*I#(,eT+2/+Uc!-rYXiMS_qVDbFdHk!5ehVMhaN&_P.CuQcm5r9FJ##3CFD+U61-iIpUlc:T[
%<W-#ZG6b5^#=:fcKb:?C5>h6LYUs*i"eNp]B+idkcKnT;rR7k5D9&mn,Wt>c^%?5LTo,IaV(4Xej2,:0^rN2-QW)NKhLaHUO0K<\
%&44R7`1k:LV?hcA5`el*ET4:1\5)nVOdiW)3,2=!ij2fU(--E$WCj(QZF3$>Ks3]tK2M%(mEl,(A^P?NGNkV`JB-VYb=%,LIeSA9
%^._AM^r'#m,n`3]qP^(.LJd3b,3D?lUWKmPGetF/GVT+RE`Z%TSesItY<(KL=efiQWBdP)qlJA9A7//D254gFa+bpEi65npOS'_S
%J1g7&#'<-Em2WES1SUR=qRsl$elUVYU:'p#eek9B;8pCCC"u87DI>MF".9N&bqSQ.FuiM(%,2nT?$5:V0uiUchfnYg5bF0f9WV1b
%#PK0\C_jX?h/m!7;tg-NCI_*qj?n?\6JTe5L`]CR]E+e)VMBWpN8JI$Tps^25J84tL_#5RS,>?I+dj*rIYt3j?q%rbj&oHeo04\%
%d+%Edh_<-lDJra"Ll821g"&6\JWb99jeaC49k0M;PJDoS+t#<dj-#m-0h[(;'`W>_&)?.9q7Q"B6_W)[%<`l:lrgGV>eRB6!THQ^
%CI[p@B:^rK*(8KDasVO/ZpQ&TJ;GOo_G1k-jeU@RGMmAkXOg,tIobm@5M[f2.]WEkSR,V`Y7k<TFu;K.2gKW>4_)"p@,p4+R54Z6
%\9:WYI61I)p?lrG(VT\k!$nd+mQLqK']o=H+:)FLY<Id%+dMpXJdA-UIdGT@*2^nfJ-Z:OY\,i)qE"CFJY*2jBb=E<YUk_Ug"H!4
%<+:hHn>-q[8:fOA_:3!XlpI]En>#Q/@5V!1CAM)eV?JEoAjB:ch-lS%A1TjtHJN"pTi,U/KDOudKH<k:-uOj56Ca,8mK"IBXPui@
%am@>gFYKjW_$s,abcPTS^bCWBarISCP`R5nM.AFX8oYtXOTSQ&a%=$m5Y%smJ368p'R!0TpmH_ZTW-*-*P-F`BZlmKO(_$fSR'#J
%??2QqEh(,l.YO"'D_'sr^s&Kga,2Inb*eMo%r%6XjL]2FYjhWl('N2=<i#tC;XC)#MZFXi]F:f'p:>Hhh39r`bQ%*KX1W9C$1X[%
%15_p?BEOj^^B2p_!77&!i<2[qKd2'`c:m"iO+$H4fX=_]Dmku=.)NMNJE;#F.3<KH+9\*KXRBMqCqu7K@kH!O^SAqnb:a*!!;53h
%DXXiE57/WJL=go/.'aU6jYnI$3M+b^b`su\G4M5%TE+L^csMV7Tt@rAI3PnuRRu^s5j-[SCN]%Q^VT05khnob;IoW,47QH0E2m:&
%RqSP$ni16b=[*n`blrUl0h&nb?eiFKi>g?pBS+5dOcNqgha+;r;=9!Zj^9n>H16]1_f4OfmQZ9e[qi_>m3<r7l>,8QH;H(b'e*^1
%<eq@_#)`]&i&=ji#f]'Md4]kqN]J@Vkh\3)Cj@.)nCF&^DAikV1!?@Of)[?0N'5JCDu8Dh5tiPDp?>#mUMP8_FmloI]TH-thJ_t/
%j\udp?(=/I`"2HEKd>F[2#JJ_a,iJYa"*h5]irbo&'"Wb@Qm+.5O$:k<!AQgK0fVBLXTh7?1MnQ/n'LKgagoKXGk@O'j!Wt^s$kr
%-j)jIp%admD.T2S;P1ctH97Wn'i/H:?bq/A2=f_IE\fq\22Rk1)%XY?[Y*nIRF-Xk>rrZne%.R!?t-\Mq]5W$4UCU%:I"e?O8WsQ
%;!uK(,SVT76qD0]=:C>*QQ:X4b;FA7lf!j_74ngE2]iQD`[Jh->8biXJ,-\tqqV@3nj#gA'Q8@IiC`nK3Z%u@e@0XJ%egL54r*l^
%;\Q<n]2<k&/<sE74!OeL%H%dXl1O;sN]&LZq,)JQ^\G-=WPGd(.MgL0CaAC="R`qf+%8jP^Mk/t2t>5jS?_U0qdP'AFO,0>9]mMp
%HHSq9A?3X+F:7J5^9YuodLiMX]LUb3je:FP#cFi=1X,Mi,e+r.ol*CQ'QFCN'tZ+!CQrXd(EC8*"snWeNC*Yu=J!toKOICjfpQXV
%FTH5++Qgu.,D>3Tha_C"--*BT=WRO78[c)re+W`sVX5Hgd1ga@[i6`3Lurtp>n0^IP.:Rg`#0%=1b^TaVN'gKV557Tj=m6DVLB$#
%+_Z2kRkY$I!ZV!\!Bh\BQc(i5fN3%'dZKGgWYQ2>AtjlCS&9W(V-Ac^'%Atqf[lL\%.Oq"#e[Cg7!RTZnf$GlNss>CIO5J5$/dZN
%a+V9-_2uh"FF:WuW9[*.eBau'MQ(mS]!Sk4i*O'/m,"0+GDtAQW.I"'Adt+!ZT]NE!sSg^%N%S:R#$S[AA^\E0;de5hTY=Vq<XHp
%1^4_K#$;_LYX87Xd$+go)l!N\S$jt&/u;jI%!&C6"os-?6kSXp8B"P!9?hGn^&5ee'XV[@MRabW$,[6E/.HU=E%%'iD_coj4U;RJ
%lX"2"&-8On=>+kh7"WnJ,TZ(DlbWEOk.8Ma&Ds+`$/2Sd$L/dA?5F;p^Uc0OF`D88rq+ea=IjArFSWV.F(<=QoiBKE\N>q*DV;]`
%8h-])9''Vn+EVs3,e09HTmTS*"4nEL)DDk9EFPS1Eh'Y>81b90re*PS7)@HnI>Qj_O/?_Z>Z=_o:n2](:(#'B5e;e0']pA+7"Rg+
%8=,BdMoSVr3R4u[d'"%a`k;ILI]X.1rUX1l+i+2l*'rYR(&j;(MY*/n\O38nm:*Nu%m-!]i_M$C/HQKF?;O"AQ\g_Y:dYf>q0IY%
%;RSX-ZK`rl&(JBKTk(F$M?YFSf(,cq:,m1S\n'n5XORCM$[`R/_0jD/_QCV8*&oJ4$CYQnr<Ol?;K=t+5-J_FALPV7G>6^Ter29i
%e-hMW*fSM:B]AU]j9!>CZB1(Ld.ibu]8D54eb!*W:=kj8'/D@)1FaMW1LuY\c+=o0?ula+oiTFdbaT#O;1o$N?WlIAH^pX*A*A\D
%&+l$s!sAiXj4bD'D&+Q1b:Y>,*V?9sqN7R:P?24qGd5Qo&SstZ^A*S+c+KZOML/'$gVlJh2S`qu:\M;@<n^Kbrb;)/7AQph[lt<S
%SC-g=OCTC@]0iQB4h;7hg*fepVY_X"'c]5AYp(2.IT'Ki*IUG]/q$#NQr0>A90pXWW:Nj9Or]G_Ht,kMN#(#5q?e#Y/h'>@*d>a8
%Qu#.8[5lH2T"Ff*;&@s@S=HplRNIk8+5tZr(+'g7),;G/l+Y?eiP\\\!8B+,9mXK(cSXSJ@)CiN8c["b`19KOr'Dh'n.=cM[!@9G
%"Mf0N7)CNP<>nhZQILM5ls\L^\Ia&nPRA)e5:X#tj)S\<kZpPh#]'ZAnL2kQ1gVu\WPWq5o9a!8GfAV&#C;>?_R2hj-6Ff"c/Qt^
%O^#I^8rq*"./7Va9rp@G7;aKu1,D=i=IE@MfS]%q6%`)kK"d1$fR]Ip*#<p=JAk;##6"m?_jrBoelF>bGStGg]9Xpe9J@j<G5qOh
%Q3E%fNUf$p>r"Dk(u'!@:O"Ft!>EZ4BU`$cQGqWD3],K/[jSq0F#@R,O\cK%eXQ,95Dni3`P`?=+:SR"/o\N<ljOeZ'4L!B9u$of
%[3'@Y1/@D&%'f:BT.KBG5;Mf`A.VO-:G:5-)j33`F(#W/<4@4P#a>g(e<(Ib=b)7_+beF1T"+Vne538(dP6PMG:*"m<uY57(`0Gu
%\AbRR/&<^ACh`d>o(CdY/ZBoub1Gh!e$l*`I^Dk,P9TkH[0^h9dFL)8)'bjG6)AH\PjfiRb``6sirdl.W[TFQ&$;$m?en/J9F8p:
%c<;*>M$!Hk>Lq@M!?lnL=?I=7^=cL6n\QU4q6c1r?>*bN.lJY/.P\<Ib^Km@4*Y3;b!YWeH66,3aL]q^;67(KQ!ikk8aRP=^^Vml
%U!0V'V56M0$1NXha`+e^/F<tj)fRRiM4@14^$.562JI$!,q_f_*_@RSFj`f/Hop'J7_gPhh@Yk&9oe)"SFGls.5C=X!brM)4DVV!
%3F%sVbtaEGYq_(+'X=Yu/bIU&PK@o#92\q4[2eQfDVhGtU<f)(V:;3V=)ipVIcQh/Y+q/NO`9*%:^EpSf;MT">lmY9;t@%l`MeX^
%D:q71Qdqj3K@q<'c=5h^a]5gGKf9kVqe)4tDnNI99*[WI_mhOL@':jR%L\q1#=`^lP@PE[5o<NP9V#<L_!)hU'efq)Z_p1A*RMi7
%E?XO5-!al%pj!7OSsd0NjM]8,QH>K_7pOYG9/#AXp*r=-X0)PJF2]D)1K/:83GBobOS2Op&d_^3&_+asZu(@\)hF?P.BZEK6fOHe
%9&,7Aj9A.I5oB]F'EPPAT+0b`^sbob-sDEtIIaeDpCFCGbU/_#%!JhNS%*L;HUAt)SI,B9OrDBL`K35\UW"6m[?+N9*dopI=Wf3R
%mZUKT8/Z_OeLA%SOB=/7B?uX`U]>+'_i*.^fOC%\-C?!K)X&5Mmge,7GT9,2kbQ_TmtUaCdZWf0(kKO4">Kc6&k(3aPg*a*D[@aP
%_UN"\V5VB8nk=`5==Nk:)7\L<DDr7#M.a&gcE/c8)ZZ-oU0TjY&6qV=BtJI!BZb"&ZZsMETAsplIJFIp$=,m]Re5_;bT/G@D'%p7
%P^*G$McJHTN<Y,Li]/EO&@I#h2PnjfJ??*L-;oA`C4+d$>N8g=)k[Am!H'NS"P\URCU=_@VXQRr,L#Z.VU_621Bm#hVP.K]b.J%?
%i`!.D$pL&CTKIJA3p9QpQr2>gYOMO^r0MUWb\cXRBr-_qaWJ,UeE+T`^:]R:H[1lQ?uj(rQK%\`b>C+:3-JR'Oc:#<,a4P"akLCC
%7(TUOkB4U8#S1p3\$j&NXj[3<%[u5\0N1SOMW+HZ8ZBQa4H<IK!^enc$f-47O?GJt9TbaR(,KF4ONYNhRn""?05_s_5lg^'U@^ld
%1O6;:$1g+L]/I5(FpFc,E?q1F8V&&sc%4<7-[2\$.QY+Wo8:9]j"\aX-AO-^09^g=McR;o#hp-)1p50[D@SWB6/s(BM-PE5P\>5:
%3Q<S"*s>"ho?c0r(AkAS^ZR!DrC)'?OUdut3^3N/eU7&-f:s-HrI)g'p\)2"p02ANJ;kH4a$/U/5-pA0/WWt&n;eCrkq,n+@76@?
%Zq!1bQk%jM19?QKblT=aGUH[&NBHq/1\T#V=0q_NGHWAIIeb(&]>+jAJ`;-b$:!9p*k%i32$_JrWD,c'3-^`$XI=6E,/27J^EtU>
%1)F9@-KJPJJ6OClresQmrp=C6qXo+,o(W1C[SB*4OCC^-6,JZVW2^ED/LS)CMS6BI2M:Z.&SYqsKWUX&&35XUWXs+]S%OW[rPp78
%,u=C9.D+d8o@8;4!q>jT.JUet+N2*l[S^V-ICfb`EX7FLO?>,u19_(7TkVMS?hk;FK<%b-&S+rFR]pT6eE;[+K#rJimE^qZO'f*a
%Mr-28F`dofGhWI0]1QioZBj@R)TD*di]b/R&-p\Fmu*nL5naQag!htGUVj6D]HSeg):Dc(Me]OJojt<kBChX@]:(C%4W_?8rI;>Z
%!t[\<iTN>jk.1n-%8@<6&Qao<7p=lV,>Zp+&q5kejrIkq#-hYl"?dpj+?"[,J]7)RgRiP.SUJ3*YC8^-^,uMd]7'D0GuJ>_>eG)^
%c$W>a<-te4aI=:p#CV,3Rtr%/4TVgs_)Xfkc`oLK"Ca%rK`m=43QBu2)SgC_f\t<:.>79(VX85k(-m7'm"Nl,<CqnSVp^;'&raWC
%UV_*]&J]k(:`-4E>,VP.QK+tQ7#q8W$OX]%:B'b8iD4GsS:*;bYC61lo\ueKdH!$fAh%)#_j+u/fsnEPW(%CX0W$MR#ag0:G:g?A
%fWqQB^k^[@".:8RdC2Tsr%NH\Z,`KA@nse.c.B[W4aQeUs(GVKm$,l0M1;/NfU9LL3m6hSJV188NBTaFbQ-@OJL45cDT=/2p1u"D
%"_U";>=R!(@uiiCaIIZ;S$.6#4epWCrK"Bu:oO\V.^lE*:YR/hT;13[bZu?'WlYm]+FdiUeORr&-3kgE$K[</$",rpJP^(^eEsNY
%T<Vm$5C57pr:'C?ePH3HdIZ2pncgpiC51jOgA&n#oumG]kX<Fj"p+gQ`2tmA:%27_H!Z$->4Be^RWi^>a'a='NU*:I2c]4+gao!;
%Tt$d)=&u&m0,o^FR#)r_@`^)8PK(WSkq#Y>;,eG7!VeFX,HC6UKMO@4$C5X1I!k;N9g8ofOJ#]d4SZ#YVBHNr)?H-*7h&qFCg^[U
%&EB&93>5Bp2^@5k_#]t&P;;g;Un$tq%c?o*IPdaUM,ZR7l9:oAIXa[arC9Y^6CFNY2,.d>ba9UmF9Y"PU%=@K)$&F"3l&XDo=JWA
%i1$kX+B0A6e_kRYALTn.M#2/%/$LK;kAJpS:%7VWqup73SG-Llg.f,H%oG@(Gagkob\q.eFu0Eo4LJIl(er(.7m`ic8gl!RS^Nmr
%c7O\[oBXTF^4Jep+tqdI&T1T($Tok>PkI(L8Ru3lCo7iM!Qjk3K..uZ>911f,_@lt^5C&l-VJHGbuIE:N<G8W\@icD_+M(M:K6'&
%"m&_GaWDd%!GWhMj<CE>JELRAbI9bZ3;M<3g^cXr2M%*Pg%XuTFf#';Ds7Bu-ID8_YLWhp#.WU03cTK^hChK0&3!`P,+2"Ep6<sk
%:RXjQlN"g89pXe7\n9O\-ZM_2OmN"=OC8TQ0ap,j#RA>]<#hD&pb^5rO'JDss(htBBEjX6A;C?(;qSq/,3>EK\5>LhfSY[EQm<&W
%F7d:S(F&TU)*>E$h?NGR3O;!gjT!'IE<ZF``F9's=J*XXLd1k2Hl:=\I3I4kf9^M@I!ma$_`tAqJ,8Jl/1@+(\tj,s5Hq(cf5>n8
%^<[a&12[^6?:2t2nQqY/^_;:o9R>+WJ<oleNa0n[lj>_ReO8=H"/t@]FI"A4Cr%k-!_OYmWf&F<g5p;CC\ItMn]<ZBpY<*X3J\f9
%$u*4X[K'+eGtRcbHN]ip1L#9e9aj=`\6o[n<cPM//e:65(XR/tiaGD;86ccfOJ=+$2jIWBPa$Cc0,,%^S0Z[FF#&bnNH?;i8%Bia
%Y0JPqH;26nZ?O<Jm01l>Gpl66E&9_GN,@-js$I?U$)WP7.+k]\6)qXlU'bu5\cV8f+]uBY==%.l<[a!Amm=9G(-8dUO(RM+I7-54
%;Jq$_.?c@ma&4IeO*feaQCMh-["$tFd2T6+QhC"$%C;)_%r<+SXQu>[++8RlXJ^PUj/f/^D]LrfIIk+7=_SkTH8@hX';\o0^3Kml
%SS@6-L^:p"OilbX+(lS`@n5GXKl?)f9ZU53m6c"GW/@;DF-4L/$kd?$1T#c("?!c8?J$?*ND/=opiaf[!0VO!!:R/=bQ*I`;l8Ya
%U(O?k`+Y.K*gFPbiDO9D+lC`2aBH[%CT-!j6@l]9e62A'-C*WTX@S2TbtYFdH>A]oBlO^[A5^,]Zu`EgeRp\_ZMJ<"(qX^)!-JO0
%D9)h8?)E<&1'sAoRe!)9qhY_$':s241s-D0l2lWO:'j9&-e?K+r4d'HA!cHfTF^V8"X'AdL</nPBfroR9T;+i3-I#7YSsT`N="hS
%`>bJre!WH+WL`gUQu]X7?m,k<^Ph>.A"KYF)^&BU+#LLmdUq^p=K;;)Lp4KqMkj#H9d*`hArH@)]S41nWgl65W^QAa+Y"JrD6=X>
%G=T%R<QUdk1,Bi,o+ugd9IXl?S)c"_%XrEb=-=2[?S7[ePW2AV3mNCedqOA^P3*!!Ts6:?6TQ"E'pV1*7RRpK,UAJ!:>/2tiaE3K
%<3]1;D8eAD?E<H<Ae,2u9t_*`H7[YX=>[+sYGf\+',j<.);3lgYq)4"'GK@?:J8#(`o;8S>nS@&2-[?3X!K@,7&[2`rd'.0\2k7Z
%!^5bSYqmN,)B7X/THj0)[9hc1X0+jVWT`"Q(q^K#<N1]R7nJF]E9'#l`6UW(iOR"eg_/8dXN.7j?R1*9/Td1ro9P-O@V`qC';TFl
%&$b]FVe[!QP#n!iH=t/s(La5lftk?mV7#E1f>e[ZM$bN&P7gG&>YNFs-C-Ler(jKq&BtfkAggQ/Yga!0lAWA"Q@;:%_/4n*$%cYr
%B7qsmN4%M_2q"80W*#%e5FkD&?0@;"Qg\SLA1dNV?]%;uD'-ReA?:gWnn6Jpn-iO9If0NC0+g0]>C;FX\&;RMcj:3pGRbQ`W](8:
%JWV-K>U6==qepBc=#q$u`Wkl8B8aQG8_(d.KBV-B<b"`4DX&Km!_F1W^[Nr1$@+`=>dgXWaX85Cbn^iDp8DKVFQ9V7Xn4f]0gR;Y
%L#@?75#O-=e#o`Aepqaej1:`Hq.;r3hRMr2kIb5ib8nMlCV!MJSRLi0&Rt-IU4#@r>2b^V>KOCf'-5.aT_a_sC]lBYoi^qtQVm)+
%EQb?r`(h\Rhs$%,,O-o)]0':6n<>!I*0jpJZAr(FBU(H3Jo`05I!<qB##7%O)/9<O+Nr-rrZ>b?r2f1-94>p03j>FYlVIM#j7Us]
%m84LVRrKIg3imT^lQ=`n716U/62^4TS@:DA5op$!"PN-o(^$X5:qoOVX])Nhs&gNS-#3BpQ"-;%]SYN^Z1BrpfBYtfbBB,Dj0@2O
%/1dHbGZ4*W?59)4kAOo,#YaLafhpf<5[l_t[nm6oU1Wa#CEqQ\.$O^JE[7-l$/lm!iuDL<A&qElU=eTT'CH'0DbrYX']p;#oQ$8/
%IeYb'(M^;LkhD]*ELq;^IGA!)WiBN%G=!*t6:nUG@Zeka-f&03_&*o_B!O/"o,$)f5njs)Op3EU8u])>3V1(QEi9ddGsatFJ7Hei
%GbI4"QTsO=bneAB`lt`t5seVp2PQ\5mFIL^;-e>7jI8:M[;DXr)T;=</-FK1QA@\#dg,?F20aU0mr\>dK,n8J%>;UPEj[*V\a/)r
%/cJe^ABa'$DpaukjmIi(p<H]b\5.jh(NO?((XspK>:JL+mA<aTZHm:+jJ@Olc3/FE?a92.bi=[/pX[b_RYB\bLCa3=Y7%2h,7?9j
%.W)<bKerrs91J5b!7<X)cBAk.C%#)M5\6!25&2a)1(RO52mmuA@Ln9]qf!qn+@S<O_`fGM&L\K'A,rSs)O%fQb@.7'<*YiQZgOn<
%INcc'35W.'b@-(ci>p7-(NbZHe$?m'6$sa>OYgd2TO35hEn?OnI\==(WkG4[)1c+nmq!_3DDKS"MIK66M6:*d40P&cSqim@D9+D]
%U\?$20TT^9hZ4484[-"=i&lJUdnrV%-(T/#Q2Q`,U.QNOkXXei@hlP/_8,p!G>4/YkofEOXke-YCG<"AF5d4l,qJaa^6ld]a0S4)
%3%!d#!=MfMP*)H;S;)>`NYA^Y`N1+!)5C<?:gXCTW5ES'r6V@RR*(Kd>$of5JH_<4^dHfM/-@Bak17QK'-O6PRr_/aldc2faC%KZ
%]@OCMODr1jV.i+;L8jD4T7S*.(XKDT.U,K89VX'W3XlI`JFZk+Sj59_5G;(7GVZ8%Tbh+"P8B(Eb2_*FLFZ-^"O5P275)>807*K[
%bi%`dF7[8$[_uN:]`,E6bBC++fJ%*jLJ8SY@VIjD)N^6#(scJd3ND]+\"YQq8h,*.%%&>>!m?P2juhBVkOGL.NPRqoRPIO#b4d$)
%S\f9>'1Q8NaNs"WrB7NsBT4"GUB+ZdiFC2>djJ'<J+M2^d7Z,fM]TSn0m`]Me@aWrI61bbpbI5&>p^We8%fYM.S4&+[H=6Oj"Oc#
%1pl#Dn3E]38T.;N=2Blhl:YjO69r1)=F2?_B:kW?Octk11Cidk<(U%G</--6D<U`g:"EA4nT?A3)LB=p0G,t,A=>]2Y:mpYjWY>h
%'t!mO[1\g9#-=[7d"3I',tJjNiUgad#oaj4+0D^(I"fIs[EY-lmDpbiG[$7!Y/rDA:!W_+4?RZ/6epIVphgH->4!kpB!SiA-;qdG
%YC4G1P)N*4`aR#(QV#kbF][349sHU'DFeGs-Ij%9l!?=&"KeFn_hqD33gf;#quMW9Z4KZbrN>BVUS7#FreJMo_/G)'pjEgCf1gsI
%pEeJ58O]#u"<.nGPP!p_:PIWh[%RBo`9?Hd;kl'QSXc$RoR!M![D8j3-1Ct<4_]0aX:WWI*d.ueZr2HLjO$qEJ?'IhR?tdH(Qn1-
%XWXXbTj1Oq:;hc5Cdkf\$/`m2duui#R<S\K4Z^MiqTC3F?S!Ag>)W/T:bkQ-BRjDdCOc95G<G!+R?I\f6s%N!=f&5Hd2o-SQ<0Y8
%0WH`-1Z1O11-7NMK=Xq.oXs^3OkD]f-H+Lb)0jqMLfe:]&\Io^mdWSEln=iUP<ZbYO=%tsMK7;;^h9k[fAkJST(19$62TbXdDK$5
%7ROaJ2(q2XG>?HL'0b:=KVNk#'S3Di2A4$,1E'EE2k+I"%T?DJ]ffOjAb>W3%G"gOKhZV-q_X'MHaR0WK8Sj^T[NLLUYG;le6E;L
%$s'XO_X,+]h*29kM?A4H730XR76`"iI[YWfKhC(BBAN$'g;)+41#UPhBabor@>DbZ3/,h=V/VX(*R20?pFMg?)_/q__ppuq!5u1Y
%S?NoN$-2i#g"l,-3I3SGZsOoJhKj=#YKoO\\(`NRcRa/EK]$*(C\23H7`C8$%R.2%MF?q.m84jR3d*d%$PLBK$@K^!=5W&OBE6>Y
%?Jfbk!P17["#Ls[&&25=`Ij?E>rO&Nn2i0AG5#Z48r9msYrrBYE21K$*H,KkopJ['dd=S6HT!pYM(Xfa0>0E`f/p1lUC_nhD&d-c
%)Y-<B_N*&=>nC<&C^fCWltHM<gdTA35O()![FKXMHiuT:Hf*V_%/N,/HaX^QUI4qOn_r`U,CI0?ku\=HTiqs:qf56RN]IMn:?iJa
%2#]&3dDU>i%!:4cbTcP&;H-T&=nsru)URQdTXk"s\icV'Z]Sr?Y)Efc?67o]-4j.4#]49M2k(;-G)hE'Tj@0*1A;:mY]XW"1+77:
%UdEpO<A?21^PYtp`B^8ml".&E4e9L>_-n[n%o7,W2Sa7u_duGr<YsPs=kR\+FTE$LEP\XWim0>;%m>dk@*`a,h5[-rP=1'2TCRt)
%35@SUj33;[STK4m(XGRKp8d5;R(,,mY>=3u>^J_*$up83h]s\/L";7,K!iW;X\Cf-E^rD'@EDU8.U>?3-P[P*7^!am!I+Sk#mK$'
%X?>b@Hr$Ao:@/k<LPN'onC:^lH#pX9fIue;c6N4C`j-I@>b.CnI>i%nYSGNLkM3h@)eK@.nSVS58]f<n]#`"pbWpFQZ/9W;d+Rp<
%IW^0cqYCc<5*bUt\?ndck3%"kTfnp2jQlqIX>W#RJVBC9J#k.6jn>JdcCA`S0o7(eGimoR,'iPIHq0cf%IKKPVjC^/hcD/p*E<$H
%).AY);d9nt0X<68:gasb:^9@TGdF&Wl:J5%(se'(!Q3I-KPh&i2>-$mP-aMK;k(PF'JS&=m\1t7-*<.OLQ91b+a#_^DbEL`Q4;K6
%^uD/bNc-Q!Xh5qLlk%)iga`38lLt0-&4"?\or;tq!CpTc;l(fL6/.><28^NSD3jhp>AC[5Pn#sfF_[+OSPXW@,Bqg.YNMhACiF(&
%4?P`RH%<)Z_40.#nB2Z?<2SFmNi<MRH9cpJU&0RUrENoaTZ[1F'iuQ5Iq(,B4^t=1&u$+$,=!*NPl"sgkEb&ZfG*,R1cf47>TM_f
%Ff9M(C"G-Q":/\8B>IWs"tCc4"[=eF%Hnq1n1q!h[q9W"/k;_co]l^%a78@SE>p6X_!+FgkEC-K2RHg3S['@kNpdpNLg3O1W.8f;
%Re!Q2B[sd%fEEOf.rf-5'pZAP[dg,$B6Y.)KKR8U7gj-8REdu/U>`B/F0G5hi7*3mG^/rY!5CCNn8F+E((">N+Gk-FF:dJ!%9PU*
%"k<k/C581cT@C7M*ECbQTh3(G4raD]E\<l(HTmL'UY@EpCZElJ095O+'58Y8/!&6XYq#4-U$U_A-R92`IV*800R@Ll[A@a.mHAXM
%]WOa&d)7jKntQQ28Z1b#GW%If?Q,IV]fNlG8Oe4uMOAiAJ-XE;^DNWe9'43B=?k"66r,BdR[amTJf*P$!(9Dt,XQOLjr5:imV)Pd
%^ZWK(Cj8:?>TKKR2]%8EmAWeMIs1!sqPF`,qGc[G6L*()!U%O>7h`5;fsJ.dVPMfA5!aj`cr=7\:WVD5?GAC\O+[$,?Q.eHRCtMo
%DbX`t@%1J&?A?o76s?f",61msS7o@\-=.<Z/JjI2<2Y2]0qF@a163eaV1mQG;Ep[nHTmL'UI4qOn_&&6D1l8gaL=^V7ubq4SU+2)
%U4UsdGC;csn3CRuAMJchA>#[nC.c*Y$55oYA=X+%(G]%sV*%\#PK3qL]0-t9B;8E&`UVpGlQ^ej(?'rKb%:NB6:\PEXFPIo9jro/
%;:7_A-^U!)Z5&gO*Yc[^PsK_OVcjm,W5:s1W)IH?oLZN!;aDKq-Pc:=pnWRL*9"@R&i"*%i*]$e,N3/rB.MqSbl"ZMhXaLBG-Nq'
%b&4@&+(S7UI^7c0XAHIfkP$!gceupLe9l7D'IaiQp5Q%E5[7h%EC_q[XOa7*'gS+9*X&(`GN%3=S#H"LSQe[;TI8i]P]=>I!Pd\6
%3Gb+^`c]_qkldRf:@/jQLPIMnn67scHtHVJ:pBS?aVU3_a(pOlB)YZsCKltLlARFH#iCgOlaC]8<C)d3RViNDXX'kn009'c*WLFr
%C:uSb=npT<pPfJISaEB8G<hds\9%UlE\SOV^jCSrTM@EP1Rd6#g^]]uU&jSrnD3$*9Xs(?cP6KW-f(@hip#[VIW^%jM3ga-Q&0m8
%-S+JI(m*Fi@_cP(]94Gf#anhN][s^MVb3LH_KXlS^LUCIP:^S(<3p*]MY/(t&XD<H[s#*t\W]g?_*DgZVhBd6*@q?",aYYLm\%(H
%r!rRg8=$bjb4W^]EJ^A<Qm#PD"-9#@d6N3r=,3MOi*!0oT`Ul"8^^.+%6d?K/OVJ80mCA!:3DW-'d^j>dDP;49Q'.R;EO,e%gXf5
%Ck"7Gcpf/H2b[B'pu+d@]QPF_R%ldDZ(&A6,Z;Be8c+M&i?6':+]N]jOjAL)Y6S$]8rkKqBWsKV@S5C@_k>sQoP%3>Abck)%r<.'
%R1-j^CjmOT"o')E'A-3MPl&hnHbr(4&?!riSEL?i`<OV1q>7-3.XeV7l91T5nhZB$S9*ELYc0,A7Mq\h]5TTR48Br0rL,YB3'-kA
%Y)Z<CnAPugr<@K[[s6ZW7AVK'ck%Y2D1E)6\AkrlLf0J(^e@-r&'(kY\=IR`d9u!oartXpUM#dpDiajG%3tO*4;iHH#H5+<*TB!d
%mXmb-KIif=B[.r`+%K<:aL$h$MEUR(JZ0P`Oi/r@e+NcJLg4Gqop+arf[0T`b?e!-nSE#T^-"HioA]PZ22U#1'KC!PA/\"RNar/@
%;$09d;mn%[X+8PCR?d^>nJ7m)X](MLnA_>qE*^)sPtt71HeIZZ*1dR5buY.JV_8MJ?2YLG:)Ii3'JfmbXO`qj;I&-lVO\k=CT<O\
%",;3[^B1t=P<tkd>"2BklE[06W]i(RGX?Bkq`PHpSdeK_<sP\.kLC`)-$8sXN5L?K_e'q'B,iP]cT#2/d2@^^Cm*U@_j/hF8#i<E
%5Zkim"QhNUWndjmQjdG*UcKM2Ec?!KA]TPLVA)`mqBd)=8F21eUbb'250O^VeU"[B!u?[GdVoo%:D,)^l'b.s<`%@?0Fm^o>c=)P
%Ib"4.)<1hUk1j?\(20do7r-COA_%tnbZaHs*6*R2&=<$SbHHYFjiKnRR0Nclbg+DGe!J"CbK8a*+Y?n`$V)Oar"K'b57YJ'Ym<GI
%F_rLX5o8].oNceUHqA9cjb2."g:**Qe<UNP[[_pYHlGBcA$q98Wdl:qNYH]7^5USG3X"5R<1nb42EZm`#%d[A`M'jYjGKpYEs4a<
%m09_EW"CMbiY:9!EGfN>P#cQ7i!PLQN5F!O\1Y3KE9OD@Pd#7[XB(]b9B7.Y,NPhulogc9Vf/o+Y79.=pjMgd1+NP3U60,?[P\je
%H<j5@VqH[Qr2?:lb5GV,!B9o3&NomMB=+8Sc,gBc:GkH[U&YA^B3esMFf;T:'9ahbaAZ])U+<MK'2#UWc"RD7U@QuZ8(Kpa**L44
%=USBq*P5ef@,JHGJ?\Gja+\J&ka7Eo(J2K<*"`6?Wd"9:+_DJq$ZdNPe1M>g9h/u(kU.5+(bm#3U'-(M#C/R0(SR.7:I%sNDiU#e
%FL'ND2l2Q/>*qVC4q/(b6f5?p+p='8J7X*b8a:_t6b9[NihBgh"Yjgm'<j^5Q/(Yd4V7XL+0-Y)j=Ei;YU+nr"E@fmPqb5"#u@;H
%AHmdSUFJnV=u>GQ:/<nrK2g$rW^Gha\,r[j-)WMGC/,A%,,OjVlkCBP.?hYk1I.)4%MMW'Y@*;A^dn<spun19*<]1h%+3"nF#$1F
%RKrm9Um.eWC/E]ggBu43SA0'n8O7@&G$>jlgtOH^r?t:+)&AmV!_")STid7UUKMW3=9XB`ipUPM#(:8fon5FbQWRuf>\61pK$*.2
%NQOq@P.pXe2m/JtVGNf$cSI]KrE*rc'Z38JMJXrl0T.K;7G8^r=%-r=O?a2gEuI5J&k.Fr$!/CK_4u^hgcA2@X1B5i<hjW=^$<'S
%H1_uMA-hlc.SliheGsSU,`lb_fpkLLU[ZYR)'e-8C(7^ls6f$;3a&n>85TP%:^f"ne&6UF[RJbRfX?!Vg5TGseOAG'\BPd+n.7Fr
%?9lMtfS7!u1dOf#!mk0#h@/C`4FRPrUoL7&i\;ICU$J4lWci1@K8j0tbT$HV=XU$=B(Q1rJp3q&gaGOcG[s-V@mc-iS'6A"aY6iZ
%`:8h&%bf4+is_ATBR;h>%6RD(0tZ%5=p<;]F1*T/'qAR6E@,>F"sit`;H0a*RiLk&`1eQ#<t6/Wm5QU"7"PS:Pa(clJ]!@sdS6\l
%h$-XtFLX&L(-Uf)OG$80g&#J]\2(*@`Qb@h,DBVnG1QcH5RobboWDh>6$r2)iZtEITk?#.>8at7R2GI//S/uDkdn<U+\J=PZ1^+;
%ig-"i>FeJS#:T$NOm-t4Unq+%k;fLV0m>lIEQXf)%-JLKHFQE&6/Jrm27VDapWJ^1!Ian8ES+XTi,&+HF(H58Z(R1fWc$[%-MN["
%:irZ2a1ca.a@r%J7\h9eO=HX.,o9>il2j\d=0iW'`2nCaaF2W+.S-rG3MO:kqC>lkA<_Be*s_d(cc0^Ms'@0#/V1>=?QQ4H$G=1D
%,;t'rE8G!QEU)[gYC<kHYR=-_%c&[lRqLVZe7PMRh*s6Q9#5u9pP_h&LZAu-8DJ'2;!$[\8)fM2FQO1`@?@:A#1NQ:ZCoD7"%s;*
%iF28qd5Sh=KaJNu*IS7B*iTRKVXFN9L73%kbFW<R_M2C$D2(;DP_s:2LTH^*<#*c!LlW*LBiOJ/^NFT?cR-dX7_M,I2(t"-RIXnj
%J\0M38ho1][K?^Y;85`uT3][%3'r@7HM2.g01F(N*K2/4/=VY-#!PZM(/)s)\QQC<]A^h`@;LT1klLo$$/)sQp_%O!_(99";e<i`
%#"aXJSj:Q4FZTPW`j)^&4H,XHhNpXrNac]qL8buV%@0F>Khk1O:]J!aOjjE_Y4YD)pOkOO&*0+:rU"W:H)o?gX4m/YS$E;R")M7Z
%GN:'I?.)!Ig"_jL.&$]rq(1!-<roB0^iP;)*IK$9UEGt.Y%ojoAY<IXCa/@$Jh$p#0=c"90jLtjoL"g%YL*mqJN(/Z_J\pXl<P&p
%W`?@#Rfeeb6_)UMLf;0'Do]SXSq;'WPDT,+:(dd7^k\ZqddUCWK3a!RCRT4$P%J\PB)Ge(95MELK^(JEoT]N7UpP#fWRkDX!(gih
%3rX!.-^mWH)26&JLq*oM5nKuDefYE87_5X4kk2HH$2SXos.tDSn1/"UjM"Oa?2=Q-]&;A!oXbdE`J>cL4`8XI5#aL>a\FF&D_QM-
%=]E`gWabAmkt1^aq6!.8e_gP>;loC>.&8pT@"X@IL,=alL[s)T6>IQ8fru04NQSkWRT9$\.u9e^?.5!tAPmopm>#c?--^8kP)5[`
%1\G?U_[q0uGg.?R+gb>s>4@"EoPhKHA0FXrM`lAT"D:s>VGQf;c^\b&\7oa*+B,#K"MQO&!%3^!q7Y'Ng#0qdSs*fdX\h#tA`\ck
%q_u\;]=g1rXge/UM\lfh]W.G9mYfq8RP?43oIV1E^:3Y/NJCP9[[)7:+de=!^@7,';q592_BpJcP]eJQN%jEDi1S[Vc41j/nL>,^
%2+OXg<kqNj>U8!YKd1;r1g*TI=P"#Qao"WKibMOdUm.%eY>"5kI&dS^6@Cp,kQWqdnIWkGZ'BD!d#+VlYDcW:TJ^04S1N7S+#]-c
%M2e!/!JH_<o\nTj,MBgn5VpBJ.$M,8".OK_+1,+4WG8IAVGKL>njOp'W:\(+=Q,>DbAbnudp!,J:3iTH&!gN(4H:>Kdaf)FLeWG-
%M)3r(KT?7=C[1u=;79UD,iG]r#<B061_V%t_OU7u0-Y:7n9UJQL6llnkSA*>"safrESdjX$V[ppm*e^%.*6fcDTe`A!gibNltDh8
%<MK.d^O&4EY[,FW%0r3XQGZ[nLt6=1&fhmUCtZ%\IqMYQPG_'P@Fgludf`d_\I5W<Z$tp0%IAJpc?#H*LtD""%'\dm9S@WZ+C')W
%Y@KPr:(jt[?"!p*1CkcG)h^(^ZaXge[=KN#-bXh4EA19K.Z1AB],gIF#gRJ]FC4m8h2Z&m:CYNaVWYhnbh*DJJkjmE-l?pac2-Cp
%;ibOI)tR?qEE#e%l_]CS6@mP%n#meD:jMpUi]VF+TCf3X?k-1#UA&9#q$_G=oXZD_Cjh4q3&EL&=-b"u$;Nc5#')bu&)Q1/=$7#m
%Wpcu,gKYi;HslfEqCr`6C>.u[hb;*RKNkB9.VQo_&(:kfh-lB'PU"&IjO.IbMNg=R^Vfq$:Xpk'>)E/9]F_XHlHVCuJODZsWn4.m
%dN"@^VFjT>d>._&`ge'b?r].3VZL/<<0OPsqZ1_hA&&+ejgeBt:.>D#6)'Vbgo]mEIX(4%Dl:%IjCr>R%FqpNNu)3sd'P\,j<,+b
%2)_Wa*@aj22E4>lX'>ZdaWp/'GI>*Kp9qY],.7lIc9ka!FNfa3&<JON:02-98<Tj2*ID,W;KNk:[PrG4TFSrYYn8D)7D4apWBWW@
%]7i@XG-MR2nJ,D_/PJ6!@\fH"V<H!'Jr4OFPprP7ild[]DbCX9%4`i43=)F[laf>gp%r8A6P@ojIAdSC4KGm4S_Tc_!jd%$8ma(Q
%fo09\X_Y[k=/+6b2O'FDWN:#AVBj10PA^,>MAXt[JVOd7=fjarZ\V<`9gi$2'L1X!Cb#$I:ibP">2ta?P]1R">J/ZO`V$%aG8*Yj
%*%P/,'mZ)Q^sQHULOdPhAa,tn.J`uELY..6d_oXS(U!`qKGfY!X%R^?2>boG]A:)>#R\Q:JLm^"53u7g4b@JfQ;^gB-3Q9/<*i#=
%7%-&W'@>NT\-Y7In6Kqf;88<$DjlbJkU46S%a"8'M6<"!J;.3NN$ZhOrgV_f8Z^6=K9EP-+Y>sTV`L!gr4CH<+$/1%8\99M:A_9E
%GoY<N+B`+IL5MlYKG?5RU.IAtZQ*\2N)*"#!euDT#CQO!-h&OihbUiVGUCb)[A[pX5jF;9h(%>98h;J'7H^#7F\[Co7^4-,Ksg\Y
%*bO)4.Y)AAqm"n(=Ab_?)&on:gM!u,:H+3%BOgCd:Nal)^Y5h`f1f_,7L(VM5/9\=V\bEfW40J*e\d6!%g=$W8BnJEPGh!e3=h3#
%RN/YglA9XNe'>5!e=I(8MK8"1cVZd[I.X9!;1q#+\p^L"IXUOSS\CC([s_<;No**sSr"j9Y:;/M'P'JXL't+n&>LVc+*j<b$0e$t
%HAS3s^uqECGEe%7V4oZt0`CgR>&0r@#"bU@s!Wa1\^7<sg\LM>##V`sRT6jq7+fS7J0h.?FKBpNo]W>n\%80m1m0%A4<@ltb:jou
%$'^=AD+RH[MH,ppNJ7m="h@(f\pgb]/u-%,:jJXH%t'm(iZJ$iJ.S'24c=t'aS[(=3ILTr\@'&q<Z!.T':&`+J_W'NaZSgI1Ng/^
%4d(qcRC5B`R=<TQ*Y8aZK>TT-joctj>@JR+!Rkg#3SK9[;!D*?H^`cVGi'KYjVP/"H.tZ#.,ap4=7=74&H\b9I\>rOk`Fg,-1120
%7MS*m7+G"0Nq"X3<0M&Jq,V!n)`\QMYJ7f0W3L@jB('lG>BV*rKMeeYM.Kfgn>Jgr/U/uUMpiZTc`H$XNP$G6iCT*ug($^NN+rk^
%^TPH'5O!?P#<W__9Su^fcYBhl`m<TOZ8a%*8")VKB^BFOJ["0<1b1snQ:5A8]9MM.4c15la$/A\[)#(7!['p;p"k7*bXTiC2/L*F
%s%HBE'[*Y:"W-:^ZQSqr>]#h"V/=Ij]%ifX'SqX1I^dNl)k0hZ?D#at$6)rd_q@;5Fq+ni_PXJMG?bAE8Y>W_PfAJVa9]`s/u*q=
%*X0p_Ushi(e.q1g#42-gq4,2Aq4.KDOjD9T4s)"`9Np+],4>XkXpM3eHWfee$B=XC/?,jiU/2*'To1F/7=\ST`#lNQ,9P0dr<TF?
%]VO)r8qIg5f(8^W.Ml^'a"NVER]8.\h!uLXQ:@a1\rf,7#d"W*e1F?W]+2:Igf.*W4WD?pZ<@hC_Vp#S9$go25X5@Ba1)Zhm>.`T
%7Ms&4jPGgE/VNtb)[MM5bc)M4=g+]Q3`(,:7/A_s0pmPRUGV/tdZ26N_Va(VB/S,D]&Cas`78U.=rD_oMC@bFgXl(<D7@`'*KY+$
%@`t2?JLt9"",[JoYr7uBZ0VbaIGCMUHs>`d!P&4fJcj=a]2R\hPuFQ5L,emXPqGdKO$k6@WYWm>SsW9>7s25`GfS0jr=Ln1QXj'+
%RX*bkERXMfBgW5L,#PB"q]4;V6jP;8"q.XOQe!/QCcaIU/%9A'j\!],HE<F6=bD_*_o"tco2`)A!ROeN7@^g-RqSr#9fU%SJ[tB2
%0rhe($L))ZNYj!+)&d!YL%0rBW-9iQ\YK1[ed0]N7]o8R"tJt0j>jUsk_@M40k8+&%BH>CE?6[`@086!fP0Io?FG`I;E8P[\;90l
%P.>Gt'9+L_`292u7GoO*?QDug)>!V!qmLY^Pe[5QU1!%QcDen54'-2qZ/qgLqML>rBjR3%H5:[N<i.Dd=bQMoZm0r7@(?\\U[*Y2
%-OX,K2aBV:V'ciObdW^/#X<*/X#ODh(\g@Y3)er#aJt(efD)CqGk.PT]>/\\O9^XsT_9o)oI;)@F`AtEFjL967@(i%T*(16FIP2P
%r/l9I#R$s_n7)T1A\rMsRL8FrJ9\X23&8ZrXsZMdh%2$XXsj3f0NgbV<9hCD+jT5A[33dK)OWTZ^H@p#O&mK(:#<,O%]L+<i#`%g
%fT^@<LbrtOqVuf!clo1])/ga:d=K;F=nL5MObZYlkXjP3WQ!.X@K\^H'[#D$*(3m/NImV9_UQ@R@@Vp8>Z]SS#U`5#i"H#;auRPO
%2In`O-um;.?oH3gG2FV86o(X#Z-cR%lEKR^OH\iXn\p:_aBlc4LnN2]Z0V)/\sV^Y?b6Lc[IQV[`#pP6<pT;g_D@<K,/OVhm;Q29
%=un_YK,$p"RF3@)<2#OR_WU"1QF;%$d0DOSPY'3c!%N?1M(Vlnn1T*`a+Z(G\"V&!N7Rh*PV8Nf_o[ZTL4"sl7fhlHJJ5E!nK\T[
%SW-<S.l6gS%@Q1&_0n_$`FJP/#o(<D,42Fi\_Sr[M;oqOq/A4\!XBPQq0en.0es^;M%Nu%KW*9>ja@lqH2,Y"228KkMF,X=dGm9m
%0sDLrHqc@Fl!^-/3#NC<Zn9(,,&c:'b8_J,i5pJr<`YJp[,sV9=dL;.76liPg`r$U]-9ISoY\;,2*sRt@*?E#,Er3f7muddDu(WP
%7&uRbj";j_n#m,Wi1LriNt[^Vh27&*FLO])+G4`G2Gk?sM%e))+)+_7GEDMhhDf2_d96c6:,V&L`;Mapo7"mq,uaLT&,TH]NF<j9
%6t;U-Q'st_+DQdRr$nXPZ>-<QjrGdk\2600NgZFpUa;5Gb;$I85)6QO*VI9ib?2gO/\P(km1HniW,`Z=3eYsPSH/<1"U[CtZcn*<
%P!T:klGtRX2e^8:+>j>$F]s@.!6C?Y;DS*(mS/7XUDnNYG+Z-e,!?_J`l!I[+r?(8A8HF(F#0p0/R`J9gcFV?=u$l<T-XSDl):/9
%"d[,(3"oqj3[(ch#U#+8W)W<C2[nfb0QKXYSb4`%@t7JtRgU9sRC(4Aa,U7+MS-[%MlZZK.aDRA(a`m;1?oQjB_,BjD*rhCH#;ML
%?X$A=Sg$u07k@&"!]_a>Ee;H&a"ga7`]JrG&PV*f@N!rSKLJ-cZd]6Q\1-EV[.J%TCcH9lNJ#Lpi-)BI&B0A4_2`)cM?9U,e&?_D
%G<Np3eGJ4#<pmoA8VF(_a8hZR-9g*8,=iiW'^Tju%D?V/EsJ"7ZntFU<l/a,ZQgSF8o(`7Q3B**B<X@Fe'HMsn<"Hl7b1(dgT^.:
%r?,s.1_/#m6:VmJXA^7J_JE?p]S*R@6=.S^hj.QK%g,r8)C&6$,@a',(>)jA5ZDh59f:P?!YKFFe4"sRRUaKbgX?%-2Gr%DPL5?j
%^dVP46>l=.R8G,Qq0EliEI&TCM2Y@!AI'U&F1n0'=Z.qX#dS4bdsrhKF>.MC2DSm,LNYWN-lT#cnr.-s;Dtt.4*Z8F?Jq]s+1U)3
%i$IlSoe4lsr%(^a3&(!MP&0(gYU=4)/^nWuM)!*'R;-?s,@qjrpKllLo0mu"#Ob[sVhj3M0\1g^&k`=]Rrtil^H`ZdLh1_?9&m4f
%q(lj2Qo0cg1rM$24FG!)QN=uQ]H6RR5i4rB=b_.^q@Z?kOU)(5/do"k+alYSjCMio7#YU>**P8ZZruN=CG(.``o?DEKf&Ra*D&KU
%Y(^Snc=9!UE<+Q(aK<q!N<,bL5bK,'jqsT3XA=/nmYf076\8<;[/dO&n8i\L3B$Tpj$:bcZ?8Q908t:i8Vt19HIHei?RSu,Z9fk5
%%'jhtX5I)RK)U:-aLg&4X9-Ng&/GV"8bWu?<nrnc'IQUfpflsmNKNnjlZ#r<>G2$1J$@lc&Z,.iPH.1*F(j]81(>C(;6,L@TSOF4
%l3l#/L,PLaE'S=)PQdTBbSsaIR0pj[(nmRiXNE*-%U+'UDR%0[;tj-;:-*?%eaGh'NL:D1*T=@`--/IBM)qIbR"^c^:KK#n-8lS%
%&A[%N!tuQg^*KfBPB#M*F3^HE[%6:cl,N'iL85CKh1t]f^61;X3("_C-F>1Ac1o;IQ@I<."NtC%Xp>FE#p2.%9--Jq"hFW@$=H,d
%+>`nR_BgbB*?c;'3bRigZoVqV1CiOE078nh[g&0KNuh7cCLA_#%Id5k-'W/ce6GU,6/mcs>eEe5D'ETDUg[4p'9m=RIRh]'#jH6@
%J00S*M\u&9["[:c0VSLi<%2NShIpJW%)f!0EQ$42D'GlII&E!qjU/mAngjbREHjqAaic<m+ZdL,Ycq(6/)XZ(4/,cQj;MJ4NO/>L
%(,Q_5j;*\1$]:jF$YUHT$&^_RG2dAXj7-h:>-g[p)\s7S]VYG<?Fj'J=AYDiBNjTL+iVMV%/XGo5GEQ4BV9j4C'29$1aR]"<1ckN
%`c6WjK?PE,,.@]<mU))Z#p1LQe)$+H"K`F&=Hd`h.GX/X_WcS8LG)TK.;FE9&]3i?W<2L^1Qk'"3Y#`@Bs``mNK\M@'Y%+'!j!6;
%aD>Sin"aGn[ca0G0=ml>NF6('c60mc2n<g[^BM&8Nh9T[L8s(`%QjDF:!"U=!=-r+=?'^6Ob6D*nWqZ-:W+V$&0ePro/'W]E;[jW
%O:[d(hK5,@KbjMU4sQUIs(X*,doBnH,O3^TU&_WuG_.to(Od[dU*Oml60DQ'@*l3$U2(EsR00.)q]o;uR-"UV91`Cqa^`EJJWMhp
%,LVTs"0DAFep7U.!=!MVOc]&ZDs7+Nb4M1C-g*+ZAa-i/\^E'bCMPP*W0s:#39)$E1<_bS@SY`i8@Ha)B2YH*:"9j\3=+]1`sVuD
%4D\Ce%:LH^^OFXo&KqR3(^j],TY;FBRIV+.l0Ti#SOM,p1A@7JJ],p8Ue&[f:S;Fc?*^mP4NFloO>EO'C4HD@W=XM[J0gF:\8Z8M
%,"Db\K2O3tKn8Fbr3D=J"CdB>Tg:N"RK>#n"qg(d:S9SKE=3b<iT(Ft6*AH^Y;@eL3$DJXo:CJ#2qk?E="Ak!/MXjZ&G+^5WG<(s
%cb0Pg2=<tPDt>cf<\bmh!k5'S*^4+\8l<&h;(L"e`B(J7+XnD9VVTC\:`p>UlA3-/VQ*utklH7a],@jXh/,M57Y\oP[QdP=r)(bR
%r(9mt:^JR',X;n>+h]<S65^bj.o!)gbi_'^:[?(_WE/1'T1L^0bqe$J[`jtKo&>G!M.,b2T[9KF6[hJC1$,2+ptX/f-kW*R@%aJq
%C(F5cZ)&=<!/H1Hq2M6.a8PKGC5sRmP"T\5ih7;KRq>T!)qMST$.P*QReQ*aPAqC?6ue`*>RWA@1bIKL<>!YGS1\'u2&@Fr=>l9\
%1+^UsgS%<XA?-n2A*fm7,'p!!#J<L0j&=j^am9]L*13&Vd3p=a_h#pbpO\,8c7TYVp7>:\[!BfnY0sQ<DH^(6Q1K%?,M84VG1eA=
%"nC+Ih4\D,l>>o$p<)<!N/C'W_dd=mEZc+R*4nlX.%m+)3-gCf`[p-Qf/i`50U;nZ\=GK&i-+E)eR.D%Z!T4@NM%dSWNbt,oa/Wg
%+."?4YumP>,D:>`(,?<#J'gqG0q,3VUmN@YU"r%tQkd(D*Aa-V15ZGLT?5H'67uB)UW>odmg^;T8q!NMLYd#,SFJrBd^F^$buR^^
%E?$aVBtcj,YdY%%;6n3dAP[[A-X=n%Q"&,2%\[SPTk'D!M'gAH4.r#F(A;.ld-Rir/F>GOI%JR_KI0;Pn+)]deBkK(Se'M&"&cMR
%;^:-?>+=/6G.=uS>EG7k6PE#c/XgF#iP^K-1?O->(Ae-mJ"7).j"$K2?50&MA(Z4A`6d.`<Fl?tWrY$gBL6EWoWiQ4:),XrK`N/!
%C=9>ki)Mb[QXPU*%bTsJE5Sku_ln$sYAhC_E5Sku_ln$sYAhC_E5Sku_ln$sYAhBT%l^G+!Pm5+`u6Bmbn.e[?33)GF.?IFp_@]A
%'lNd]DYOrap_@]As&Z^=7hM87,;'9PGt^)9-JcL5JS/i#r!GC\$9.ki2uF"Ar!GC\oPanu2anL$Bmj^iM6mL]?%be:0V^1Q.>G4N
%_A+`1#9O*-o?S/)@ZJLJa\n?QFMm^0MD@">+<.(Ej(Q+JSgr#D)Jf#L3+0,STm*K[.%=,H4Xp12;+o0+fdY_*)6%kH^3-sIaN,Pa
%9&DZr)>5A%Vh+ropXGVh:8UH?>3/H+;0pX>dd(Q;U"0W&59h8-;b&>&pr60gc#1\YoghO[WfsF)RB&(qFK./FaKh):%BV\-BUZQ4
%AEO%b%Lu4dPn\sEN9TrUZj+W?_>P$a%A&5HT&(T#+r:mECT7Y`]\Wp^cjXC)`4:WH2mp;e,gClSkS2]YkD^X7R2iK8*;!HA;[[*/
%=\Q%>oMZh-%OHuRqHE9[[nV`WciZqmWX08/QV)%WV?q\E:#VJp2VI+IM_fBGLSc8Y_i%jf<YV/MA!peOc"9&-(0VCld8mel[SD>a
%^_Dp-U+!N)lB1geUi'[dd8krKQJ>Xu2dP/.11O02:@C/1K_*"uDJsUoOuNkQlD`"m?:3I&a;,%6!c*?mecd].-5oOh6U9p1]A&$4
%F-t#W%.JJ8IWZbB]CN%iF\u+0BDi>rcF2d:n+U!t8kbBSet'(5g;/e0DoQ>pNo!kQM"\!'eX^he0Y84Up^ZPe*0PbQots$q"hlVD
%$i[0`:M)fE2(>faXdY]LJIX^h_pH\Aj@`pIY05rdLVpo&mFJ+gr^EsTRbdFc$\6()?k5Lk9FNMYHk8e;_!mPZFGL"2L'S[Tb*9IM
%@'Z\N(2rnh.hWV(Us)k-\5G7_J;:Q]RrBHt1;m?h3jS,bpPi,1gf_>N(#kma-/D(p5:I5CRO\)@aB>3O<=IgHd6N#E#W1-<6EN+.
%fqn^;`]u?ljmte]dTEu7WEC;</8^+"2mOm-Bgf6"WU;*:W4Y)42r,Bp#HHF_P`XqF?5B(Ui;n21IH:9+RfY\W?'I,TAjM-K@7k"\
%i4.V0A'8:\)F7kK;;iEk4Fa/!,t;!N`,JM[I"X'rq+Ms##:Z4=9b2noB9]DGE[0f8_aaV^h)n*s#S8bM\2(f?\eZ:U8,O-OZfWb?
%8\m.&;^[;-Ca>;K6VE@k6KJ5J+o;b7MeEdI_pmW)B+X,KI6CQTs":6#:7==H2M"%6X^>+lF!/f>[ChQgR*Ac4^*u9J6jaLuFdla[
%pC=(gPE7#C[i3qa(aKV]4Wn'*4UDM5.`>Gs@V,lcc6/0gN?]>H@#+DG6aIt;DZ"+,j+NLmNA%>0#,OX6UK`pm*d2T=D-[gDQ"ojl
%>jU5gp_iCoZ:b%$^_`,UpF+>n[Ql$4+_.$_OftfPesGSSn-7B>2b:dqhaTM4?,5Mc_Re.*4#Z9aoITn%%RmQ;`QGE+NuXon(I%*+
%#b"#?lB;^3(sh,JN[@2ll3-j"s1K$?l;IqsS+.l0,4^36="Oo%UdEmBTT3&D./O)=8S>-u8[9S$>.:of`r.KK4t,iSb8kP@jBJlZ
%a$'u@PI<uZLMZ%tUlulI7FUW9KTtIYL$^@#I1V`3g2\RW\R45C`a;>XO?X8=IkM2+aR,@R<^Q$r4-3nJDsu9ldA=K&:b*Boc.tT`
%*^AsHD9r8r'R#jNefN*0*A62f!*!\`MAK2d:fWOQYc62M+j-WQg]E`PjZKFh,X]^O!afctZa&CFZ3gWq#pI46'ebhn&e`]@&M[85
%E.YfWA3u*EDPdUt5TULD*bo:QK,Z!8`O[)/=F.3K8)>+'i2%W3TL5Q;(o-/(^^=c=0G_(&A6C&Od;Bnb3sI`J$F2t(6?c@M/lY4&
%c\G?!)o<5YJO?m2nNks=QJ#[_s*>RSJ'tLMQ%pTVRd_F(@7=ieP924D'#aO5A,ZoqNl79SnGmj=H3UToMIdUUV;oNpp&`Am1!DBT
%Uks?ei/36+R95$ci:CjGJ$XkU>%fi=KNjln>>Rb7#K7.$MIp#%@16O,H,G"g`^'&?fRa/U4CAT1\&^&F>qc*^^60db`4Ma7]N+(n
%YIuUdO_q_VHB7.eTjK?2&(dn.J1'L[;NMKH5tZflAPS0j]'UUfY0d23lPnEXlJCo4eb=0[+92^Tp8P2uHg`iiL2XlU\G99rfh'Ek
%MNG3:P8%%cR`Qin2F7Y61gmo/W`$%O19Rd<KhX,`UTo;9+9nnT'W`H5/M8qYoSIo5*J1aGZg)`H9lb&Ms%&4TismhUPI1n&Ss--$
%[%FTR^):u`5LCscWOZ-BWGhT'iYoJ(qGDR`:hQfVdAMUHb9T^+ck>Qa>9)BVm\>F[Y%Q>%c<fB/n]Y-A[kPCSTs>uhcqL44#7hYp
%Dhe!=!_!A3Ku$6a&.\#!me*tr3?Dq4Tl8$)#FcP,0CU5dA%9BR2XRYZMV`@XG=!^'Z@>Y'nKO6H)ND%-lU[gOpVMY('YGUu,c(4)
%Y-9I4AR"kba,<q6-SqX.h_:,sg`.J^a;tYq\G%X[plRNBp=\^C:I7&lWUiZS?t(/AcnFCPWq_YZ/CDB0)"LWrN2[:P)8T?7:j]"'
%h<hHG+TW0H[eISD18&O$&t6U5ERE_<)Y[4,4_]-<A:FeGDl(KcQ[Bi\1HX`an7oZ3lqJ#aHpk&5n%G[m.^`9@O?)tf9cVN$d^i4H
%2`1Ni`8.,F]7loRX7cQ2`K]@'nWHb*%r/a5k:60$Vu>7\RuBYb+]J>"mN+b>FI0n^m,jZ>4#HOVfQehU6,VnKS70d=*?a:mS9h>W
%P1AEI;Y?gd1=?q,SJ8/An"C0bX.P;*(q/O7pPH,j1WmKbc0-2]6DSET-)K)G[CX<RC/t^$#XS.6]=YB$X+"(%QdQT'R[ms%Yll)`
%D/5*#B^YSLFRIj88"_BNGT&A.'-P[7dO:HnGN?]&g8i4O]&uFUMR$a/V2!?=c[<_B3%nqiL^>pJDBP*nR%i68-5BB?f\<KB2![9h
%eQq`o0Qr_bpaK3$)X9M/D^Id;l3J42SVW'_.cW3n$qL\%+E3K44.60F_[Vb\5%=N<>r^aK.m^Lh=_R\2ZQ<@c[p79^A>'`O"O4pl
%@9oThnu`\c^&SK<U;,Md$"eEO*3gfS@-bcHKf5bOGdtZDKqfhD.W4"C.,44t#/thn4W1UmRj9o2%WO8l-f#fI&>R73"a"47%6H53
%raE;!&n37!q'],Amu[?MRT6s&JS>'*!q?@(#hA!5,?@nRFj:OM7b[PkJ?E'lrnA0!,^HJ):HIDIIiJMe<PuhXch1cZ#]I6)&&sT=
%J.5@s+&)rN\AWR9(F>\kGsVirA;TEI'+>-k.gD)d<Rq[_hCt*"Eh'^"MLuH<W?@k=+DNDVlRT<WMnJb.0SJjj16Y7[9W[\2e/dCZ
%rWkF0'()efGJWRHFfdq3Y)a(G3\'d2Z<h*(/=4*N<g=k(h%Vbr@d[9#.-4t6M*B?WluK;(<jY&E!hKdRATseu3`G.A(hLmE8sg^$
%Nm3nkY'(KsC%J<q$J.En8UllD!EQu8#kUHPgqj]^jj(+])QB[:LoOePk($`7JLl`XFXpt16*F*EGtug#cqP9m-M^H4$TR?_LWg).
%?jOVU^c3XODh2ti9HEdScq4_GlrLWWob:@q@Bm+S&@CpY8/`5oV]0n`WXWQ-(^;l#4Fe:B9s?Flb$])SX,p&^997(9ls:J,Fu4gs
%Qn5O6CChRW:suL1m]$`s.!i9aH6Ad*49V#r+1ln[PS63pZ%')q8(^3g5*9o:#-'L8_POtDi$`_o>%#$UFcWHS#mir@FpI[=!t=7&
%ggLqR6_:mZ+1NRu9gZEgbYiGQpuWF1g?=PX)PR`8!Fn#MY9,ffS;a^%9)RuIPM(qP34Y68)1e?ALnl>@pEFe#91GQ>M5i?FRDBc%
%p-^HD_@3G7Sl$MW;Y',5eQP-:l=d?kibB?9UYY-%+>3`F:b/QX1HMtZd<1<JOl(BQ4<.(mfR<f1@WcS(6*R<GqX!7#mB2k2&?3bq
%Sh+Z+OY__\\$*0c^1SYtQC4dsh1XO&W5DuuJSS6O?(j#Zj?]?V%eh1g:o6?n'srb\hjli"5bb@ric[t)(U.or340jC>&Uo4R:-1O
%*psTFQb$Xf[qY>"(`EOMVNj7EgYHK\/e6J\2)0>%$H"Ghd!J%HYn_M=[uY"[qX5g@Rs]q/<Er+UONNe(-_!_l;"uGC&kXeZ5fP>%
%rM'Kj*CHkUDZX/X!!Gj].A4/.'5sQ$:;XqcR8s#T\]J;$i<kVh#Wi9TA;31-lg`))CDtl].j;=[.L0FudSQ8%B<^"W#+NADB;G;a
%odJtJjkd_f08C:)'Qq*YfncTiW_1'a^l2Qmce%)7DQkk-*:h'Qci-lQdIm<KVII[$!D5t9fJ@7?U1U2l>8`?Hkh'M6MZuRh6W"#'
%ZkZKR2I4PdR^#LB\>UDO6$[t/CEf19T:J08\-qs[])d+p[Uq%?;SZ/NIn%G<0SJ^7g+?uV<JM/*+QN1)&+n&e0*,ATRHRu+@thfI
%Wlc@!qEQXo6#WC&%=H`+lF\=bQb5$LL+n0j@Iq<&82q,)kH@%*&n09:!aGD\&X*moKhI9j6NDFta?mWnbo*:_k3-smfkGtn,o(rk
%cbUM&A2i6fqH0d,6G&0f)2Wmo0l9;f1MM.m@t:^EG;jQoObL9D.^gn>egZN:0cf5TSj>0uq<_++q=4%#DsS$NF@?Bo%KLq'\u5Zb
%EX_&GfkU8's.-#M:f/9JQ!'kt.]T(GZ^NB-ehZ<[TB6jQ7ujG<'?u;,bb+q9AELub-$9NP)EfC7GY;onYahtVkECZOJr_H4N.MVL
%/E>4ThR)I\Do(s"=A5h^])CmB5PpLkp\V`)h/Ap7p1JmKMm$LfnGFC-k3mbYcb=DXpu]\I[Q]c;)ItZf_q;QSRU(3K#hb9;Y=,d/
%0CF7Ednr#7\MmUb,.rmXDt)c+S[+8bDi!l<+]Akm>s%`iipT:*ec$TT/`b2rs.+/ul'Z,b)@"1CJuf,\r1jY2L7P9f?3`T-SnLjG
%kq94b2:P1)*@0=iF'-opGh-9#HB2Xh6.g3d#mp;Y82r6ibpZdc%3s8WF0c+6I(ON$AEV(I1Nli>g%uH_?oMXO)=9[upC\F=bB#@p
%$Tcsu&="$hZ%1m6U(7U$<'^M)b<f/d,dJpYDnJK%/#(FcS(bBNYR-Rf2XA[bk2e9oqpmoTaLn&mnk)#U5(OcFRa_Y3]4eq0f`3iN
%M:tB)G4.rtertg;S\@O8]jLEJQE0Q<eDq`)=219:l8p=>qfd)5YPU/pQVWcVV\Q>fluB$-mU^(a'/F+\_Ul+?%@%[AnI&*eU23fb
%7GVT-)0V?Qp,?#:cckZfDf2lmPE't$=.Ci]&dV)uN;>JCr7!%UXC@0TLt?98El'b:K!tEI'gJY)[V+OT+,#7u)q0I0Y]?kZj*97a
%P.`q347GF%Jg2lP$D-%#me1:D3G&T+^pg+T7D'N5MbS&4-Sqsh#F<03)M:fEndqAqDLHf?b/_<5Mq5"=r"*YWGSY-\$PG\u2W1WL
%@]]q%H]?M'TjV6e,`ftTTg0^t4$h7/Jch=J3Ge4+EcK4pF=1E[D:W&[*_#haa@eF@`6[k-C=f^%cWDRum<DX]cqY_]CgBpDNtn\-
%hth=>!>UXIid40go\(!54R^Xq\4THedgknQ6SWB:SWSE]>(GjLp!M?q5Pt3^b"X\OoTjFC!dQ7Ho\=FH(c.%1GhK2i>bMDMS#I(3
%[<a-pg3h<%"iY@Mpm$@>s6E$)UV5%`??eX$cT<,,XU!+`RLXi:Y.f-J\6E9.+1-A:a$a'U%kH0F%DmG'Qg[PS-]11Mpg><Ko]Gqn
%@a=GX7i3J@hCQg@a7tKi,46k.O4N(Gp,2/.(3#+T4*m>].<f]7%Q-/oT2UM<#ArHap5IW?I8bJbaC*6sBK%R_U(aIH^#$)uUH&d1
%58#gQ0G0g;!1"TY6,pp27lbq0P<<6F(!Zo3C/@Re3^h&in-Y]p"I.tMh]Whn$3="IOMp6[=0BomU%#o-B)3\Ab#X1P;J`S2Y4-\P
%`#?"0]'EB2'=rW/$Z1PST\h'05,s,V*Md%$`Ze79k\oU(d&2W+QHj]#m(=kG=g88Sh#p&)kp^N1`Ke.rDSmtD4Ot'1Go*q@ro</g
%+pGdBN!433&>L#j8"_%+<tG*GXtl^janF\E2ZR^,#relIIiUcJ6_b7)n%9`E7)U+u`f@5Hf:mCZ%^ajsi=!9"J@Jem-dZ<^_fFK`
%gDqo=DtE;(438Y3'`4E_a45m7EWDZ9Wa)>-QKBZi?m".M>/Dg:*"5b+D<#c&+oq!+VMRd+5H5aR:jjrN*UpU'W[Zs2j"[XaMG-Tq
%3lNql`VYp3p"f(p#LZ6kGWH-8@pH>H@W1].#BSPd+r!8].$#a\5L)2<M%r;FXIW0bj&4bPEYrU!@r[F^"b");6kF'Rf;s7tnJ0!7
%]+cnQ,s[Y]n-TRR\5acaop5I)KlLpt/tl)M;#:0!hkci#d?>V/4'i,VD*Dl]pAjlAS6UjcjQ>j3IeNC5;%?jY0!#skcF^SHZA5Go
%$nRT')DF4rh%VC"MLdK2#P5cf@9V7XDmKbsH.P[[Y3/:_,^9d.717PKlmKj9B<=f-AKk0Z9XlkqbuH]g&n8'j&BbX(YT_ubcStaS
%YM^WQTY0X5@"<Q!c$SkkMO#q+#'ppULt"2t&LM9KP;D/8BL5OH/fWIh!:?kS?fH0&`TgKXof?:R6h4_Ync=I8*^kl3>J;+b2!<SA
%BL70e67&HQ?cB,!ns4DOXDktcWl)m+4atR_a7<K#>YhDDZGb#/q\/70_b4<jSLXdbq>m1X`7Y7KOG[sa9"k\UdST*X5j&bWKIRJK
%X:c&A_K6c\TI]Wu:E$:3VrN]42d_[B"4:*;E\./3='OZ,Cp>.`64)0aYGqi2Dt3-*DT3QoSlZ2B$%X6IPp-5Oo`5k?qS((s!CkQe
%FV:qTXG_]&TmB39c=!\D2,bfVctF[cL_d:r@]=Fo5>8*9;/MRR0*'n,;<3j0M(QkOC]T4M^)G@h\NO65#oI`LdL`<%_[;/l_!!/&
%Xi-d`F"&V#.D>!pI=6`TImbQ>O@Bff6>sYgSommQHfXa*3RH?H#:QO<9VU8/IfM+gQ\Fd116[7P8Y?Zr#"K7(W<eoo1^3!"A<jY7
%5#[Tl?,M'&IM3db**Ysii_'F=f8[@!E"p_'6XX<4?'<0Do]>CCr0CoM66mdX,R;5$)t_%:*Z)ej!*Y=!@g*XH)>^Dj/:nPQI\=3&
%j:Tu\VY'8a$Z'raTgF#7/!hQ!aL^H/0T!8-UqVZS*=FS.(^hP1V@irEbj;?*Z^"D"c!#)3$f9asf5L0_-)9=%02eD[T-n,P5kV"C
%-A;(Pr*eYJOtX1UUsXmU!YaL<,q=XodC4gISsVaNj_oq1R4ka5d[_&B`o\`eOR]'r<MA`NFj\WuDJoUKPg%T\^KC5l`E<:#KXk!X
%-gbm<0q3oV(cQ17&24S9o=+=qp6VnH?k>;l^sg)*Idm94@.1\C8'c+L)3Safn8@+X[-snLO/&ddalL>!NNTDG@B:6iKo*/[,<anj
%*70&'kk9W@aZb%Ulc5&@`r02+YpP,D7'+kY55WV;/S2m%m$mOjX1:"$FV?culc+&l$?RR<2m^/ZV,Nh)>nM9"<%?ti0D[Ru>C]G5
%GuNpmFQ!P)*Hoh$"9O4_9HKX9YK(hThUb6(El!P"SK&8::r6+LlMr"=Mh&-HmDWdA!YS1!J@@3.d-+=p8Ek:FGM>Er/?\+^FOI-N
%SZN8J:n>=ZFo@4fiLE'"d.hchT7>Uq4[M[Oif;>'XRO;]Gd.*s.P+H%/-/GX,`$k>/>?9F#Fuhi,KZ,Y;7A_?]adpqgC:-?>m@B.
%EZZud=qjqH;#U>LZlcr'Ph8@kp$k,9m_AhcR'snT1a`nu1i-g;6HgA)k1Ij>>ZlYMHRP2KD@lqJ0D^5KKo0UO*rMh";A"u@:Jm]c
%d(j3fHQ(SNGJ4Qo&B@;,H#JkXN<&Q!KZ8%4"-C='T`m!,b#k#alJB":1=Bqj=De_rc^L`uMgi\=+DC1c"QfDi21%pI068f?C>kGR
%del0or9S&MHu>'<MElQUbg_4Hq%Y_0Ct7PWpam%^oPWh11T5XKn)Dc]rM=h6eig/C1`TA9G4!V8$uk6'27iQR&8j9J3offrNU_cG
%!d^QRLPHHHR=Op?e6ZtgN8K^F!</e9N_@>[Q5-!Wiu&,=K'F-ek0Pf<doe\P-1CXcn!?W-@n[_*mpZjia"sbgGmaC+P\E+<nErD@
%_=-aj5fn=d7YOW(68l?7Kd>ZsWl.NqN6^Y.2S\Hse`el*UZLbjOeo2Mia7e1'EH'B$ZIO&T7L`mZYF)4BNe?eR($T&g]n!jT#F^m
%[744B,1itZ25Mj?:'i\il1QU"9YuUlQo)djZL/G:68V]bY]W#LdkiRJ7L18JJ]iJhE41%?Y\_g'K_M&<(fU+d/`Xl_ha"O2,%)[q
%Z$:)kRE@srN?iam0.iWVl!T$n#YdWY&i?I?75W.!d'+=79R%G&/Rp*$.>-mLpsG!hU;@,/[U>d,X.e>Y/QO3)_o"87@uPTY?q0^g
%!_?qF*$LOlI^%!ia%p30X_#!eKF53s<Tt2+1]^feoF"R<6T[dj.c#W'^sn9<fQiS%P8+O%6bBs4J9cW(OCh3tR%R#]T#HP>]>3&!
%D+.1;m3o4U0BN`-D,s)dXKdbXpWK/DMp64(UJCC1jTGWq(EuPJ%16+6P6TH44ZEu>m[8YVbJS83:r@lFb#D[?ffTUmNPcN>8J_8\
%Wm4mf.2/'f+\HQb&deek_:2klacs);B>T8]DmE>:)hfuSjb^7C;r#Icd-eX@'qp<VOghJ/o-PjVej5!uin3u%/:rTdo+!GMP_Ip:
%jCBjh(i=Ob;Yc6"Tu]<IUb]\[PHCf9Db$WKUZ]NXO6k_oY;<-Lr:!U^Xq'FW8K`t)2$'-])&doQajqJ;A,G<?UoKE+HkcZR1>N^#
%e^,q5DK@^ZSC2o)c7W3m`lOm7_Bq5<EeM,u`cX4o=L0A=rkbA[6`l2;rP`CUP;P[3!9_3gKe%^J@,R']8%IhZ$P53I6%N!m(HtF<
%fYHkjbmR+WFQ<#_LJf$YKb2DZr\j"uFJRV)7X?kt]9Ru997D8g7k>.E\^<8f@p=E$DJ'W;nRrhC-Q_,=h7)6Pdssc(#keE8HTrdH
%Bk2^8)[1Fddm7%V6K^,A\u9j,nW\$g)>\YapNF$R.J37`(uRoLs8#c+-*CXNI_+3?kibPSVb,*p!0mZb-D,pF4CVL7L(h<Z$3.];
%or)`!8qK?j(#]lM7*mi@BEo5g;tNj1qqU@'eO->L2NrBWe_sI&[;B%u-mfGrjA>#6%TnPI_0Llt"K<cIl;Gh:*=9g?]]`iLjRle$
%n(WKrjktUZAI+,pV/O5*^)l"A,r3?[$m&_!Hr8CHTGU3n#PsnQ&CeU]5tI2+F;THZ#MNO>2![V4>U]66C^`i@*c5DU]^4Zj]OG*=
%N(otZSFKk$';N,[Z>a0SLN[<7KJh-^:'5;m'Z393[95!m?n3/-@*l8&_5-0d`_$NuJ4EX48G,[l!">&^r?9IEiCk_EY<U8f$PO,,
%nGPa"mDYj?&7VF^SEoL'h4*gtQ\NQLS4m^G587+tf6R!=C%5pL,RFT)\nUj*%X8<>KN@KRKTAuDQ[l9=14Mdq?F4Lh$De!b-0/4'
%Rg*^j(MZgS\C8gmc1X"Tf>dOZ4%DEBSj+(U4^TqXPRtc/8k2*Mm\V:U)dW0\6s.fd:h4VhP34g;YVj_oahIZGJH%>.^m0G6USSq%
%@W\<OR:q!egATYOa81$i$r7oIX`Y[N+-gjpf*QkV15%cRh&[ZQjsMQ1XJ;O`-:*^X?>rQhaUX+FWBVs@=H%a2BVhF@=^3]%lloUN
%pIuge[fa5]q`qsWn_7AS'TE@`OQ+Bg)L9ctTQLMFd2d91a'"\fd.B^2!6mUY6^;=0"EBrr:i)#*mWH9b`FpYQkn-ZL8[*J]/[9pe
%Ug!G;@!=u1!GU*)D`i7h_[7C&074]p@1H3=(c.]1qj>:5QNoh^M8O2"Ki(HrD]C5BWc-:)WV_X@E'n_k(L'1Kr=(EKKI+bd7B76<
%)VU``hH&k=OXNFr-@qIPa\dM/:_-\X,.`?!+qUkFe[<W\OE^hu9<gXRTFd4(K)5Ji:Fr<eo.c+21apG`GM\iF$s$L&M[XdT"2"<M
%!QQ1@pVe9&6V'24Pt*s@!>KTA*#=DGAQ72_=/Zu'QSb)?@."@Ti+7bj1pD<[qGa?A)C@*V/p179W79eD&M8EJTDbc;o6Oq3Gj!HC
%CFd;Jr5Q&Xl?IWB/HtkfEh>FT"$qAq+?hM2X,]&QKqFKX,'1puBg%B*Tbh#95mIn*Ves/5>meKYm:m^mUl:(\TkL?dh0\8%Hp4(S
%n\Gj8g8Uq5E[Nj2!3C$6!!06S(DKFWpspDCdbq8Rhn"h-+N]Oe?BENBa&Ktn$R$*/b4"6]8Bo)S^24Q[A%Ps^kr#:J`,FH_E+s>6
%fh*+!G)PG/m"QOTnt")#l>@L"m8:!tR3]1b4j1;F0>?gm"/QtPW#KugS+MSq<bG;-kqoVkpUu$MbR_WGg\2Ps:q?icN@Sg]Ve.&s
%(lI?GW1.WK+h),#H"T?>1i2I%3J=XFDc!E37Ysi%<%>F=+;2n`Ou?c=]cPh>)b7MOIc,oImMt=Kpk$c%j)l(JYffq0N1Pc(kALj"
%J5GWeJB_DlT#J98Ledg>Ki8VVEC#f$VgsWNiMrmDr)C7JfNX-];/Z\_2dB^Z`-aO5qb\)V3r*<'=Ob'+O\^!-J6@&@qhW!S2G's]
%a<s%T:g$ndK7ZG<118>g)IK>S!YQdbM=:iUkIO;q0(K=)`f,bhq.=#Yj4pnkcGu%KF)KJ>1jcNO7#6Hu@m"iW;.(SOoZp_YJ:5jn
%*`feGO^D\#L4X?URSU%#I!fK%&+.O66#=G_81:5O>]^n;h.]d<QT]`oJ$_]O>`_+go56,2XXcssW9"'9lO;3VEgt9f!9eQf[oS5X
%3Y-h"qd_I`L%#F09$mJY8em4-bu#9j("B.Kh'29bdG9eB_qON#hb$-n4)?KWh8g?\S=lT"f99J9P$KC\2$#Hl*,i+004e/!m*m><
%YB44L?M'3YfBS!9:`Ee6d6t@:0?8=7!8qQho&K*KmmP9+SS7'RVE-],Tp_`DIj.+/19K]034V[G>TPG`IaR>]-D2%j_kgUme\&H_
%^?B3ublok-J1@1Ah1*cZ10gS"CS6Ae76;%LDBEE&T_<ps:jnY)/XNmMcF-RQ)N7:8V-&;4`q+IO!"!A6.nE`r6CSrdi)%VDY?tRU
%-tQsNP*Tr`dr&K@Z&&Gamnj'G%IJ%oGbn:5nX_-#r7H7bMJJe@"\m3,")9%;/Rd[IfE\IKrSc*Uc)u`\C%#>j'kT.U%UqnEK*_[s
%fc)XTI]C;jZF:kPZrF$]NpuK5Y<ZPZSg-_JXCJdr'/l+$fN:OVK#ekr+XGmMPJl[j*cWNKA0V/)(h=8b$_M*poP!t/HCF&Mqa\YL
%FTn1$ckD7+8ZMg8#XA+sOO5V&*#W`Cr6HtQ!\9O*_EZ=rDW1F:KLTck44J,lKs4?<.L9[_Z;]io,78T*7O3GmYg?&*ZH';DN0lQe
%+l5qc!^`U$T>A#UiiIQSlpkGm*0b>V=6:PBBlI_eNMBO97(`cg-`C&W%imB\EVKQFEOTp$,eW*(6uA2`-JGX$.tm*S8p^I'q!MT5
%juS/:&!il<,[K,3+_S,6Z:"n13^^<d@Kg@YY(bkL97jkeCK*1l=fQ?)",dcL@MK4sP"d)Q6+LXWG,JZ]d-aiJFE+UVLNn"r>_gKm
%b!cW%$O`BO4jm#pER9?X#kH]<'#e-0P$/\DEfa4'YTo&SJ_RQ1mC`M1nu-mR"S7U>Z9$b(`fu"f'>%80-&?jgin^nb=mt`&FN>QM
%9LZggAHZC&ioe!<,V/j7"sS)2#P'Pq=.ZXRb*MsjTKh*=Br`3!OcOY7[`q9l@4BgU`]R/App/LnhnL]]K$t8qp\@CUdDWdXle#,a
%8e<j\n]>="48fG2g:Mjio$aj:d$dJKEJYfhQ_0Z=3A'H.TsM64;'U3ApCrdY(cf^c#.:W=GdeGE=7Gg4#B4MDi136._U+0XH,qIP
%.bNpl\B3sH[5.U0rJpT8UF5$UEn8K`:RUMo1KoVF)h$UYPou+%cRRfp#Vqi4&+Hot5i4K%@!YSC/g4;_`6-?QAAe_T@"cX(?&YO&
%J+\/Q`sZ90;C7C/FR^$cFZZHMVS\sO;OOWPB-9o<$Z&#?1W$bb@)]X:[iBiB5mnF>-JesQJS01DMESTVj2#UO.K,X'N(^(%#EuON
%8]jJ"Bfq+VWQBl/5iT!T$oZQ-)`X'#nN.B^!^`,P3QH>Pe#!'M:I.Lb//=+2>$9WuKJSiVC35EjV]..'Vu-B-Z=KG:Wfgp+bEhi6
%obCjlbA;=,9`\[ZgPpt74,CW%HoP.U\,fH@Cpgjlq+UA1*PN/<42j)fcT.s8b\^-sHkdk),-C$GO]%'$J)(-&2]4R&DiTEra_<Yb
%V=P]KO/jDK#V9afXcH7NcUN_WNdP8N3[r.c1XBt<TkH$$%)b-p>-IocI7lLnleg/.bq9KZ$Up2MC9[!+JW\\;Z^>%Ak[A9BhPB-8
%%f%=G9RRLf+A&_)l7O4Z+gKA>.Eq2&2\/o2`s,DraR_QD$X47,?$!?f`g315;_\Q`-VJta"!Au&3BhU2qq"*SQ"8"4AfAdi5/d>A
%H9qh,/0(qN>'@q(F`YF#kOoWS%ICE@!Q/k?Y50aL26Wm.'%`d%>LtRoou7Hpm6Uu,IFU1][RSj#+SbX/L3240#Y+*NN\APSMlB58
%KCc&0h/rnapi5X22H'sY9XhU'"D8Wb!SL#T`7T[)?jNI[iOI.P[S=dMS\CgNCi)(bJKi]G91I<i/)*X3;elpFF[Idp7c"XB4p2(E
%PQ*ne;A=sL>DM&HN=dP(#>pnbhO@f-6#I0m`M`u/aDA<=%%1Uk2V8@k<1*-1$;c?tR0<k:Jh0k@3(h[5FI&P;H9)T(Euu+4%.%O/
%AZF(fAkmSKmt?K.Ep:u,8g`E&@NH^m.^s?CTF<;R"OPiT^_&>#3_PJ115>J_UALuLl`6L^s)qM:I+R#hlL#ltCZhCS:X`]&H"'i?
%<X;`bW7BihhCgr8R)?2_ZBgaWq&H=m3%8tn9k6gkisI)$Y\LIjb#f8)Nc4Qn4-/cX#:5/rG\*99eWaJpb#*EPd,!b7'Nl2J9:n@5
%J@,D[nn:,H^S!DHm-cq_4?BQgrM"4oi<fX4X7-Kq:Xemn08&IEdXk="3]R`<:/*jQR,d^snu\e\0E5ioqo,2Z?i@%_rREQNrUQH8
%J+oKer7Q";qq&UCV4[ZWI+&$(gdffARbA%uf)LE$MMo7IDa4&]T;=c#qW72FfI6dQ?i8YcroZNGQV[YZl"@d-h`:Z#:S7X*e'EL5
%k:umLI<b_.RsjVe(\iLZipYurrUfQWV6^qITTn8)*)`\p:9.(OH_eWjr(#ans)HUK$W$e7rR_'SfDbauL8TOuoO%T5Gl"J5XFL-Y
%5P^KW[t>q?eOC1U.)@5Ye6@@5Pc@U,ODSKmFM6-+"\/c[PfL],8.ZY;d"k[39OWMiA73Xj^aWL,,j7_?Tt?_VO@n;^;d`!*kU1Hl
%.*@'5;_`/V,=[*_L6ubIZM9rIFjObd\IlSk@r6Ul/%ipl,h^K3lY@HWV/;AZj8l`A.WC<Drg!ins#+eX)$m^EZ]ZH&5]/uc'^+1"
%'<0Zd=?qtb-CbD=NtO>Pndq3qK$B$r7t@:Drb^?6;NT\@?p1*p;\J(If*]FI"dq;8X9*M[I*1PNTMo%]qetj?6.kSsDoaD@8gZ^;
%k+'s`^cK)$Q4l*%)Hh&CW8E`!il^G-5LOa&d#M6*qA\/'YBU%D,m:A)&O8.$_FFOOm_#Mjh#Q)IO1oK+.Rn:0M7!Ro$cpU+2/T?V
%3WeZr,:Wns=I"gfbr$o_NkYJ?!,mbEV'\#8MVK_&M\IQh_C_qkOKj/&G/HA&Q&5>npsB020s3c(J@^K.-PjI>/0B2<^b,tm["Nak
%[#qpbk6^nrC98ZAlk2i\]cE(jlI2iLXEda@1$KfIo?J"1*e"WjcTE$9Z1*_43d<FRQ*c1=[DDp5_*:4[ePA?sE\V*pL<018o@,=W
%6lC1OfHcgK@SMA,GFV7ILb+*h:POZ6OmYPp)V=P;n-ge"1j+Xl79!:l_3smkmto+\EF?.%Q^+o]^qPG^*oa#\f7YG*)&?Kj>"Nfj
%_g:0cmA[LA``?6$i5J5*KLqp/pXI>\l9UhF0lJQ7E'uufN6CDVI'+-S=TFUcQ4$+0kagFs&^5Y+V@f27,eb:i6ToHTCj0N/(:C>D
%CgN>L8LJSMI[J>7M80X3l;o?k<&<Z(M_Z)9qMu[t,k3MnU;?Os6slMqp<DU:\9Y=?#kr%1`6<o6:du]8a#5KH7(XCG67PPO<L[un
%SgX.KTgY,[1A\60EWB0=YrtLF;Cl(R_.pU"Na2s3,\?9EZ>oZbUUc6cQP(Qq)F-F'N6#\;A$&Y,"RWc)T*jY?'7Es[HGV,M`t!ZN
%[[k?U[!6rVTr%\rf\V9R[RF$)?ra^)4Un!;lmHbU%2+htTbf(mJjSM)D\58`g2"1XZotLqf+Nie%j7s0K[NGb9J3CJ;.!,kPaY)i
%,'e6]Q@0;lRi;mqG]b_mTU-GqPS"W`*X=Br6"NNH,Rt85HqY0*F9n;g>RRP]`,]B/K4'8M[]/4fcrcZ]jYZ/ZhS_l[FFB<\b?$j`
%Bba3mL09R]CEeo\N5(oU4!_M;Q];;0lRomaCk=l_62]Hn`"-O>5^`i;2.*b<\bn7WV6C#'Ihg*XBNnuOZ%9)I+uq<:/-*\@_\`q5
%Hn<+?LCCH'Y6#<.O?6hFWq].H:<1CgKSJtfNlQc6=/)/mdA9]U#rZ16WoBGaN7[;LR_T%Bc'Aq:oojbBr*H6K59b(g.bBH0c?ti&
%,ZYSXaD/fd8EZi6<]@T%L_slm'sb"300/"FmDl(QVV(3KX+ac@/1-='P&)JK+X5^<$@Xc!.`*mt!*:WNS59Y^=l"Rp7&:'q!"T[)
%*DFFaOtRZTLoE<")!EY*fX!CADT%<9[K6_lFSPPV7lBp8@WI-g%]ae]2PPe)"(>S?Q$FiE%UEsHnW6&T4t)!lU4pV5!ToG@5$_:A
%Jjb,>*],?S2<_.^?\d):35l$j"mR_G[YX`^?pE41bg$"iL[0o2)M:hZ`4mh0CQ0Y`RF6!IDlHXShNi"I#75r$FB>P\fd/)#^f^U)
%4R,t'Y@f[C[mShtO:6*oen'l]g*L.Q;YMh\X2RJSG-f<rXX-o"5**=QFKA2))QQYo!j(i+0^)>]*n$3+;>%G&)$qu)`(1,_q=qko
%?4k,7o_!oOIgZ%(/=S+(rQEG3L',6qT^)iFjd6?K.34'Mi]s6\(VEiUM^Kqpepmq_7Z]SC'o;t28[WBD]sXcbCl[rf<OB+Rm82n5
%.Pdie%07],7^n_=[!MLRY#hNK(\"Hk%8%sDq.&Ygg9%/?c/m*ICMUUq$V/DF\#jAWW?OO'ND)'g`0J1cWBqE(";$8"4j^NVY4_JE
%N;DBrBI+QEj,:=lS$Es`-*S<tC#1!,)>e?Q%<uiWj[oAeQXp9e%.3)nB=QD^PQ^Zg`O#jrR8Zu&$<qpog6,@\N7S0!q)G9V#YmLm
%`SnV;VD9ctR;rcgDIOB7%nM(0ghS=rK_'b,O^W>80B2Q"?/+OrU6qcW"+$Un!;3C*>pQQf$C1ZL@TH5JeM&MIlLRO.BsqKkYX;Z1
%HdA8#O-TX+\Kt$J"8[U,2/\]aRo-]&5&A3&;Xs[9T6=uU+tCkglX<AmG>C]p1fQk/'_HDu&(9',CeN<j8$S?Xbf]"N[Ui'_mLL+E
%h)%!r(9k]*;5eaSUkr[$d-Q[C\.\$!5ITsL\#4HDY]i#fJ8!UV@5f.]Hu./6U:A<sML26P+oiEmjk'gn5OO!7V;+U3Y7(N"Z>E&R
%qOZk&N>1,.%XD7:dY91^Y+'M^$1g&c6LVZ`8aU_CUiAt(R_7-l`Vp%N11iNr1;Q2kl4>igOfIUMN@I;h@Als.(5on?o<D56UlOTq
%.@IO_@@S?7B;&o,n=d`JpPUr%.dq$2YaE5U'<=m\\?04I[$bMjlp#JEac6Q;.=ga:/4Yl+HBtKda(@F++lfu$n;Q0.7?%N7[<5?X
%\feMW5_=S8:?p"sGcgNK?7J+\L:s)LAqI&&E)$'*/.;qlNo:h+.ld_INE)&_^:5TBTXkZ+/HCi$p!ZkC=&di3'eH'Q6]uNOEfP%o
%O+Mt5&qp\p"EAAt.i!nm9KXT]jVdG&`OB!1-mHjfRIT+glK5lgi@NBt(s:NY9ik9I=1\q_HZnE^YQDH_hd9^4g)Np`OdJ,hf>%C&
%V;15l39:a<D?*N*D8i,6Gu1Cf<9\oV_^-7cTk)$W%3johX>Dkk(FhaLSQEVbTd[^K<@'/o07k^kiD2E(*Mgiu&UeC0#'.)c.<0Tp
%nZGKBJ=gEK39"D.;/%3$YDg)+<SUmN^2f7PcN3oi62`mMIk\*1dd9cTa.OfuUQ@CPa^#%R".mk_dC^A<G!l3oT8UgJ$/<J4'Fpf(
%o^%:Zo1XTb)?.0+iGV[!dC?su++hGY]OZE,P8M+L0It[$We'Fo%#^m/%"ZO*,l.,Z#'V"&bW0g^]2@['%i4N=CL/<N@,Ml(X.kYU
%[fH,<K3-Q+l9X2!(]C$FDE*/dntfk[okq_PUkLibkgAcl5$F-E\G/^.\nJ%I';H3BTYAe7"KL,m=Z_h#8ck")q)msYQnITB?2kD1
%6Yt'2e/H5S-Nc$Mke5*dhbE4E*$k=1W6L)Z+utaKJ=TkKg1?!iaN#+QqX%:Y8%R4EV7nV%j&99+n>=bcjjHrQ7.P>p;i1W3iU*83
%5b/@0V,qAam;'hLb,qaI;nB>SOk8!)AV]u!GU*t`7tE"p&cE3:8iCI';e:`?W%[q`XAG<JC"..l<@&Y@Fi`7m/LJ/4FaBrDokk6)
%rE@gBK%TsSZhGqcn'p=Q$*2qm^X#4BqpG=g@K/F2_>@A'pX[I&0FH`qB,90S-XlUX(11M1B('Okb=:_$K43(s<\<Ys\RK)"9R7#(
%Z?Ogd-61u12oc1*n30fS;@!lnI_;H'*:2W(M]E7f0>hMJ((uW:@TF]!XFC*0j:nB.U&&9gfTqM+O[R\nP7N"W\JBsuNl0r/;CZb"
%&4*T93tML@<l^#6bXnuCIQn&Q>IW/`cKHU<+>$:Sd$h$#^[8soi;e#3Pl=2tPgscdkYi\uKfRj/R&7:*:,g%j7V%LhU[NuDIHe#B
%I_UmXA?)"ukZndG`F:XP1^%-rTk&T-B1EkT(8`G</OGW"JeNOlog\Pem:7Rd7l]4PZ4?t@fbUO=9MqC3`L^[L]h,a)@=\c*$D;,G
%r^M*Qf:.^ISKPV4j!C6_KDu^iGJW*?eNc\N;PK-Z4t%CNrcYYA*SEB+qmZoR(p=39M+.$V]"@.*`I"G@HSpmj/:".hnp]u&:5bm0
%rfB-S,WRQ6\eaWN*L`#8d.sE=O\h2h_a.Q7eK-g-JJ8Bk.H[pC<g_ls3Or+%N8ZACkEVkj\!Jj2;t!DW>u)lZa9\q9LRA%:6rsae
%;fn6*W(n)[p'\[dikkdL27pmI"h2/lZd3M[$.CH[#h5[klU+@TZ7o3F]iJDQe[I370^D\(<'-700.L6^,LGTPIWbKl`BG$Jhc@XC
%mQ`-u\6&qFCU=dkBB>Ki"n]eR<=_oiOtAa"VCjT?bbOIe#/N-_TA[F_U5n/ko1_:7?/NgXd^O*H8Oi%ESHl3^L9=^<$;ND2RoO='
%\BXH9+h7l@,^s^JhJq25OL@;T<YC?U.!9/L'n;X[GjSArI_Qin:>=pEk0A<:TO<IfK_l#rE(,cXFbL87J6sV(fmiFGL*'m*W^Dq`
%lE?jF-9C;Y'o"^CT!JAKZ^bg6%Mf5B^E,O.fu/:$aaSZYgq?!U]5p,WUPuaS)kc$\EcLnLX(5=L)&TS,:(.ng#U.Q]WhJ8hfhu$?
%KkA+M2cFVV3):KS4fPd7q)ZnhGmG/9EUsK/%P4/ZVAE`DJ<HZ?bHuO&$<oghYNGS7Jk_Y;OEIJATVtp<n)SOFYq/U0A;%,9q&]8W
%ZU15a#UKHjCJQ[pI0Cm0N2'/+s2]d7o78&.SOY:fL"p(P\$mm5&0E-!(^3UaQj[:R8WSVC9s2AUnoaR]_EL(n]@9r\Jb#(r/b6=I
%f!$QXe4l.\,8191Z7mFu7&;WI#$Z5F&U5G_SMgM&<RVFML+*%I^;9cTq@#ds[Cru^WE6G]:o$Pj<o'u37h9iX!!\_E\gP't4Z&[e
%\Mn<;%!HiQdQ9;E=0/F@?!6fOd)GKOLoc_9-I`o9/nF73/5qCj`QX##B#D8dA0$nnNLEf$:B9;q\Hbu5`HsWVp$4PG+<o9'n)>UY
%j5qe06FE.0]jW$W7[Gl/M?Mp<(BpJsQ$.,,14#0l;W)7(l0#00)`AaG+K")s1][6O'>I8/1A7dtG(Z[9RVCqn*inA^gI`I%#b(0p
%QM8%gs+-ern8b=0FHOc`jTuRm(S[8<FHmEZ0?u*mQO<7,b`,_UkX^UV_;4H.7N"VaVT5!Q/Oi1&MDUf=B1a@UkNtgTomL?MSn.Dr
%2pfNF`du(&rHH^X5kTX3#2H.Zi_A8+0"`pN,CXqU=1u.NX.$5CN=3+J<F0GGpG<th=_oS2Af%gKE:X^s`Wt1s!LS'PmPhe'S5c0e
%F$Z`l_40mOQmLg\nV@3_LF3=">7qanf.`B@fVmCb+59^?-!A)54IW'sM"(R_ko@-/ofM`TF.G!*E)e$ITk!c?@)(f6!.7%`n5Efe
%N..9%1PnJhVD=<03Wb;FUtM[._o_!IDBp]KMChDa,mfEL1-WQ&JiVFApKb^,k!\,M;RAJG+%:iOd!;EoGD>mJDaW/#ESGWO,b\,+
%d!8"CeLEm5K1u/kV,lTM8do*oT_<VOA]fVl7Gek0AU44kStiF^a@<_Q)G!jsmkcj%Z>h'8o#1W_#pR;##JdWopL]74OpUMUji!(`
%3P#HG/C\\RbUZnJBJr^\fHa#Q<)fa]0_uXI+J;OV>nJ\tJhak6#3V]9L!SosLHQ%ia#9*VWAK9FI+C`;?D3Ls$:^n\R!2TSWaKXG
%("4FcZPlkt>U@3UIHps>@$g8rfr]0sTh.!j<UTKM`FZiCQO<*DH#34g'+c)N%h%nN\kFX]!#?QF)m5*N<J/W6"Ku\`6-/"g:'$K\
%6%CqJKM<WbQ=Af.1WP9&KlK\66\Hdp9mlc$+<+6gq@fW/7`b%4@/%(meoCL>Ige1:$g`it&jpIrp.JIsVee.@"B8Dd_*tW)LV;)h
%atZVS@R)S!N/<"N?,&$_74Jr+H-nn,VP\!6;&f<'d-gdDX?HDgfdXAPjTXnC45Y=(h1L"td>8,*.@BR$<#N>3ocQPZ@<E&X:ct.h
%@.(MLL+Fh*4K55_MjWm/Ca6T7nTq04L:YiJAG9)GEdV+XKt0Gb6B>l$c^kCTF-c)45,:n%W?6?3+5/[%Xr(o5$>rPonr$+lAm$/$
%/9hG%.9K>i[U7hUh4g+ODP"jj=#_P04lc^'I(LJ4'eGr!/IXChZ&t4SK@@.U+5LBDGXlSbKAE.Z3N(]UanM->:nfmEeb$$r"4h.=
%+X52UQ9XNa3ZZ^\AG,(AZF_UV.fkYPf\(gb.afQF+ou_uZ;02->Yhl".@SbgF`Pl1_"KY(0ajmJgW#fKE/hb(REskg'=YGg+XliR
%o<DX2ilTU2-rZ&de\LS\bH7]<n-Zq4L>;e&:Oi$Br'0X=-b0"LI"Dkm'VX_0+,Ed#%Hn%kPb7s?^[&f+6n5_E:opB%4qOj[L[N25
%H6*Sb/0=fR`%:4UhhtZ[q16%EGP=A`U(9F!]AS;P75$n#*'P:UXC$B/K$iZb@Mh53#GN&`m!]q,hgHo9\ap@r(<^*-mmJtAr(oM.
%%mC]Ti.I*/1`F^C;9bXhnZfSn0DuU<i:97?%7^:mFJIN.2nm[MGTal6o+XA(j'Zih.*#9I?C[cT^)uUtEt?5Npu!CEcCIJpZ$6Ka
%rZ(Ill2rc%hV8"-8"Y,Nma2HU+8O^F'L!<0BTg)hIWY76pd^gor<Prd],q,hO1?>9h0B2HMh?KTX8`UJpWn<Y48]I1TKfAqm%1DL
%<mS?8@o+n^Of&VD&?3*Z*b9QUA9_]a*g[_JBNC:(dT*#;M.k_Bb2g.OamVm@0FU"-?M(!F?Zs0=Vpj!V2_7A9NVMXg:%BiCNbGAt
%abCa9B_"Eel]B!eH!"=ZTV)n:MN?.tFA@\K]]^^Im7;bW,"J-TYcMcLTc-RRRDlsR:uZ2&p\!AC+8mo+Z)W.jm[]n2TP!IDka$rQ
%__hkW(##Km)G7fmiYFe=21M`tfhKme1sDAJX`u$<-AQ$bZu?jqRq?Z,qm#-7TG;k.ep%AGBFC?MGY^MsQSg-3T+FKSI2>g]T?Tc3
%F#a4i5V!k_;qBn6#3ocgUm<r9%n0Xl!FchNPirO%1V`-tZCXbD!"(\@k@c7]_4MNlYQeQ6;Gpl]SMB!Oe>[5^%nl48>,JeI7N:"C
%h7sKMc#4diE#&^b7tTPcT1V8YjA+h?^2:f.;h]_K:IOFg&sDGWVA-$"Nfim;oXRr4)WLi2jQF@-p<B?gPdN0l;M$hl2o-U>"*d-1
%$.3]%,0>64h-Ag$RYJFcEO3%+?M(L^Yt)VNM'0BQVQg.1d']f;-XtHED4",tmJ-+8!Cup8ktYc]1i+=F[qXJ8,J+=b$--DVFD]9:
%F1&?kRlIM?.RM8<#:lMeMl!NeRR]HROcC>lT#=6U]\I#9Hd;U[k[P;kWuNO1E#Rbb;;Dt(4C0?@R*t'O!<cAL-:[^D]<2Wgpp"1(
%p^dG4)YI4>r,8PjO;YoX4FCjDf>jUkX0js\<JIrDbW`Bi82Q11oYBm"Z825;A%\_B^8>1]=:Gm[akRD@dd351!;5aq2O,1M34*ip
%AoT8i4q5CHaMo8JhK.)I<T61MZ>egc<Hb?8=Qa`Oc"KgXoJm7Ln]9Z\o$7$umK@*T\.8hh3,<&BLg-fE-Hn"9@CeNl5ON9OM!Yk5
%UQ8@fh&)0#[+up-"q\X;;J>i@+ujjJS1L2?V=$uB#6B;,fUoNPi7e:hF!OrbB7G.N]MgS45?_/TmA'1Q55J[*J<)l21MC/,71DHq
%=FW/F=<i2PEkq>Q@g@DR_<=2"p/([[O$47DgrVN?G)WT]I4pJnj[\;9II<4g69k*5/>5j'&5@QKK6Sc<^uYf2$9a:PU'c><Tt!Fa
%H6BN'=-i_[Cp=c=]?peb58[bcUCTg2qUUF2$kM]e.-&V6pfO&;NU=DM"0;.3=@3JoTkM@$qFJ8mJNX]er9uW@Z'YVXqd.d'l]9"*
%qM#5!%t*lOfL)9Y./LH_F*oD8cr'Kp!l<Cl@h>38O$k-P?lt7no_T.e,!Y]N4rT@7QE?a)/`W^O<@k'o3=E68JUAi@&Lc?u)Ig$e
%%K&AqP>tj]6U54^3+3,8?_Q8pMgf-^qme"g^*J$D$hI%H\ViYKDB\C-ak_>+[eoJWTE%(oU$(LRAM[He=nj=XpVI-#0bpKm#ki%G
%Z<m1472BqJ'n52+WO@CW')TJ&0[4?Yi.7h8#t53t*@'ESqo]*WDCg#rSO[k4Ih.s2a7D)"pkL]:L:"k?UjrNt[^9O]P'h9%nckLH
%ZT<rLNC/\.m(=BR'8h.-6\u]EB*&m-To,Qe8Q_W!Tbb.2J;e'4X8k0@BjdQ]haM'J](CPHAb@\Cs(c;&:c@uc3:S+Kmh-kuWe:s_
%7h/TI-.0MuG")i+9=bO0TTG+.+_<qS6@\=\E?LM@NYJ,\F<9)J>]c"s\1K6L_t5(%VG+>u#f-=/'9R2)Jp'n7)fJdZ/94a3.HT;Q
%:m<Ro'gl6'`Ep>\Dp+X9ZWi,8?1ZFMRt)33,MhtYd-fIpf(nie71OIAiY>QSEY:IWZjAK*3g@gH[P4nfVF-,9f#DfX-E31</f?U/
%]t9D?H,-HMMhYP>BjFt#$n546>H"+uG..\)5N79N#?uP@?shYoM.ss`qBMPqUL@4t1iJPXl$.>Mqh?=X`L?:B-e_:2`RV6N\L:1#
%;jng9?.=rZ%Ge5#';<f33o]PJmX%d3NV*C;4TPPb4uuc8fkD)a5eER4J/#sK7N7L#1[^naN9so_+^)U&:]Q`t7d"Tp,f*T]9$BI,
%5?,RSiccOWSu/P!^@J`X]D'Ig9_AKI4Koa%H\Iq"+`2a=f`g1l^b[7HFE,7sRNuQ.k.^G!NR9J!mX4DIj?NFR[gjM6R)b2]h.+=t
%MS[?^H!m7mirE^NTadC;3/Zt;&QDSG4cARO#MY-aNX_$8:Im>g:#`sCqRHCI0nsC:PeIWU;2$OMnE\Mfn1(=aU<GLiJDQ=QDArrG
%jl:Op$b8Peig'NgBRC@/M*qVS)/2ViJM5rUl7!TMUe(j>*n8$(%[-/tacII5#5foT+dX"O^kU_`LB(Pr"JGA-55WX+l1q[rRbH[B
%/')*$(H\D]/noI>^Xro2@hV37,$#-<2mNgP_WZ$-m`iBJZ'[7'bPD[$7T!@oa@$Y>kYb_HO6gq7Cfm$/?F<GHg,uoP*)WZSJH\c-
%-j1Ta\9_j]X,GtXg^KW39o-d+oe`#k"(Ig3eR2B]T].gL`j!Zf2%hW5h@Aq8P4IY1Q.5@FgI3>jGataM&Q-r'<0sL:O5nAOpH($m
%R[DGPK:Lda;?=VKmXfI\/rQ>m"`t=N[cT#A-DD4PelaO,aTeoikFp_2-EiAK`CW;"h&J.f'?3F=,T50ao+cli1e_+n,uI;:0M(DJ
%?h?'f\DTb".u#/3=jkHG+hgL^R`*irgKOM%Gtn&hLc/Kp%S_*D,aF!X,Q$9148#/&P]!G$o;l`uNEj6O#B(T\QmClEZh0.i:8IJM
%?sY$30\b]8"7pJ+Jft,rY$V`g0Q]J/=@1g#<MW%cRCFT$jf<sg7@M+JqVgfOmtcFUN3/bmqlIV3dhK;/E1M8EM!sQbmWSebD)pFU
%)i6)rUYIZ);g<(Hjm+msd,AK^ZU,<J8.jTt8(DiTDPP!n*nPgmRQ/_#qPhU!.3S$_\W<DlR@@W(e8IVZ1X_?j`Z.u4.8VfH:JIHV
%.^_4N?n/>k2YEe_1DVK3FU3[sedRDL9>P[48I(c!<!^sCa*-?u@YIpFh`;G]\PS46I\4ll-'kDiWY,!6$"$=(UMmgNZbt`oJd[8i
%3$>6gRt4q.Y:JS=R)LHWO.jpd]:PM?ED2"a;gUQdlu$C3YK?cp43-]fg5q\K4mQS'<5Af@'`pf<!M:""m]Oc%*lDDk!NESl#T/5u
%d9c"K#^ZCAer]tu&E^XUjsaik6,%G_=3b<&^d>4g%^Wd1N0,CD3-3tV*6#WL.g(^9asBN<5*]rsNeL2;H;lRI:PUktj5(S\P(Ym6
%7?m"=':!;i'_(\Kp`X>Qd4_UbSVMB$^9<N9I\^E-X?Zr6rFkU99Al!&<ks/59.g\?_-)'2?`rYD2)PHVa+ngQ;!Zq!gmYr`&`=_g
%s"A'h3"!TmpK-GfNSXk<r]I9oaid9kd_go&T0;MVT^?7O53kqkg9B73O%j#jjIl&T9u[T"0S/e3B<+#F7N87DE\T1_T1"'CpO3c>
%:N\Wn'&4Y.<&OAmf!s$N]3D#.A]:6*-E-_KD>obOhE^JXBneI53be=EeD<kuf.1SMYH[h+l&ll`VJU+[Oar:MW/Nf!`nY#*!P1n8
%1aHiBG(Dtp]7M<A4a$g9oPtkFSuGH*m([U/]oGZ4J7kd[U"MM.MNt]:X0]`$M3Ma`P#\h=o*oUW27Qh<.n@XE@Y\7>!Mp'<O19p#
%p?b.pX'09)bm;SkKoX#M?8:mG"QP:R8T-Jc)FF-&]1)>nE=1M'NM=f-.C%aD"XjPjik]Pa.NCr7m<b1F,](A)'f?_7)%j<S/:Ps"
%*k$N8Zs:oZhb7Y3rS>00#bYF'ftt,K@4^GAHa;cOok5t\^PlV&08eP\6O4Q-V6KW$X!$'Z%sNm/7WS+m(qOE(>ub"Z[ZcBrgB#$)
%mHB9+%V9T(\`G=Ha>D470in]D6+Jf!EMndckGWcq6,#72UAeVY)fLmShf)q:g>OUrNZT]Vj@_!G\X(gdYV?!:hGJ89OA4HNl:\Bq
%&&"%*ZA%:ShGRYmKS*N.V34f<3r<3[Ts:dbBYU?(RP>tm@_6<B=JR!i4HtK7I.;SV(6+.AkQ2]n]laQaZBha2p%cED044r+K6e;X
%aqX<)%FQKZ1$(m$K-G$36h15(F+?C1hUEf]K3a=sZn>b\+_`l[b_5rUBMJOg`+IFrI8;pAe:'C'+[F6^64'-))CT2(!!%G7OUk#_
%C1FBH[K3%M&^]\tq2tad*o)Pe6mSpbX/W=W81@$VV%*Y[.CuF_9;sh<ZC'YElPdb$rOtmf)#Vr=9NF3:L1(o3*:or*9ptM&='J#9
%EjK:RY#B6U6>r<M<)^XKjFe:S67#u&in()UH6%@elX6/]rBi2=q'$nE)&?^5!]S/\LSgf,$<qon]7&SHVh+>+Kr;&L\1U)A\;Wed
%Q9D,\B^WR887RjEJss>*4s76MUp<1lB3qdQq>IuG3j!^#6qT[McPj#`g@!_hrTe#6S?[S%3CgU3NTMkW5W;jj?8j,I7_8i;IZ-3Y
%l.b3M[mqt`5C!n%I*$HtVO1ZK%a@B]Lce?)LjUCIBfkKI*X9s3a9T.lO_&I1esCD*'cu0A4<7#b>X);JUkTikGh7S1LX\X<Ztd:o
%Br>oq'eJE_0p.)/>[ot)L$,T,Q`Z,7dh:2cN+_a1]Ql-])=@d)!_8O9Y-POZXVA)hk&EJ&)c/ijg.nCM'%V"OUY]h\gZ%\@YmZsP
%YQo8km[-/akF.n-Jeegi,'9n$YFUFC%s&@1-l5fq(/?L__)uKVn]9_UQ42er]7>og%```N`dY6V`n69nPba!HQBjj*>g]s\3>K5u
%a^k50Y)eb]/bh2eNZOH>/Se5nC-,ce8=nL`0o,&PFh++3DpO!:+b(K0^@=eZXJi*XDbh'Mo(7>KFTNSXUe,Lf^n.JXY;]e_gN>rC
%nn<iD,elN757L64Q)Agqph=C2RgfMkmc-2*[9W$rc!W!">N`;/O:mdkLQu#r9lND\3XM'0H5PolnRpDeOg8\Y;S+98?8:'OTCNqP
%+cn6+l5WdN-[mN0;QCT'HTgYtLKon)(TCrV/c6^mW:,[LiWtG=>+[m/\L9pb?!?uN4"o^_j8i'l7(F26p77,($u.4@fTZ3#NOH6H
%[p&Em^e/-WLD2qm#;(Fd.d`NcV#]^J_j6s('W4W^!o'V^D_(!Trq\Xe"d9&Q0LOSN>H!K"HFF3:jRnUa`Fb=+^(jn_ZUHCBc;G?6
%m(>(?:h7h&0t'@_(9)q;_(9'Y!]T?W^cN)SFc.V)"mM-:mB;66X``dT75S?[`bK7dgNtr;B)WYAgpjJ-hmhjha5(gs5BZ_URPt!Q
%+CoT7f@3(cN3OoD9QZnqnPbZUp?me.DJ[m2VUGmNnE`d-/>.;M)noTb7"*H?-.&YgWXC1(1duuCQ#7teGT`+mXW2J>G[/Vk!ru6-
%BY]f6#u5HG_fOfWJHbMD%5_M%n<;5Lp0Y(]!gd`6<8c&pIE>r'FZ(piM(hfGhid:U)bs21j"W-<c1fR"L%F,+/,WZbglN=4F4''s
%EPZD@>/Vg2*u7dLR3_u^[tHl(^]DZB"PV8R?fs/G);b?-o^p!9L'MdO2.XFi%WTkg8qt;'Y#k+JCXNc"IXEX%Qif/35pa.`qW8$8
%$eT]qAH/q=+\@'5qSuNiMKQ?!HaS9=2nIg@@D*ruW"mR/[?$=SN5t)Q"7=H==ap]se]rdLe8,,-+cefI0O2G_`tdmh7M<;ojanp>
%U;*=GH)&PSf,H!^N(>DB^?_gi!n`nV@6dA#0Ytp$?*?9GSfn'*.*Mp)ESLct0Q-](_Yi#bfsY>oj2r)N+PRL_@pL3f@Jq3uWpJWd
%=>UT'pH!""YF&,K[<bAGp-NJ;4;pgpcBT6k.%asBCBS"@^9T3%OjJOt8[+)n#DmN#\RK_mb5lT(*7BHk4_iM:J/U(L*\0JA`E'.C
%HXTZ:WWVYilYkCNSlRIS\I!C+@Ts06-YONMRU+t7q8B'@d_E1lJXi,3TPnE=,d,LVIu,^;>D\uf@:3N'RkBRbchDZa""jBm/]\iU
%b1>8q9cj&HitGEjLBe+:.:VYRDkZC!*Z84>T`7YSH(\<Qgk5[4@rW0c&XjZS-SSQ^*]LI4I90*@B<Xdh%9R89[>&XS;]"5LD!PHZ
%6DMX!;=_;K\o_NaXP^4J"hFNE4i<_(&d9";=kmPTY!!fb-M1[slhf!eGb'.WD3.e5#<N<SBq5Hf`WA97XJ$O\-d'KKA"iIJFu:.t
%<*[f!V)0UU!tOf@N=T(,hk<HbNSr$$)l8/o.M2)o6Qq0cm3<N+"SW@SKNbEJX`==X5`q;j>[Isd_P#/,c._)Jda27!ddn`5&o/0p
%X(^:YVPRLn*7E^u@liH!&]1XV&F^B',$>=IZsb9_-GIp^aCr=s(VVI;.%%n.RtUh*e3l^>*nb@m9'$@QrsfHdk$:'"QjK"C)>$r<
%[8Ae&Ju"Z#%@#I@^kN_tp.c;rctA&fMej5fF]EFa7>&fdjb2tZg/ECQaNiHDiaL]PbDau1nID'A`LuUej?]3R"abgL1M^N"F;Pp8
%?:QLL+6L@XTWFX=6c8u=US^EI*sW+l48$Ua/l[jtQtfJ_J0Kd$DIdQ.,6cu&FM6c)],ph\1mF[^QQT[m3RsV$#_/0LS&RW]-QA";
%rk%@r"&hCq"5RAmN;ej^!K-@H?U(mW*%Zh%LteO0MUc\Vp[&-=`=07$`K#6=J2r=T_#Ymu/(dn[&4%N:*>]*0oDfPD-37&"cir6?
%'hiPSjDMIQ'et5R5k@/NV(&;kJ,i\l)"[6cK*J[l)X3^t4WS'c'%$*VTgH!.!rcrU7?K;f]a)PcZ3Ln[SF>'KKcUac\>dh%><i<4
%CG=M[>6tPgd.@Fr[RW)f8+]X$Od3"piu(Jpe>`jH93]Nj(U,.";B_'i%lI9#=es*-a3N23M64,+r=]s-#HK^,:L%,GRdn9K'.?EX
%:W]CjA:Xri=,/$PWNtiA6bEh1U9FZ@*_iQ6EtA!M:'XG"M7+]QcIB(&M6P>R?\1_,C>0+b1K7"[d5PMR`>*&SF7We(92`iMac4XX
%gu-"->JJB3mQ#UhbOmU2roA59^Xp3EIW5PFEr;rM,H<fu^tK'SNZ(0*a9[O;i9I"FI8n7"=AJY'\P(MuY1K<UL^f(M'I+p-<$>_h
%*jn@3VPO\S'+-pZmE&.cIF>^7?K>XA9e.n@lY[06;)"[-[(<V=9kL!(TlQ);mBqbp@#*UsDBO\cXPK$/FTL:9b*9LWnb-H-YJoDE
%fE0u0Q,@bJO'O/i?gVZ>ni/(Yc@\5Ies3+)#%1QXgYOgD;=^aYV#$@=f"FG;lPQunVqV&'Eb;kCn(4!O4ncoO_0F0WG^Zb[74)+R
%j<6.:bQM:DR/8:,/!_-U\(*NR>e<a8jLZhd#JbK@cn]-tPkff8$bqb?CUdF8Oe8$U("#ZObX@Hs`p71&K:6;kVWs1KF$"-n3*LPn
%TNXo5+^ir%#_KZ)]PiK*E@Gd#a4:Ak8E7C`KT3m*ImAlB4:6@[(=A,TYOG4[@_.D!N!P!NE_X7N4YiVL\Vn6CFBX.@H!Hi!A&^X`
%I>(AWfamDLpQ&g5nWZn_lNlf<HBSFAg-.$l6U][mA+^1'778[oKIgCK3(Cqs#`C44l:OkL9%d-!*NlZ8)2-hi^b5eEA8KjbJf'qM
%6_F`&Z`Q!^UHad`(se'%;;8\cdM"dqi@pAVBE7o<BLcVbJNBF0)"`Z:6W\dtX(l0!pKm.rg0!EX!m3`c0@3b(C9.6+O9*T;KFAEk
%Jh&Ms)^5LI'^nO#gdt2M-h[aQ8_p(hJUK<`,e/[36]Cm2(J`C;(OsQ)1eMm-6-iZKopX1i/lPKSpW9jm?/a]r$uFc->WNOYCIMYr
%2aDjmEs-"^4`"u3lTpHic<8Ls9=/7s7KA$Bhc:+A!W:),<=2ULQVA<%O;5nPPj7rDf'+"MOl3,?&0q(NWr/'BK'hZl5chlg9Q6k5
%0oM`X3>LjFGAdY6I@)_/_J7]I%D/(f&o>R5+kTCH!'uGlEVkgFY/j+98>[lcV553/iT/i6\)V3c_R<W]L-5q$!e_B3X*^UN+pp@`
%AbH\CgDut"[&rL]CdUk\GqoJ3R^Se%D6'msU37qiP64<TW<!g&9)`3H2d&Iqoc])]E0`g$!C9\"q_=ccVdI'LfS_uFHj0Jb='%9o
%J/@%9T`8!/RV[_S1isU33\"#g1$M7aBCF<O)K%iSM<B%$o0W2VD`:#F(5O!5_87.#b_IfYkCstX4&X3jSY6gLe+O0m)mKT#@eq9X
%$mcmLY4^NJJ(4;oG1;@Xf6m1p&p@uU:BXb/>Or1=X'Z];m:!PR^_*NMd+Lg`VWb'o;E:fl>GQ.!b33Qb>=N>4.'%b:W#aue1f2D.
%q.d.O3i`*5=2<R)3gb*sG]h&+ooC9SOR!]'_R%a2#,&f43sPLrY7]#7*:JuKHi2^E5(K"G:Y-joC7_A*7O.+6&nK(D)ek`2jI(tA
%9ABK;k"+\PV!2QMlh(-27GN2T=S3r)^`O)0#+Uh>Ij:>@AC$C+nV-Y6eq\L+M=J7Be1gE$*Mo4)$MKD@dR4C[HM_;bbI4l<I9(;^
%cgc6GV;hPU(QsM0A'I$b[`^^W`jgFa7b+.:[X4SoiA;]LVi6E$L4IclmdB\66c!:;"+eMn?R,,J=,-Y"'fW+M!6c5R`o%cX*Y[d$
%6s<FaBu6&ZGg-^_!"ka+k%GA6+3pY37C8O.E%O(/(;?`t(!>Bq+qULX)=lXIfSoXUjQQWHEakTUd1E,O\XnJA_mtK3`X#-"&Zae<
%.=2*"3;\6$g'J,S/u&jjK<[&]XC-C*J^s0Pas)!FD*W@2Jo_\FoUY1$[BT_B!m:+r,/b8@bkVIn5ltM'hf__&oV\psTp!*%0Wrs#
%Eaf,tSKSlZ6$UG$plD[1I;&>&@iK"k+[CoR`!JoP+?<+_(^9tn8C7Q'0%,aSLO_oh<tm*Ze:URBe@(>R_V9'Z^!!L2:Xu5EI-NDa
%la!*5!]*$O+?[jKN+k$tdusk]UU_q4Vt8,J9Mr$lOa&sHDucAX3\Vss(=PkK@DOnIaHcIIYrO89gaP\(K#(XJ9[5%JE6_*S_GJAY
%<YT&Db['"p4:Ul1+'[r*Jn!/\EWR?;ME01g=kR8d`0<(]<bN&]l\s.#IM&TI+rqWf2IO^E3_Epc!J:Qa5JbU]gdWDE/3?+MQZ=$W
%6M-:'2iABpX>$-P!b9D3?u)jD'O4"U4ZO*-<]'u!bi7e]KA7uZjUBoMA4`g!r,*#Q/iEXo>:A#+9U)K/R4A=8+7:2AleO>KA>,6p
%N=]cf&.q9)_BqiY<V$:.?/0JqCBnGc7OBP/$QS6K4fLr&ZbiAQeCiq<>LaQBkpC6m])OV,IIe0mdsQ1/GK%+?X(sV6rST!&"ikf#
%$ja35(A+c&)^B.G2<Wrr)QI$BG^)LqL*!Ph;Ik=324I0R!X!SW`++5""4i)m,.Th?=">=-F(DkQO)ne)k`Bu&*T#BeBCg'/UqQ2>
%A#e)CeddPXcb-dL^inXjk'#Jr2tXkgM)Cs%3/$teL`05I%okl&.g18(QIl(kF_I.A&;SuRe1>#G.`jB7idjk&(pj9G+gaNZ'=PJh
%Z'L*S%BMGhnW7WEc+d3r4Z=l]\SY?hae,?"jFrs+*e,.lPla55UK@arB\G@g,fMlF@Aeb#(^?&1(,e>i0gmC]h\]1!Bu/u!;I:qh
%?@O9JLdq^Q($[X*6iD!06T+6ELbaeqI;r!S3SN]"0Dd,[k7+K\0^C37&4,f#8.>;d<oQGW0nJKW]EE%=4!t:@h\essV895AZ_#*[
%U\OV=IZ/A+YsS^)+'`eKSrCrliZI`M,@!+$1@UVm&oGUYjbcbV\e)bZFj^XR8L"scQGN&b$L7&qFlpKL29JT/=G'M2ZmcjrN^arj
%k't<3^<V"(CuD_6Y5s<0.qI?`1QMG*F6,/9SuDhbF+\>9.0s%E[HrtnkE"nAbT;$aa/H"@n6?FAFYrIuJ2(RP[e?ChKpaE792PWZ
%1__tSQ/o)YKV!ACPchM_0dGHnQ@"ft,h+'sbFo5nOOR\IP3%f7Bk<"p>*gN\-7eJ4]b,#."n50TOUV><ejVUEnfeDZ__j>YJ_UF4
%oX:rJ;@FkK\qpCGs7T1>6*e@gCX%g1mp[1#TZ<t]0uEt@S/\L&SO`O!j$7l(cC8[Cs8,m`HOn,oYa:u3]$PW>[(MKDX%6n^^hE8:
%Y"e5186e,IN)eMi+fIY?q#f#4bZ37g-[1W-"&(@]`%mIu%BPe9o<A@pGnER:rGagq@MsFK+*f.m-G?WK_tlHm(^cS\WX?gFTs?rT
%jt?>bDi4Qn]?W2[Yl\>8QI_KHPb#I(DX$<Xl0<!<l__NE=0#Y0E*lh"'<m&JLmnUlWi/9Sai:a!'3X>g!?>laU^P0PqYgkHiF_p8
%KbEoeo)PkuZ$,)E12sr+68.(OAY5hQHjd*4qBp3C$-5(VR6)Xlc)JiF5'DBgRk_.mr6E@u'=)$&Xde%<Ca@$#Y9YNX3O"EB2o`fq
%XT6i8SrN!%Q;(r<)(B$0VS$f<-Vb]tP/)'&JHUH^2d6oBr"nds;%68_eYIpn0$u6QK'=q71]g7e+mZ]1d#OSJV+j=L,E[p0=+\WH
%q,`B#D`btPQL*2R)&:jI%0G<Z6/1F&7th8k6YG?M"N(7#`9AFcA5e_Cs'`$QlG2b"+p/!"Ug/(sjQl1i.Ni#)YF<HsK4'>c\0frI
%_iYXWkNi,$hlH;m7(=Cba3Yd@%@Jn9@c$nb]l0\.I*d2/Gf!Z47H#2c:(:a;C?d.NOV](p/W1\UTt2pqek<!jfDp(pj[TIB?,):^
%e9M2R&<MO[]W1%"+groRCj/-!V3%iT!J-1\5%O_plW+:Je23G`,o\eZM"29T7Duf[+CsP$R@t#c:!sA;i>3ZX[4>7RAC0VE70@->
%nr=ig2M*Cn)^@:;`uVUTpR^aGHa9fq%J-b,(s-8JQGs#9D7P5snU4=;b:`T5&U2V8pI*L,\F%!"b*l?,(k[%gN:E@0\]hGDaW;-g
%`,!NRZ-BN;U51R$KG<CF\4*:OgcF_pDE=o%kOt%T8MG-=?5n&*\JdPS6^VeT?6nNb?c\29F!)"`HqQ,bKns981JPc!8>aV5dW:;=
%@Pi;npo!2K$YO^(pON-8M9If[h>C_#]2!9'*aj=!@*A;WQuY$g;C1A`prh]jcpE\Hfikhol?Tmc&h)I8+q#%99mQIGXH*g&&dhIF
%iYLq+klJ*U`\(_A5YHR4MC,,S?N_#ngF`Ltf'c`J+,W".K1*6]SUrj2J>5']jeg:Rm2WCPH*Fjd5_*mh);I%F';Ps#*`0F:Vqe*A
%.h`SZ2H?ak<&Q(\Z.F)EW"7qL?_tun'G>I)S6rpZ.r=6X[>pqC<?g[]4V9V9aUH^j:5b%f?uFiXP$chg`7k+MZX,OA0VdD'h8/9H
%Q`?S6U<pqbAeug2p5CJ1H!e.34Ugsf^4l/h(*B-:YCf-X*:@sO7p?t[ALX9RA06eMJ<lUF_n],K5>"Z;;LD66ID!+eQVZn`>i/b_
%GfTD-g^3b#*+7Au<fAuK\Um/qXKDlt`JC6cXuGaUj0>scH:FV>WFQ+47!Jhd$0Ue0/ZC7^*((\mr[$7"f,Xm_kp/D'\fU,G6>R2r
%^,NO2+!%:%SH7@ME/JoD=V4>(G]FIoh:*V\p8JI%\2-:KBu(f*"[V,X=G>m7215m#1+2WP1,K@X-b"Z:&R8Q*'MT&0$"7;0NMp/Z
%9."i:C]jiSZO>P\T7OI=];NF80n3,RXc"ZaA5_sC]/"h7#-#elQ7-<=fP$Ld_P,u+nH18!B/(6*_j2suE%b,@)CHoZ="sHfPo^8'
%cQEkMrG?(<:r3etq)#IjRS2sOkj@=j:IsZ\quVKSA#8b4_DpJrBJb6<4:RA7nU8e`P>2a]<Nt13I^:hU8b&ZAQpho:/VL&^P&k$X
%R'dOcB.6-@YlM[j)VmQ5Z'Eb_q7+(@S.6HW'Sngq07kh'()aFu=.Pcdm&41]V^qC@f/]QXM0n6S+ir01bmcc]r?^Qjpa"N;_[CA@
%poZjkL#I:M1pFT1I@\`GMeI,hP4F2+<!])b!:F(^)(?tHkci*IW\Y_I]ai6);,n)F!hKm:7+RT\8NrqJW6<mP&toNCbCu,:Q!G^%
%Y,.]pp=VC]/PZYm-lPN\l)H;PSXZXIE7&4b#j$</A/H7Q?>;EO/4-p&I<eZu.j=>GDGfXD5mTYVZIFZSVn@8=etRSDM/XNj]ue!O
%Pr8!MgN)3*SO/fpWo4$Wng4F#:cOVQbil1VP%m6,<8'Di$Y;AV)GcG:AS_A>8pOpjC^Y$/Ec>h+!.al#imq5N*g!km2YP\1j8%Kn
%24>bW@CIc'37sdp[kJ/'PYF&B,s'2Z=h:t,7XQ.Q2h"[dg-k;sI_3Nb!HTR#Q[ZuD,DZFM&hpHgg"/U&X#=*(\bPA/!u0()3lF3*
%d.JqX#:kO2mZTp)%:_Xa'')'-Mo&ab&/0"S[IWR&hNZL&#WFB:2(k72Ma>XNRL\P%A[26tYd4tBQ,pj=j8.Qc(*k;Dj6KHm#Z)_j
%E6,cqT2P=nA]_WC_<*!9#'1_f,ho-]d^/MH,E)>VX:9mu@hMUZZI8$h*J=S4:^iT@7,d`"ZFa;OWJ1qRrq)t[W+8askLo<e$JL"e
%A%)!Oi-(,MZP@Gs#4c7aU2Rhr0M-ArW@E/sr58qaV)HHZ?fl*.[ihI]DQZ5iN%(t51Xu$CmbR_CLS[/8YrNd#aAV.BSEcJc/Ic49
%J:8RM@;uRJ_PYF8"]ci`SUO!UO[)Lj16V^_LM36',gc<<QAP]g\'#:b.44(PfCJ<Z5506BPTYYpR4:gec]7`5B5dM^"OM?Z^bpN.
%(L`n7GJFYF7cU-Q6n-!Vf;=02CtC$)!(AktQ_7SG+"5hm%ddiC8C6F2:ZnG-%J''0EB_$ra0k(uC#e@<X;Ra'7JHp^m_ED,S/YZ@
%g4r.;!u:"t<.0-LBZ36KZrHdFoc9H[P:8)kXE=@jT-;1?]3J;Ui9cWo8qVn[31c(gUdha2j\$o7Z?<uY10&KIdR"rmS.6O@<Tl63
%1Ia/.mamaCH6N#LU(?)R<27#1L$#-.D>;2N6eg9\4:UOrn!M0Clb2':";,iMOtUH8$$taQim#Or08'ASr.P4Akep:WhHSGmWe!f[
%;<$g3Jfr^G%tAZ2IT*N.0Zr0h7s&t80"m!pp&EY3'@A'q-oZ-EL>5$2+Pk%X;&"8nEn%ik-4*Cb'`FX1kYF4])2)IKOO@SCL:!Gk
%G?NT+Xkj7D<@$X/`lLW#.__H:19>r3q1-OSH&7*7bQ'pEBKd?6Wc/m)?-.2eDEg66$G'?-6g13%4;4&IaqjH,Y`'hG2kr5IK4(3P
%GXM:4X>PS;FNBk>3kXsO`2FoG#@2s)mfYg$46I=]/2k:Oj7Vf$mc[-8>k@`1hM+$USTJm0b7fda^`TbH!l:"f$mG!.C-b(Y(dogL
%"ue\i_8<j84cnKP0C%iF8B_3#.U@c9^nm-RJcR"dGr)+?qg',.:-F!6nBOB;!2[.cVRpVaZN[fJ1bF*RRpVG8jF\B7-%#i+;5*/<
%aVk6-@s#o1EW/q2'%eOGc/OYFp,FI>ZI$a2dgtlsM!cnl^/Cd<,]Gsh=8<aR:oH4eW_/M9C2)g6ORJU901!H9$T(3o+/!U1!/ArQ
%8t:T[$WZf,kq0,e)cTBq(okqMoe@YV0D^+*4=:O$jlt$?m]DAo@sN<!PT`-tR<i/4*r:Vqj^L(W%%`'@"'(?66jD3/b3p/e!jiC*
%9ah<YX\hUr\(gZBJ\W^G3Kac:,em[\O[^TCi9I7iSOR^>Sue]2KhRQaE%R5F_q/h9KF4=0'FudI+B%MX;Do;X0%'d#;7B%pCF*iD
%mlS^?&\=JW\m1/>E%Q6+S5n(<$U7&)/$$)1'2M!lj?"D`5!md""WV=^k`=2IVT:R"J\s26#ZsaL<ZnG;E(GLH+ets7i(-N2h>+1E
%XiNk6fKM8;6O9,H@:7@ik]A[+<aUpPcD1[4.6bJrGL`Jq>:k8Ap@?T5q$"\J+CnE?Sr@O\C4h;e0GPP=jCk!V3GnHm4AGeoPpJ1i
%DpuWemI_)^8">:+rA:6q]DYn?/*-QBk4`B?)MmKWN5V+2Km`$j=p`$;ncJq;OXfL8(!)+Ok#>k@_!N*Q>M8(**J,pIZ)GmoC^LBT
%0)%8;4'+9G!)mN]&W0n^*2as.m_]*"J:K])J8)Ab1r9SQ$DDb&MP9EPMa]_A`eQ6\ib);@=Eqm2`j>HL<,@>B4BJc8,eF2K*<Pra
%r+hP:4:UOm!jFSHno0`sie5N3Mia[M(D.hlG=;T5)4TZ(0W6DE@+dD_,!\Fa*eenkh+8Y/6fR$Zq@U4;kH+,#OCiH4ZB`A:]fhA>
%hCU[r0gE>8%9Qq)IJkR?a[fQ+[K1Ue,TTid=cR@Mq:_CXl5>J(KoUPs]Ubd@6`e+cRh>77UpGkpM.`+pcEKb_rB69,SVD7\-"BUZ
%#=&^[ZGoJmK.neF0P>u:!Pn!M''VtKXkNH:XK8^&AYOE\MT%'hMhpAWC;aoR%-AE&@HnN9Ukhg(pQum=kjiIVG@*(t-QcdFI%.cT
%V*0stg@bQH9j&to1E"tW=5oh<7pOkYk.LjN?^i8UllnJ*!LG0M!>'%rU2_?Fe[3e7TE1uc&'QgbdaN_1pORl&/r/g</>`K"9TKj_
%/;QG=Pao9\q]YB2a1aI-,)I;Kdd^n+bjZfrd[9Z^)6j?a?]CA&mBF;m+HYrFc%Fq2VL*Z<>hS/tQKC'8qSL4P"tmE[;%>UNg.%#J
%j0j1T67TQL?1]P"6VtIs/n#1c\^sNjQ0dQM)%i.q6""!ci=*Rf(!=*l_l"+&D:[$uLHTI,<bXN0\a/bQSeZ4M:(B=1?aFcY:a(Uu
%5ZnWLCt]#oK\!.l>#,oIZX_2e+"'Kk^*=mY;>QIH#F_o/J!52O7-#."#[WSVDL@p<'^\2h&n,NrgA\1uYk%Q!ZEjQ!TBQ[ah:?df
%ml2Ob*i3#B#8ahErVEB.\O\O0,\6Vqjuo[nG$teAjnNXs_J)Pb?ZKMsipd;On$=gMgLTA0XZ0Tg`K<Wi%#Mn`K\L)pE3WF"0_ZG+
%_R:TK&]%a7Ms?4kJL+$h7bFl@)9.:@-jkDbUq>r;U=Smd&nWZHF0#%DeM,Z!_+t\16RP2=P=J3OWo$?'%h'LR-F>$#2tV4MDSV('
%1)DoId(on5Xu*i+@UpZTQJAS-e3Z/)l/!Gum,2m8.i=]i^'#WZeU_.iO`'5F#L/+)XH9IDh'itQ*D7FINR&0uMo`3()G.)Y;gcSk
%%#PR+MGsI?`Ao>Z<\9$^,^+8kT"@]d.'%eB7?r*W(=bOIYJO^X"R&2%9h=7&mQ-cI79QnIJ1X,B1T,Xa'$Ij8^6nWPhq,$f1T,J7
%7if(cN]i5SHlCJsc=k.fUsrH^j4&ep#mZaYWP8*f,U;JSmcq%XfLEM'-7>TW=?klD*#47AkaR`"7&2o51@46j0d+CD[Om0W;lXeb
%qe8au8klFhPOek[=Rg?11,j'An6K;Y6gm.qX5&N+RXsC.'(C['J`77fUPm\`kHFHZ_A4Ra<0U9p6NWX'_rlfCBUd6?G"DAq2l.Q:
%`m&p);@]9CSJM<r<Y;Y#m38"\JODE*^$;#Q-n?CqD&gF^dA7>[n8$01?;)rMJe:^u@G,guAT*iV%4F,nBoCEjdu`u[X0hu0KAcpY
%.YgFH%CBi*/KYPS5b"WM9'Z_?0Hf1a9HUFcItSn$b>p?)Ihmp_HqR;rl0JbP#GLF8$Q'['d7+k&YDM45e<t%;I@"70f7NBV2]#*U
%`'P2GU&M@&:hH=boE!a?oCtNBnO6V,iR"/p<)I,tk,'p9A;W":82LsFMNU078C<o'IqimuY)_p!6e^!XU6@8,7b,*>6"0<I"!kR;
%Gi7%**hcO]'L4)4Bo$tCU,=1<j5;fMm4Pg765HL;3QC?AhKf44!_6gfD%D.,*e<=pVW>1!l]eH8%[d1hr[[YdM8Fh:,-HGl7A]63
%S\PVd:5^C@#a0Qs\GM]Mg,pE8#6bAV-tWjQ4ef/f8]nI1?Dq<LKCT"_68/17Un8e-!'nB>G9&QPS[N#PX1JmW1#ch\Z.,MCG8F&2
%$^sL3Wtd#>N9kV(*'kFYr6!kYUEhJ!a\,;lTbG^T/>R:8M?>\qE:dn*"3U:!#3OlC!iTFb3^;i#KM"7U.la'TWe'=lf)l?NCV%.r
%ci$:=*f&M_+!qF9/Ddn1=OHn8/mc>P+YtbqBL!)W,E`&-+J0l8eKfr7@c)h7EF:910SCFol\&:rN`'*or=jU0=g2sbp'RX)H[^9R
%I%NRFl'KrnRoB]=f$u[a[jm-9`/<)gk^E080j-(;X'-h6CIPj5;W0@-NCQnKbNWip'3"%uI2`^6?h"fKDFhg4dg5D4NNb26#Z>B-
%6;l^=9Bic8MTjW+32`dDC+ij,Q&?Uje;\5J[1IsYM'_6XGoDmtV5V9P5naUKA>kYY5`h[3Km$-\)@Fg-[q#<jHgdG-_5#bdAOJth
%DiIL3af*3i:$NmIDT@hO4:F+uL=Cc:5hD8Ml2[PSm[2LqU'aTL4t&D\Td-XB[b>++#e/IXcp%3T>7b^ZC@P/4*Q7t(O$22Lbm_ee
%bQG\3crthJBRC"7Fjf[bdT'->Nhno</]gHjP,m,@GB4Zaj@g&.;#**^m;m3ZU-UC<g+"Y-X0bpDn+$TNhO!f,Tp]2b<Ik/E),R\+
%?T06;@0WB.D<T^15j2=2"3&tL*;`_PGq)SWZ1erc2!:Rgh="rNmIB%\g'SqKnT>M?A3hZZdrJb*!@ja*PWb5Lh?,ue>D'0r=ggXI
%c,/hi?D>qTpcPJZKI]uY7RL&X(OjSCd)!-Go?]\seq5F'*Kr4<mFsrumFY$,6(1FH'1S=g9<^VJE&46l746"r#<COk&XE\b8tnN0
%_B_#e17Z,K1W"N]lc#ELoXT/S?c,k@.T"!5\5a?P;C[fB3Tc>#-8*eR\mf@d?5+/"*+'HbR"(fU(sO4KOc"bdn8sOb]"toH[WOh(
%D:nDS6b=#_X=:PdgkTg<\q&X!8\TT'+@<?X"jn&&#iOW$88Z<R+&J,2',CZYN,_;IdkH:>5^SL*B78GE*$]A\8OU>U@:1(\UIM>C
%(<q,8pKmY6f@jR10d'+HB]#Qo:(XA1\hB%RLMfEnnQcm@BGU-cC$@)<,<Dc&U*PFjU<)R,!C2pEC<2O!"bNRC;:.!+R_X8rW(&)(
%#5#GKQ61bDI*Ku'iLa(;8B,iu!-,Y1K@JP0%h=$pdaNe5M^f9hh0&"UM+(,m^thhKHJsVnFl8b9$3gonZoG9uN>7.NEjoF=j3Q2A
%mXi&Pg@G"AX2D^s5cfU>7pBpKR[bY]QmUq88Q_rA#iL_%F/uD'JmKn5%06CALj4[NC`q7[X7ZS^Bo9l.P>1]u`"3?>610?Xph<9C
%6*7*aI:,WpSAn!WqPKT5%$cL`#5'8b4,_6(j<?%.4D`AmZ.=DBVP?%-+=M[KChP`]&(kOk?;ll5SMcM[K@HCc%Z8ZLq2.bMLTKUd
%R-m\-F[,!XdNj@4<M43/LHKXJM._4FVZXLZ6SF>l&E1,Djbba9TT:pTb),%G=4J+9pPK?Zc;N/4!A7rC^/#o+,VC2e`9mWkm>10C
%4Q\&Q[g5iR+d/<]3)_b@"gc2[(ch_K=>gsCC&W_?9_T)Z+V]*JkSB*b22Gdt2bJl:73lr:kl^CW$.j7GN.Nae.^Sa21o.`+-X`Gc
%^>o)3X$?RW^]*V=rmU=crR]rE@J.*Zqs2FDSppXMhr3==o=rj@4oP*K^\QX!qjZLCk36gaa5?eXY2GA$5PXJ=s4+m]f0B(prr].(rLN~>
%AI9_PrivateDataEnd
